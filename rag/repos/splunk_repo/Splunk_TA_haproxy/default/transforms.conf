##
## SPDX-FileCopyrightText: 2020 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-1-2020
##
##
[haproxy_process_prefix]
#extract the haproxy_server and process fields
#format as below (fields are within the angle brackets):
#<haproxy_server> <process_name>[pid]:
REGEX = (?<haproxy_server>\S+)\s+(?<process_name>haproxy)\[(?<pid>[^\]]+)\]:\s+

[haproxy_connection_queue]
#extract the actconn, feconn, beconn, srv_conn, retries, srv_queue, backend_queue fields
#format as below (fields are within the angle brackets):
#<actconn>/<feconn>/<beconn>/<srv_conn>/<retries> <srv_queue>/<backend_queue> 
REGEX=(?P<actconn>[^/\s]*)/(?P<feconn>[^/\s]*)/(?P<beconn>[^/\s]*)/(?P<srv_conn>[^/\s]*)/(?P<retries>[^/\s]*)\s+(?P<srv_queue>[^/\s]*)/(?P<backend_queue>[^/\s]*)

[haproxy_default_extract]
#extract the haproxy default log
#format as below (fields are within the angle brackets):
#<haproxy_process_prefix> Connect from <src_ip>:<src_port> to <dest_ip>:<dest_port> (<frontend_name>/<mode>)
REGEX = [[haproxy_process_prefix]]Connect\sfrom\s+(?P<src_ip>[^:\s]+):(?P<src_port>[^:\s]+)\s+to\s+(?P<dest_ip>[^:\s]+):(?P<dest_port>[^:\s]+)\s+\((?P<frontend_name>[^/()]*)/(?P<mode>[^/()]*)\)

[haproxy_tcp_extract]
#extract the haproxy TCP log
#format as below (fields are within the angle brackets):
#<haproxy_process_prefix> <src_ip>:<src_port> <accept_date> <frontend_name> <backend_name>/<server_name> <Tw>/<Tc>/<Tt> <bytes_read> <termination_state> <haproxy_connection_queue>
REGEX = [[haproxy_process_prefix]](?P<src_ip>[^\s:]+):(?P<src_port>[^\s:]+)\s+\[(?P<accept_date>[^\]]*)\]\s+(?P<frontend_name>\S+)\s+(?P<backend_name>[^\s/]*)/(?P<server_name>[^\s/]*)\s+(?P<Tw>[^/\s]*)/(?P<Tc>[^/\s]*)/(?P<Tt>[^/\s]*)\s+(?P<bytes_read>[^/\s]+)\s+(?P<termination_state>\S+)\s+[[haproxy_connection_queue]]

[haproxy_http_extract]
#extract the haproxy HTTP log
#format as below (fields are within the angle brackets):
#<haproxy_process_prefix> <src_ip>:<src_port> <accept_date> <frontend_name> <backend_name>/<server_name> <Tq>/<Tw>/<Tc>/<Tr>/<Tt> <status_code> <bytes_read> <captured_requst_cookie> <captured_response_cookie> <termination_state> <haproxy_connection_queue> {<captured_request_headers>} {<captured_response_headers>} <http_request>
#Note: captured_request_headers, captured_response_headers may not exist.
REGEX = [[haproxy_process_prefix]](?P<src_ip>[^\s:]+):(?P<src_port>[^\s:]+)\s+\[(?P<accept_date>[^\]]*)\]\s+(?P<frontend_name>\S+)\s+(?P<backend_name>[^\s/]*)/(?P<server_name>[^\s/]*)\s+(?P<Tq>[^/\s]*)/(?P<Tw>[^/\s]*)/(?P<Tc>[^/\s]*)/(?P<Tr>[^/\s]*)/(?P<Ta>[^/\s]*)\s+(?P<status_code>\S+)\s+(?P<bytes_read>[^/\s]+)\s+(?P<captured_request_cookie>\S+)\s+(?P<captured_response_cookie>\S+)\s+(?P<termination_state>\S+)\s+[[haproxy_connection_queue]]\s+{(?P<captured_request_headers>[^}]*)}\s+{(?P<captured_response_headers>[^}]*)}\s+(?:"(?P<http_request>.*)")$


#"%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC \ %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

[haproxy_clf_http_extract]
#extract the haproxy CLF HTTP log
#format as below (fields are within the angle brackets):

#Example Event --> 
#Oct 26 09:53:57 centos7 haproxy[36735]: XXX.XXX.XXX.XXX - - [26/Oct/2020:13:53:57 +0000] "GET / HTTP/1.1" 200 278 "" "" 5753 379 "webservers_front" "webservers_back" "webserver2" 0 0 1 0 1 ---- 2 2 0 0 0 0 0 "" ""

#Format as a sequence of log variables --> 
#"%{+Q}o %{-Q}ci - - [%trg] %r %ST %B \"\" \"\" %cp \ %ms %ft %b %s %TR %Tw %Tc %Tr %Ta %tsc %ac %fc \ %bc %sc %rc %sq %bq %CC %CS %hrl %hsl"

#<haproxy_process_prefix> <src_ip> - - [<accept_date>] <http_request> <status_code> <bytes_read> "" "" <src_port> <accept_date_milliseconds> <frontend_name> <backend_name> <server_name> <TR> <Tw> <Tc> <Tr> <Ta> <termination_state> <actconn> <feconn> <beconn> <srv_conn> <retries> <srv_queue> <backend_queue> <captured_request_cookie> <captured_response_cookie> {<captured_request_headers_clf>} {<captured_response_headers_clf>}

REGEX = [[haproxy_process_prefix]](?P<src_ip>[^\s:]+)\s+-\s+-\s+\[(?P<accept_date>[^\]]*)\]\s+(?:"(?P<http_request>[^"]*)")\s+(?P<status_code>\S+)\s+(?P<bytes_read>[^\s]+)\s+""\s+""\s+(?P<src_port>[^\s:]+)\s+(?P<accept_date_milliseconds>[^\s:]+)\s+(?P<frontend_name>\S+)\s+(?P<backend_name>\S+)\s+(?P<server_name>\S+)\s+(?P<Tq>\S+)\s+(?P<Tw>\S+)\s+(?P<Tc>\S+)\s+(?P<Tr>\S+)\s+(?P<Ta>\S+)\s(?P<termination_state>\S+)\s+(?P<actconn>\S+)\s+(?P<feconn>\S+)\s+(?P<beconn>\S+)\s+(?P<srv_conn>\S+)\s+(?P<retries>\S+)\s+(?P<srv_queue>\S+)\s+(?P<backend_queue>\S+)\s+"[{]*(?P<captured_request_cookie>\S*)[}]*"\s+"[{]*(?P<captured_response_cookie>\S*)[}]*"\s*(?P<captured_headers>(.)*)

[haproxy_http_splunk_request_headers]
#the headers should be extracted in the recommended order of capturing them
REGEX = captured_request_headers_default_style="{(?<http_host_request>[^|]*?)\|(?<http_content_type_request>[^|]*?)\|(?<http_user_agent>[^|]*?)\|(?<http_referrer>[^|]*?)\|(?<x_forwarded_for>(.)*?)[|}]"

[haproxy_http_splunk_response_headers]
#the headers should be extracted in the recommended order of capturing them
REGEX = captured_response_headers_default_style="{(?P<http_content_type_response>[^|}]*)

[haproxy_http_request_transform]
#extract the http_method and uri fields
#SOURCE_KEY http_request
#format as below (fields are within the angle brackets):
#<http_method> <uri> HTTP/<http_version>
SOURCE_KEY = http_request
REGEX = (?P<http_method>\S+)\s+(?P<uri>\S+)(?:\s+HTTP/(?P<http_version>.*))?

[haproxy_uri_transform]
#extract the site, uri_path and uri_query fields
#SOURCE_KEY uri
#format as below (fields are within the angle brackets):
#http://|HTTP://<site><uri_path>?<uri_query>
#site uri_query may not exisit
SOURCE_KEY = uri
REGEX = (?:(?:http|HTTP)(?:s|S)?://(?P<site>[^/]+))?(?P<uri_path>[^?]*)(?:\?(?P<uri_query>.*))?

[haproxy_httpstatus_lookup]
filename = haproxy_httpstatus.csv
min_matches = 1
default_match = unknown
