##
## SPDX-FileCopyrightText: 2020 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-1-2020
##
##
[haproxy:http]
KV_MODE = none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
pulldown_type = true
category = Network & Security
description = HAProxy HTTP log

REPORT-haproxy_http_extract = haproxy_http_extract, haproxy_http_request_transform, haproxy_uri_transform

FIELDALIAS-haproxy_src = src_ip as src

FIELDALIAS-haproxy_response_time = Tr as response_time

FIELDALIAS-haproxy_duration = Ta as duration 

FIELDALIAS-haproxy_status = status_code as status

FIELDALIAS-haproxy_bytes_in = bytes_read as bytes_in

#There is no field mapped to bytes_out, so bytes_out is always 0 
EVAL-bytes_out = 0

#bytes = bytes_in + bytes_out = bytes_in + 0 = bytes_in
EVAL-bytes = bytes_in

EVAL-dest = if(match(server_name,"(<NOSRV>|<STATS>)"), null, server_name)

EVAL-captured_request_cookie = if(match(captured_request_cookie, "-"), null, captured_request_cookie)

EVAL-captured_response_cookie = if(match(captured_response_cookie, "-"), null, captured_response_cookie)

EVAL-cookie = if(match(captured_request_cookie, "-"), null, captured_request_cookie)

EVAL-captured_request_headers = split(trim(replace(captured_request_headers, "\|+" , "|"), "|"), "|")

EVAL-captured_response_headers = split(trim(replace(captured_response_headers, "\|+" , "|"), "|"), "|")

EVAL-url = if(match(uri,"(^http)|(^HTTP)"), uri, null)

EVAL-url_length = if(match(uri,"(^http)|(^HTTP)"), len(uri), null)

EVAL-app = "HAProxy"

EVAL-vendor_product = "HAProxy"

EVAL-action = "pass"

LOOKUP-haproxy_httpstatus_lookup = haproxy_httpstatus_lookup status OUTPUT status_description status_type

#ITSI CIM Module
FIELDALIAS-rtt = Ta as rtt 

FIELDALIAS-feconn = feconn as  interface_connections

FIELDALIAS-beconn = beconn as vip_connections

FIELDALIAS-haproxy_http_status = status_code as response_code

EVAL-vendor = "HAProxy"


[haproxy:default]
KV_MODE = none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
pulldown_type = true
category = Network & Security
description = HAProxy default log 

REPORT-haproxy_default_extract = haproxy_default_extract

FIELDALIAS-haproxy_dest = dest_ip as dest

FIELDALIAS-haproxy_src = src_ip as src

EVAL-app = "HAProxy"

EVAL-vendor_product = "HAProxy"

EVAL-vendor = "HAProxy"


[haproxy:tcp]
KV_MODE = none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
pulldown_type = true
category = Network & Security
description = HAProxy TCP log

REPORT-haproxy_tcp_extract = haproxy_tcp_extract

FIELDALIAS-haproxy_src = src_ip as src

FIELDALIAS-haproxy_duration = Tt as duration 

FIELDALIAS-haproxy_bytes_in = bytes_read as bytes_in

#There is no field mapped to bytes_out, so bytes_out is always 0 
EVAL-bytes_out = 0

#bytes = bytes_in + bytes_out = bytes_in + 0 = bytes_in
EVAL-bytes = bytes_in

EVAL-app = "HAProxy"

EVAL-vendor_product = "HAProxy"

EVAL-action = "pass"

EVAL-dest = if(match(server_name,"(<NOSRV>|<STATS>)"), null, server_name)

#ITSI CIM Module
FIELDALIAS-rtt = Tt as rtt 

FIELDALIAS-feconn = feconn as interface_connections

FIELDALIAS-beconn = beconn as vip_connections

EVAL-vendor = "HAProxy"


[haproxy:clf:http]
KV_MODE = none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
pulldown_type = true
category = Network & Security
description = HAProxy CLF HTTP log
REPORT-haproxy_http_extract = haproxy_clf_http_extract, haproxy_http_request_transform, haproxy_uri_transform
FIELDALIAS-haproxy_src = src_ip as src
FIELDALIAS-haproxy_response_time = Tr as response_time
FIELDALIAS-haproxy_duration = Ta as duration 
FIELDALIAS-haproxy_status = status_code as status
FIELDALIAS-haproxy_bytes_in = bytes_read as bytes_in
#There is no field mapped to bytes_out, so bytes_out is always 0 
EVAL-bytes_out = 0
#bytes = bytes_in + bytes_out = bytes_in + 0 = bytes_in
EVAL-bytes = bytes_in
EVAL-dest = if(match(server_name,"(<NOSRV>|<STATS>)"), null, server_name)
EVAL-captured_request_cookie = if(match(captured_request_cookie, "-"), null, captured_request_cookie)
EVAL-captured_response_cookie = if(match(captured_response_cookie, "-"), null, captured_response_cookie)
EVAL-cookie = if(match(captured_response_cookie, "(.)+"), captured_response_cookie, captured_request_cookie)
EVAL-url = if(match(uri,"(^http)|(^HTTP)"), uri, null)
EVAL-url_length = if(match(uri,"(^http)|(^HTTP)"), len(uri), null)
EVAL-http_headers = trim(split(captured_headers,"\" "), "\"")
EVAL-vendor_product = "HAProxy"
LOOKUP-haproxy_httpstatus_lookup = haproxy_httpstatus_lookup status OUTPUT status_description AS action status_type
#ITSI CIM Module
FIELDALIAS-rtt = Ta as rtt 
FIELDALIAS-feconn = feconn as  interface_connections
FIELDALIAS-beconn = beconn as vip_connections
FIELDALIAS-haproxy_http_status = status_code as response_code
EVAL-vendor = "HAProxy"


[haproxy:splunk:http]
SHOULD_LINEMERGE = false
pulldown_type = true
category = Network & Security
description = HAProxy Custom HTTP log
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true

REPORT-haproxy_http_extract = haproxy_process_prefix
REPORT-haproxy_http_splunk_headers_extract = haproxy_http_splunk_request_headers, haproxy_http_splunk_response_headers
KV_MODE = auto
FIELDALIAS-haproxy_bytes_in = bytes_read as bytes_in
FIELDALIAS-haproxy_uri_path = http_request_uri_without_query as uri_path
FIELDALIAS-haproxy_uri_query = http_request_query_string as uri_query
FIELDALIAS-status = status_code as status
FIELDALIAS-duration = active_time_of_request as duration
FIELDALIAS-bytes_out = bytes_uploaded as bytes_out
FIELDALIAS-src_port = client_port as src_port
FIELDALIAS-site = frontend_name as site
FIELDALIAS-dest_ip = server_ip as dest_ip
FIELDALIAS-dest_port = server_port as dest_port
EVAL-dest = if(match(server_name,"(<NOSRV>|<STATS>)"), null, server_name)
FIELDALIAS-feconn = feconn as  interface_connections
FIELDALIAS-beconn = beconn as vip_connections

FIELDALIAS-http_content_type = http_content_type_request as http_content_type
FIELDALIAS-category = http_content_type_request as category
EVAL-cookie = if(match(captured_response_cookie, "(.)+"), captured_response_cookie, captured_request_cookie)
EVAL-url = if(match(http_request_uri, "(^http)|(^HTTP)"),http_request_uri,if(ssl_version == "", "http://", "https://")."".http_host_request."".http_request_uri)
EVAL-url_length = len(if(match(http_request_uri, "(^http)|(^HTTP)"),http_request_uri,if(ssl_version == "", "http://", "https://")."".http_host_request."".http_request_uri))
EVAL-http_user_agent_length = len(http_user_agent)
EVAL-bytes = bytes_in + bytes_out
EVAL-vendor_product = "HAProxy"
EVAL-src_ip = if(match(x_forwarded_for, "(.)+"), x_forwarded_for, client_ip)
EVAL-src = if(match(x_forwarded_for, "(.)+"), x_forwarded_for, client_ip)
LOOKUP-haproxy_httpstatus_lookup = haproxy_httpstatus_lookup status OUTPUT status_description AS action status_type

#%{+Q}o client_ip=%ci client_port=%cp datetime_of_request=[%tr] frontend_name_transport=%ft backend_name=%b server_name=%s time_to_receive_full_request=%TR Tw=%Tw Tc=%Tc response_time=%Tr active_time_of_request=%Ta status_code=%ST bytes_read=%B captured_request_cookie=%CC captured_response_cookie=%CS termination_state_with_cookie_status=%tsc actconn=%ac feconn=%fc beconn=%bc srv_conn=%sc retries=%rc srv_queue=%sq backend_queue=%bq captured_request_headers_default_style=%hr captured_response_headers_default_style=%hs server_ip=%si server_port=%sp frontend_name=%f http_method=%HM http_request_uri_without_query=%HP http_request_query_string=%HQ http_request_uri=%HU bytes_uploaded=%U ssl_ciphers=%sslc ssl_version=%sslv