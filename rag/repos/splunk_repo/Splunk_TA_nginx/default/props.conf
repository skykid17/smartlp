##
## SPDX-FileCopyrightText: 2024 Splunk, Inc.
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##
[nginx:plus:kv]
KV_MODE = auto
SHOULD_LINEMERGE=false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
NO_BINARY_CHECK=true
CHARSET=UTF-8
TIME_PREFIX = time_local
pulldown_type=true
description = NGINX access log in key-value pair format
category = Web

#FIELDALIAS-nginx_src = client_address as src
#FIELDALIAS-nginx_dest-ip = dest as dest_ip
#FIELDALIAS-nginx_port = port as dest_port
#FIELDALIAS-nginx_user = remote_user as user
FIELDALIAS-nginx_version = nginx_version as version
FIELDALIAS-http_content_type = category as http_content_type

LOOKUP-nginx_httpstatus_lookup = nginx_httpstatus_lookup status OUTPUT status_description status_type status_description AS action
EVAL-product = "Web Server"
EVAL-vendor = "Nginx"
EVAL-vendor_product = "Nginx Web Server"
EVAL-app = "Nginx"
EVAL-bytes = if(isnum(bytes_in),bytes_in,0) + if(isnum(bytes_out),bytes_out,0)
EVAL-bytes_in = if(isnull(bytes_in) OR bytes_in=="-", null(), bytes_in)
EVAL-bytes_out = if(isnull(bytes_out)  OR bytes_out=="-", null(), bytes_out)
EVAL-cookie = if(isnull(cookie) OR cookie=="-", null(), cookie)
EVAL-category = if(isnull(category) OR category=="-", null(), category)
EVAL-dest = case(isnotnull(server) AND server!="-", server, isnotnull(dest_ip) AND dest_ip!="-", dest_ip, 1==1, dest)
EVAL-dest_port = if(isnull(dest_port) OR dest_port=="-", null(), dest_port)
EVAL-http_content_type = if(isnull(http_content_type) OR http_content_type=="-", null(), http_content_type)
EVAL-http_method = if(isnull(http_method) OR http_method=="-", null(), http_method)
EVAL-http_referrer = if(isnull(http_referer) OR http_referer=="-", null(), http_referer)
EVAL-http_referrer_domain = case(match(http_referer, ":\/\/(\d+\.\d+\.\d+\.\d+):?\d{0,5}\/"), null(), match(http_referer, ".*:\/\/\[?([^\-\/]*:[^\-\/\]]*:[^\-\/\]]*)\]?:?\d{0,5}\/.*"), null(), http_referer=="-", null(), match(http_referer, "(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*"), replace(http_referer, "(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*", "\1"), true(), replace(http_referer, ".*:\/\/([^:\/]+\.?[^:\/]+):?\d{0,5}\/.*", "\1"))
EVAL-http_user_agent_length = len(http_user_agent)
EVAL-response_time = if(isnum(response_time), response_time*1000, null())
EVAL-web_server = server . ":" . site
EVAL-src = if(http_x_forwarded_for=="-", src, http_x_forwarded_for)
EVAL-status = if(isnull(status) OR status=="-", null(), status)
EVAL-uri_path = if(isnull(uri_path) OR uri_path=="-", null(), uri_path)
EVAL-uri_query = if(isnull(uri_query) OR uri_query=="-", null(), uri_query)
EVAL-url = if(https=="on", "https", "http")."://".server.":".dest_port.uri_path.if(uri_query=="-", "", "?".uri_query)
EVAL-url_length = len(if(https=="on", "https", "http")."://".server.":".dest_port.uri_path.if(uri_query=="-", "", "?".uri_query))
EVAL-url_domain = case(match(if(https=="on", "https", "http")."://".server.":".dest_port.uri_path.if(uri_query=="-", "", "?".uri_query), "^(\d+\.\d+\.\d+\.\d+):?\d{0,5}\/"), null(), match(if(https=="on", "https", "http")."://".server.":".dest_port.uri_path.if(uri_query=="-", "", "?".uri_query), "^\[?([^\-\/]*:[^\-\/\]]*:[^\-\/\]]*)\]?:?\d{0,5}\/"), null(), match(if(https=="on", "https", "http")."://".server.":".dest_port.uri_path.if(uri_query=="-", "", "?".uri_query), "^(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*"), replace(if(https=="on", "https", "http")."://".server.":".dest_port.uri_path.if(uri_query=="-", "", "?".uri_query), "^(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*", "\1"), true(), replace(if(https=="on", "https", "http")."://".server.":".dest_port.uri_path.if(uri_query=="-", "", "?".uri_query), "^([^:\/]+\.?[^:\/]+):?\d{0,5}\/.*", "\1"))
EVAL-user = if(isnull(user) OR user=="-", null(), user)


# need this for when nginx is configured as a proxy
#LOOKUP-vendor_traffic_action = nginx_proxy_action_lookup vendor_action OUTPUT action, transport

###
# We need this data source for performance metrics planned for web server ITSI model
###
[nginx:plus:api]
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
KV_MODE = JSON
TIME_PREFIX = \"timestamp\"\:
pulldown_type = true
description = NGINX Plus performance metrics
category = Web


FIELDALIAS-ip = nginx.address as ip

FIELDALIAS-status = http.upstreams.appservers.peers{}.state as status
EVAL-app = "Nginx Plus"
EVAL-web_server = ip . ":api"
EVAL-product = "Web Server"
EVAL-vendor = "Nginx Plus"
EVAL-vendor_product = "Nginx Plus Web Server"


###
# Get as much data as we can from default log format (W3C)
###
[nginx:plus:access]
KV_MODE = none
SHOULD_LINEMERGE=false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
NO_BINARY_CHECK=true
CHARSET=UTF-8
TIME_PREFIX=\[
disabled=false
maxDist=28
pulldown_type=true
description = NGINX default access log
category = Web


REPORT-nginx-log-extract = nginx_main_extract
REPORT-nginx_uri_bits = nginx_plus_access_uri_info

FIELDALIAS-nginx_http_method = request_method as http_method
FIELDALIAS-nginx_http_referrer = http_referer as http_referrer
FIELDALIAS-nginx_response_code = response_code as status
FIELDALIAS-nginx_site = ident as site
FIELDALIAS-http_content_type = category as http_content_type
EVAL-bytes = if(isnum(bytes_in),bytes_in,0) + if(isnum(bytes_out),bytes_out,0)
LOOKUP-nginx_httpstatus_lookup = nginx_httpstatus_lookup status OUTPUT status_description status_type status_description AS action
EVAL-url = if(https=="on", "https", "http")."://".dest.":".dest_port.access_request
EVAL-src = if(http_x_forwarded_for=="-", src_ip, http_x_forwarded_for)

EVAL-app = "Nginx"
EVAL-http_user_agent_length = len(http_user_agent)

EVAL-product = "Web Server"
EVAL-vendor = "Nginx"
EVAL-vendor_product = "Nginx Web Server"
EVAL-web_server = dest . ":" . ident

EVAL-url_length = len(if(https=="on", "https", "http")."://".dest.":".dest_port.access_request)
EVAL-url_domain =  case(match(if(https=="on", "https", "http")."://".dest.":".dest_port.access_request, "^(\d+\.\d+\.\d+\.\d+):?\d{0,5}\/"), null(), match(if(https=="on", "https", "http")."://".dest.":".dest_port.access_request, "^\[?([^\-\/]*:[^\-\/\]]*:[^\-\/\]]*)\]?:?\d{0,5}\/"), null(), match(if(https=="on", "https", "http")."://".dest.":".dest_port.access_request, "^(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*"), replace(if(https=="on", "https", "http")."://".dest.":".dest_port.access_request, "^(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*", "\1"), true(), replace(if(https=="on", "https", "http")."://".dest.":".dest_port.access_request, "^([^:\/]+\.?[^:\/]+):?\d{0,5}\/.*", "\1"))
EVAL-http_referrer_domain = case(match(http_referrer, ":\/\/(\d+\.\d+\.\d+\.\d+):?\d{0,5}\/"), null(), match(http_referrer, ".*:\/\/\[?([^\-\/]*:[^\-\/\]]*:[^\-\/\]]*)\]?:?\d{0,5}\/.*"), null(), http_referrer=="-", null(), match(http_referrer, "^(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*"), replace(http_referrer, "^(?:[^:]+:\/\/([^:\/]+\.[^:\/\.]+)):?\d{0,5}\/.*", "\1"), true(), replace(http_referrer, ".*:\/\/([^:\/]+\.?[^:\/]+):?\d{0,5}\/.*", "\1"))

[nginx:plus:error]
NO_BINARY_CHECK = true
category = Web
description = Error logs produced by Nginx Web Server
pulldown_type = true
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true

EVAL-product = "Web Server"
EVAL-vendor = "Nginx"
EVAL-vendor_product = "Nginx Web Server"

[nginx:app:protect]
KV_MODE = auto
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
TIME_PREFIX = date_time
pulldown_type = true
description = NGINX App Protect security log in key-value pair format
category = Intrusion Detection

FIELDALIAS-attack_type = attack_type as category
FIELDALIAS-dest = dest_ip as dest
FIELDALIAS-dvc = dest_ip as dvc
FIELDALIAS-signature = sig_names as signature
FIELDALIAS-src = ip_client as src
FIELDALIAS-user = username as user
FIELDALIAS-vendor_severity = severity as vendor_severity

EVAL-action = if(request_status=="alerted" OR request_status=="passed", "allowed", request_status)
EVAL-severity = if(lower(severity)=="error", "high", severity)
EVAL-ids_type = "network"
EVAL-transport = "tcp"
EVAL-product = "App Protect"
EVAL-vendor = "Nginx"
EVAL-vendor_product = "Nginx App Protect"

[source::.../var/log/splunk/splunk_ta_nginx_nginx_status*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
