var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return(t=c(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,c(r.key),r)}}function c(e){var t=function(e,t){if("object"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===n(t)?t:String(t)}e.d(t,{Z:()=>u});const u=function(){function e(t,n,r,o,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=n,this.state=r,this.mode=o,this.util=i}var t,n;return t=e,(n=[{key:"onCreate",value:function(){}},{key:"onChange",value:function(e,t,n){"blob_checkpoint_enabled"===e&&this.showWarning(n)}},{key:"onRender",value:function(){}},{key:"onSave",value:function(){return!0}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}},{key:"showWarning",value:function(e){var t=this.state.data.blob_checkpoint_enabled.value,n=e.data.blob_checkpoint_enabled.value;"edit"===this.mode&&t!=n&&"0"==n?this.util.setState((function(e){var t=o({},e.data);return t.blob_checkpoint_enabled.markdownMessage={text:"Migrating from Storage Blob Checkpoint to File Based Checkpoint will cause data duplication.",color:"red",markdownType:"text"},{data:t}})):this.util.setState((function(e){var t=o({},e.data);return t.blob_checkpoint_enabled.markdownMessage=null,{data:t}}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();var l=t.Z;export{l as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRfYXp1cmVfZXZlbnRodWIuMS4wLjAuanMiLCJtYXBwaW5ncyI6IkFBQ0EsSUFBSUEsRUFBc0IsQ0NBMUJBLEVBQXdCLENBQUNDLEVBQVNDLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEYsRUFBb0JJLEVBQUVGLEVBQVlDLEtBQVNILEVBQW9CSSxFQUFFSCxFQUFTRSxJQUM1RUUsT0FBT0MsZUFBZUwsRUFBU0UsRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRILEVBQXdCLENBQUNTLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEksbzRDQzRFbEYsUUF0RTRCLFdBZ0J4QixXQUFZSSxFQUFjQyxFQUFhQyxFQUFPQyxFQUFNQyxJLDRGQUFNQyxDQUFBQSxLQUFBQSxHQUN0REMsS0FBS04sYUFBZUEsRUFDcEJNLEtBQUtMLFlBQWNBLEVBQ25CSyxLQUFLSixNQUFRQSxFQUNiSSxLQUFLSCxLQUFPQSxFQUNaRyxLQUFLRixLQUFPQSxDQUNoQixDLFFBNkNDLE8sRUE1Q0RHLEcsRUFBQUEsQ0FBQUEsQ0FBQWxCLElBQUFBLFdBQUFtQixNQUNBLFdBQ0EsR0FBQyxDQUFBbkIsSUFBQUEsV0FBQW1CLE1BRUQsU0FBU0MsRUFBT0QsRUFBT0UsR0FDTCw0QkFBVkQsR0FDQUgsS0FBS0ssWUFBWUQsRUFFekIsR0FDQSxDQUFBckIsSUFBQUEsV0FBQW1CLE1BQ0EsV0FDQSxHQUFDLENBQUFuQixJQUFBQSxTQUFBbUIsTUFFRCxXQUNJLE9BQU8sQ0FDWCxHQUFDLENBQUFuQixJQUFBQSxnQkFBQW1CLE1BRUQsV0FDQSxHQUNBLENBQUFuQixJQUFBQSxhQUFBbUIsTUFDQSxXQUNBLEdBQUMsQ0FBQW5CLElBQUFBLGNBQUFtQixNQUVELFNBQVlFLEdBQ1IsSUFBTUUsRUFBMkJOLEtBQUtKLE1BQU1XLEtBQUtDLHdCQUF3Qk4sTUFDbkVPLEVBQTJCTCxFQUFTRyxLQUFLQyx3QkFBd0JOLE1BQ3JELFNBQWRGLEtBQUtILE1BQW1CUyxHQUE0QkcsR0FBd0QsS0FBNUJBLEVBQ2hGVCxLQUFLRixLQUFLWSxVQUFTLFNBQUNDLEdBQ2hCLElBQUlKLEVBQU8sRUFBSCxHQUFRSSxFQUFVSixNQU0xQixPQUxBQSxFQUFLQyx3QkFBd0JJLGdCQUFrQixDQUM3Q0MsS0FBTSwrRkFDTkMsTUFBTyxNQUNQQyxhQUFjLFFBRVQsQ0FBRVIsS0FBQUEsRUFDYixJQUdBUCxLQUFLRixLQUFLWSxVQUFTLFNBQUNDLEdBQ2hCLElBQUlKLEVBQU8sRUFBSCxHQUFRSSxFQUFVSixNQUUxQixPQURBQSxFQUFLQyx3QkFBd0JJLGdCQUFrQixLQUN4QyxDQUFFTCxLQUFBQSxFQUNiLEdBRVIsTSxvRUFBQyxFQW5FdUIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL1NwbHVua19UQV9taWNyb3NvZnQtY2xvdWRzZXJ2aWNlcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL1NwbHVua19UQV9taWNyb3NvZnQtY2xvdWRzZXJ2aWNlcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL1NwbHVua19UQV9taWNyb3NvZnQtY2xvdWRzZXJ2aWNlcy8uL2pzL2lucHV0X2F6dXJlX2V2ZW50aHViLjEuMC4wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjEgU3BsdW5rLCBJbmMuIDxzYWxlc0BzcGx1bmsuY29tPlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExpY2Vuc2VSZWYtU3BsdW5rLTgtMjAyMVxuICpcbiAqL1xuXG5jbGFzcyBJbnB1dEF6dXJlRXZlbnRIdWJIb29rIHtcbiAgICAvKipcbiAgICAqIEZvcm0gSW5wdXRBenVyZUV2ZW50SHViSG9vayAoQXp1cmUgRXZlbnQgSHViIElucHV0KVxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZ2xvYmFsQ29uZmlnIC0gR2xvYmFsIGNvbmZpZ3VyYXRpb24uXG4gICAgKiBAcGFyYW0ge29iamVjdH0gc2VydmljZU5hbWUgLSBTZXJ2aWNlIG5hbWVcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIEluaXRpYWwgc3RhdGUgb2YgdGhlIGZvcm1cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIC0gZWRpdCxjcmVhdGUgb3IgY2xvbmVcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSB1dGlsIC0gT2JqZWN0IGNvbnRhaW5pbmcgdXRpbGl0eSBtZXRob2RzXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZSxcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvck1zZyxcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvckZpZWxkTXNnLFxuICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyQWxsRXJyb3JNc2dcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICovXG4gICAgY29uc3RydWN0b3IoZ2xvYmFsQ29uZmlnLCBzZXJ2aWNlTmFtZSwgc3RhdGUsIG1vZGUsIHV0aWwpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxDb25maWcgPSBnbG9iYWxDb25maWc7XG4gICAgICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICB0aGlzLnV0aWwgPSB1dGlsO1xuICAgIH1cbiAgICAvKiBPbiBDcmVhdGUgRXZlbnQgSGFuZGxpbmcgY29udHJvbCAqL1xuICAgIG9uQ3JlYXRlKCkge1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKGZpZWxkLCB2YWx1ZSwgZGF0YURpY3QpIHtcbiAgICAgICAgaWYgKGZpZWxkID09PSBcImJsb2JfY2hlY2twb2ludF9lbmFibGVkXCIpe1xuICAgICAgICAgICAgdGhpcy5zaG93V2FybmluZyhkYXRhRGljdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogT24gUmVuZGVyIEV2ZW50IEhhbmRsaW5nIGNvbnRyb2wgKi9cbiAgICBvblJlbmRlcigpIHtcbiAgICB9XG5cbiAgICBvblNhdmUoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIG9uU2F2ZVN1Y2Nlc3MoKSB7XG4gICAgfVxuICAgIC8qIEFjdGlvbiBuZWVkcyB0byBwZXJmb3JtIG9uIHNhdmUgZmFpbHVyZSAqL1xuICAgIG9uU2F2ZUZhaWwoKSB7XG4gICAgfVxuXG4gICAgc2hvd1dhcm5pbmcoZGF0YURpY3Qpe1xuICAgICAgICBjb25zdCBvbGRCbG9iQ2hlY2twb2ludEVuYWJsZWQgPSB0aGlzLnN0YXRlLmRhdGEuYmxvYl9jaGVja3BvaW50X2VuYWJsZWQudmFsdWVcbiAgICAgICAgY29uc3QgbmV3QmxvYkNoZWNrcG9pbnRFbmFibGVkID0gZGF0YURpY3QuZGF0YS5ibG9iX2NoZWNrcG9pbnRfZW5hYmxlZC52YWx1ZVxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBcImVkaXRcIiAmJiBvbGRCbG9iQ2hlY2twb2ludEVuYWJsZWQgIT0gbmV3QmxvYkNoZWNrcG9pbnRFbmFibGVkICYmIG5ld0Jsb2JDaGVja3BvaW50RW5hYmxlZCA9PSBcIjBcIil7XG4gICAgICAgICAgICB0aGlzLnV0aWwuc2V0U3RhdGUoKHByZXZTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0geyAuLi5wcmV2U3RhdGUuZGF0YSB9XG4gICAgICAgICAgICAgICAgZGF0YS5ibG9iX2NoZWNrcG9pbnRfZW5hYmxlZC5tYXJrZG93bk1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiAnTWlncmF0aW5nIGZyb20gU3RvcmFnZSBCbG9iIENoZWNrcG9pbnQgdG8gRmlsZSBCYXNlZCBDaGVja3BvaW50IHdpbGwgY2F1c2UgZGF0YSBkdXBsaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZWQnLFxuICAgICAgICAgICAgICAgICAgbWFya2Rvd25UeXBlOiAndGV4dCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51dGlsLnNldFN0YXRlKChwcmV2U3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHsgLi4ucHJldlN0YXRlLmRhdGEgfVxuICAgICAgICAgICAgICAgIGRhdGEuYmxvYl9jaGVja3BvaW50X2VuYWJsZWQubWFya2Rvd25NZXNzYWdlID0gbnVsbFxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRBenVyZUV2ZW50SHViSG9vaztcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdsb2JhbENvbmZpZyIsInNlcnZpY2VOYW1lIiwic3RhdGUiLCJtb2RlIiwidXRpbCIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJfY3JlYXRlQ2xhc3MiLCJ2YWx1ZSIsImZpZWxkIiwiZGF0YURpY3QiLCJzaG93V2FybmluZyIsIm9sZEJsb2JDaGVja3BvaW50RW5hYmxlZCIsImRhdGEiLCJibG9iX2NoZWNrcG9pbnRfZW5hYmxlZCIsIm5ld0Jsb2JDaGVja3BvaW50RW5hYmxlZCIsInNldFN0YXRlIiwicHJldlN0YXRlIiwibWFya2Rvd25NZXNzYWdlIiwidGV4dCIsImNvbG9yIiwibWFya2Rvd25UeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==