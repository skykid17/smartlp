var t={d:(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==r(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var n=o.call(t,"string");if("object"!==r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===r(i)?i:String(i)),n)}var i}t.d(e,{Z:()=>n});const n=function(){function t(e,r,o,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.globalConfig=e,this.serviceName=r,this.el=o,this.row=n}var e,r;return e=t,(r=[{key:"getDLRows",value:function(){var t="collection_interval"in this.row&&"interval"in this.row,e="mscs_storage_blob"==this.serviceName||"mscs_storage_table"==this.serviceName;return t&&e&&delete this.row.interval,this.row}}])&&o(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();var i=e.Z;export{i as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tSW5wdXRSb3cuanMiLCJtYXBwaW5ncyI6IkFBQ0EsSUFBSUEsRUFBc0IsQ0NBMUJBLEVBQXdCLENBQUNDLEVBQVNDLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEYsRUFBb0JJLEVBQUVGLEVBQVlDLEtBQVNILEVBQW9CSSxFQUFFSCxFQUFTRSxJQUM1RUUsT0FBT0MsZUFBZUwsRUFBU0UsRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRILEVBQXdCLENBQUNTLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEkseXJCQ2lDbEYsUUE1Qm9CLFdBVWhCLFdBQVlJLEVBQWNDLEVBQWFDLEVBQUlDLEksNEZBQUtDLENBQUFBLEtBQUFBLEdBQzVDQyxLQUFLTCxhQUFlQSxFQUNwQkssS0FBS0osWUFBY0EsRUFDbkJJLEtBQUtILEdBQUtBLEVBQ1ZHLEtBQUtGLElBQU1BLENBQ2YsQyxRQVNDLE8sRUFUQUcsRyxFQUFBQSxDQUFBQSxDQUFBakIsSUFBQUEsWUFBQWtCLE1BRUQsV0FDSSxJQUFNQyxFQUF1Qix3QkFBeUJILEtBQUtGLEtBQU8sYUFBY0UsS0FBS0YsSUFDL0VNLEVBQXFDLHFCQUFwQkosS0FBS0osYUFBMEQsc0JBQXBCSSxLQUFLSixZQUl2RSxPQUhHTyxHQUF3QkMsVUFDaEJKLEtBQUtGLElBQWMsU0FFdkJFLEtBQUtGLEdBQ2hCLE0sb0VBQUMsRUF4QmUsRyIsInNvdXJjZXMiOlsid2VicGFjazovL1NwbHVua19UQV9taWNyb3NvZnQtY2xvdWRzZXJ2aWNlcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL1NwbHVua19UQV9taWNyb3NvZnQtY2xvdWRzZXJ2aWNlcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL1NwbHVua19UQV9taWNyb3NvZnQtY2xvdWRzZXJ2aWNlcy8uL2pzL0N1c3RvbUlucHV0Um93LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjEgU3BsdW5rLCBJbmMuIDxzYWxlc0BzcGx1bmsuY29tPlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExpY2Vuc2VSZWYtU3BsdW5rLTgtMjAyMVxuICpcbiAqL1xuY2xhc3MgQ3VzdG9tSW5wdXRSb3cge1xuICAgIC8qKlxuICAgICAqIEN1c3RvbSBSb3cgQ2VsbFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBnbG9iYWxDb25maWcgLSBHbG9iYWwgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZU5hbWUgLSBJbnB1dCBzZXJ2aWNlIG5hbWUuXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IG9mIHRoZSBjdXN0b20gY2VsbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcm93IC0gY3VzdG9tIHJvdyBvYmplY3QsXG4gICAgICogICAgIHVzZSB0aGlzLnJvdy48ZmllbGRfbmFtZT4sIHdoZXJlIDxmaWVsZF9uYW1lPiBpcyBhIGZpZWxkIG5hbWVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnbG9iYWxDb25maWcsIHNlcnZpY2VOYW1lLCBlbCwgcm93KSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsQ29uZmlnID0gZ2xvYmFsQ29uZmlnO1xuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5yb3cgPSByb3c7XG4gICAgfVxuXG4gICAgZ2V0RExSb3dzKCkge1xuICAgICAgICBjb25zdCBoYXNUd29JbnRlcnZhbEZpZWxkcyA9IFwiY29sbGVjdGlvbl9pbnRlcnZhbFwiIGluIHRoaXMucm93ICYmIFwiaW50ZXJ2YWxcIiBpbiB0aGlzLnJvdztcbiAgICAgICAgY29uc3QgaXNTdG9yYWdlSW5wdXQgPSB0aGlzLnNlcnZpY2VOYW1lID09IFwibXNjc19zdG9yYWdlX2Jsb2JcIiB8fCB0aGlzLnNlcnZpY2VOYW1lID09IFwibXNjc19zdG9yYWdlX3RhYmxlXCI7XG4gICAgICAgIGlmKGhhc1R3b0ludGVydmFsRmllbGRzICYmIGlzU3RvcmFnZUlucHV0KXtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJvd1tcImludGVydmFsXCJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJvdztcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tSW5wdXRSb3c7XG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJnbG9iYWxDb25maWciLCJzZXJ2aWNlTmFtZSIsImVsIiwicm93IiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9jcmVhdGVDbGFzcyIsInZhbHVlIiwiaGFzVHdvSW50ZXJ2YWxGaWVsZHMiLCJpc1N0b3JhZ2VJbnB1dCJdLCJzb3VyY2VSb290IjoiIn0=