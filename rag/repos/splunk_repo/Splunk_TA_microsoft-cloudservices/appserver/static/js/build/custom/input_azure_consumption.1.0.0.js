var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e,r){return(e=u(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,u(n.key),n)}}function u(t){var e=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!==r(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===r(e)?e:String(e)}t.d(e,{Z:()=>s});var c={mscs_azure_consumption:{"Reservation Recommendation":"mscs:consumption:reservation:recommendation","Usage Details":"mscs:consumption:billing"}};const s=function(){function t(e,r,n,a,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.globalConfig=e,this.serviceName=r,this.state=n,this.mode=a,this.util=o,this.sourcetype=c[r]}var e,r;return e=t,(r=[{key:"onCreate",value:function(){if("create"===this.mode){var t=new Date;t.setDate(t.getDate()-90),this.util.setState((function(e){var r=a({},e.data);return"Usage Details"===r.data_type.value&&(r.start_date.value=t.toISOString().substring(0,10)),{data:r}}))}}},{key:"onChange",value:function(t,e,r){}},{key:"onRender",value:function(){"edit"===this.mode&&("Usage Details"===this.state.data.data_type.value?this.util.setState((function(t){var e=a({},t.data);return e.data_type.disabled=!0,e.start_date.disabled=!0,{data:e}})):"Reservation Recommendation"===this.state.data.data_type.value&&this.util.setState((function(t){var e=a({},t.data);return e.data_type.disabled=!0,{data:e}})))}},{key:"onSave",value:function(t){return!0}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}}])&&i(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();var l=e.Z;export{l as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRfYXp1cmVfY29uc3VtcHRpb24uMS4wLjAuanMiLCJtYXBwaW5ncyI6IkFBQ0EsSUFBSUEsRUFBc0IsQ0NBMUJBLEVBQXdCLENBQUNDLEVBQVNDLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEYsRUFBb0JJLEVBQUVGLEVBQVlDLEtBQVNILEVBQW9CSSxFQUFFSCxFQUFTRSxJQUM1RUUsT0FBT0MsZUFBZUwsRUFBU0UsRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRILEVBQXdCLENBQUNTLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEksbzRDQ0tsRixJQUFNSSxFQUE4QixDQUNsQ0MsdUJBQXdCLENBQUUsNkJBQThCLDhDQUErQyxnQkFBaUIsNkJBOEUxSCxRQTVFK0IsV0FnQjdCLFdBQWFDLEVBQWNDLEVBQWFDLEVBQU9DLEVBQU1DLEksNEZBQU1DLENBQUFBLEtBQUFBLEdBQ3pEQyxLQUFLTixhQUFlQSxFQUNwQk0sS0FBS0wsWUFBY0EsRUFDbkJLLEtBQUtKLE1BQVFBLEVBQ2JJLEtBQUtILEtBQU9BLEVBQ1pHLEtBQUtGLEtBQU9BLEVBQ1pFLEtBQUtDLFdBQWFULEVBQTRCRyxFQUNoRCxDLFFBaURDLE8sRUEvQ0RPLEcsRUFBQUEsQ0FBQUEsQ0FBQXJCLElBQUFBLFdBQUFzQixNQUNBLFdBQ0UsR0FBa0IsV0FBZEgsS0FBS0gsS0FBbUIsQ0FDMUIsSUFBTU8sRUFBYyxJQUFJQyxLQUN4QkQsRUFBWUUsUUFBUUYsRUFBWUcsVUFBWSxJQUM1Q1AsS0FBS0YsS0FBS1UsVUFBUyxTQUFDQyxHQUNsQixJQUFNQyxFQUFPLEVBQUgsR0FBUUQsRUFBVUMsTUFJNUIsTUFINkIsa0JBQXpCQSxFQUFLQyxVQUFVUixRQUNqQk8sRUFBS0UsV0FBV1QsTUFBUUMsRUFBWVMsY0FBY0MsVUFBVSxFQUFHLEtBRTFELENBQUVKLEtBQUFBLEVBQ1gsR0FDRixDQUNGLEdBQUMsQ0FBQTdCLElBQUFBLFdBQUFzQixNQUVELFNBQVVZLEVBQU9aLEVBQU9hLEdBQ3hCLEdBRUEsQ0FBQW5DLElBQUFBLFdBQUFzQixNQUNBLFdBQ29CLFNBQWRILEtBQUtILE9BQ2lDLGtCQUFwQ0csS0FBS0osTUFBTWMsS0FBS0MsVUFBVVIsTUFDNUJILEtBQUtGLEtBQUtVLFVBQVMsU0FBQ0MsR0FDbEIsSUFBTUMsRUFBTyxFQUFILEdBQVFELEVBQVVDLE1BRzVCLE9BRkFBLEVBQUtDLFVBQVVNLFVBQVcsRUFDMUJQLEVBQUtFLFdBQVdLLFVBQVcsRUFDcEIsQ0FBRVAsS0FBQUEsRUFDWCxJQUM2QywrQkFBcENWLEtBQUtKLE1BQU1jLEtBQUtDLFVBQVVSLE9BQ25DSCxLQUFLRixLQUFLVSxVQUFTLFNBQUNDLEdBQ2xCLElBQU1DLEVBQU8sRUFBSCxHQUFRRCxFQUFVQyxNQUU1QixPQURBQSxFQUFLQyxVQUFVTSxVQUFXLEVBQ25CLENBQUVQLEtBQUFBLEVBQ1gsSUFHTixHQUFDLENBQUE3QixJQUFBQSxTQUFBc0IsTUFFRCxTQUFRYSxHQUNOLE9BQU8sQ0FDVCxHQUFDLENBQUFuQyxJQUFBQSxnQkFBQXNCLE1BRUQsV0FDQSxHQUVBLENBQUF0QixJQUFBQSxhQUFBc0IsTUFDQSxXQUNBLE0sb0VBQUMsRUF4RTRCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX21pY3Jvc29mdC1jbG91ZHNlcnZpY2VzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvLi9qcy9pbnB1dF9henVyZV9jb25zdW1wdGlvbi4xLjAuMC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIxIFNwbHVuaywgSW5jLiA8c2FsZXNAc3BsdW5rLmNvbT5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMaWNlbnNlUmVmLVNwbHVuay04LTIwMjFcbiAqXG4gKi9cbmNvbnN0IEF6dXJlQ29uc3VtcHRpb25Tb3VyY2V0eXBlcyA9IHtcbiAgbXNjc19henVyZV9jb25zdW1wdGlvbjogeyAnUmVzZXJ2YXRpb24gUmVjb21tZW5kYXRpb24nOiAnbXNjczpjb25zdW1wdGlvbjpyZXNlcnZhdGlvbjpyZWNvbW1lbmRhdGlvbicsICdVc2FnZSBEZXRhaWxzJzogJ21zY3M6Y29uc3VtcHRpb246YmlsbGluZycgfVxufVxuY2xhc3MgSW5wdXRBenVyZUNvbnN1bXB0aW9uSG9vayB7XG4gIC8qKlxuICAgICogRm9ybSBJbnB1dEF6dXJlQ29uc3VtcHRpb25Ib29rIChBenVyZSBDb25zdW1wdGlvbihCaWxsaW5nKSBJbnB1dClcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICogQHBhcmFtIHtPYmplY3R9IGdsb2JhbENvbmZpZyAtIEdsb2JhbCBjb25maWd1cmF0aW9uLlxuICAgICogQHBhcmFtIHtvYmplY3R9IHNlcnZpY2VOYW1lIC0gU2VydmljZSBuYW1lXG4gICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBJbml0aWFsIHN0YXRlIG9mIHRoZSBmb3JtXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAtIGVkaXQsY3JlYXRlIG9yIGNsb25lXG4gICAgKiBAcGFyYW0ge29iamVjdH0gdXRpbCAtIE9iamVjdCBjb250YWluaW5nIHV0aWxpdHkgbWV0aG9kc1xuICAgICogICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U3RhdGUsXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3JNc2csXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3JGaWVsZE1zZyxcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckFsbEVycm9yTXNnXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAqL1xuICBjb25zdHJ1Y3RvciAoZ2xvYmFsQ29uZmlnLCBzZXJ2aWNlTmFtZSwgc3RhdGUsIG1vZGUsIHV0aWwpIHtcbiAgICB0aGlzLmdsb2JhbENvbmZpZyA9IGdsb2JhbENvbmZpZ1xuICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZVxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZVxuICAgIHRoaXMubW9kZSA9IG1vZGVcbiAgICB0aGlzLnV0aWwgPSB1dGlsXG4gICAgdGhpcy5zb3VyY2V0eXBlID0gQXp1cmVDb25zdW1wdGlvblNvdXJjZXR5cGVzW3NlcnZpY2VOYW1lXVxuICB9XG5cbiAgLyogT24gQ3JlYXRlIEV2ZW50IEhhbmRsaW5nIGNvbnRyb2wgKi9cbiAgb25DcmVhdGUgKCkge1xuICAgIGlmICh0aGlzLm1vZGUgPT09ICdjcmVhdGUnKSB7XG4gICAgICBjb25zdCBkZWZhdWx0RGF0ZSA9IG5ldyBEYXRlKClcbiAgICAgIGRlZmF1bHREYXRlLnNldERhdGUoZGVmYXVsdERhdGUuZ2V0RGF0ZSgpIC0gOTApXG4gICAgICB0aGlzLnV0aWwuc2V0U3RhdGUoKHByZXZTdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0geyAuLi5wcmV2U3RhdGUuZGF0YSB9XG4gICAgICAgIGlmIChkYXRhLmRhdGFfdHlwZS52YWx1ZSA9PT0gJ1VzYWdlIERldGFpbHMnKSB7XG4gICAgICAgICAgZGF0YS5zdGFydF9kYXRlLnZhbHVlID0gZGVmYXVsdERhdGUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZGF0YSB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIG9uQ2hhbmdlIChmaWVsZCwgdmFsdWUsIGRhdGFEaWN0KSB7XG4gIH1cblxuICAvKiBPbiBSZW5kZXIgRXZlbnQgSGFuZGxpbmcgY29udHJvbCAqL1xuICBvblJlbmRlciAoKSB7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gJ2VkaXQnKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5kYXRhLmRhdGFfdHlwZS52YWx1ZSA9PT0gJ1VzYWdlIERldGFpbHMnKSB7XG4gICAgICAgIHRoaXMudXRpbC5zZXRTdGF0ZSgocHJldlN0YXRlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHsgLi4ucHJldlN0YXRlLmRhdGEgfVxuICAgICAgICAgIGRhdGEuZGF0YV90eXBlLmRpc2FibGVkID0gdHJ1ZVxuICAgICAgICAgIGRhdGEuc3RhcnRfZGF0ZS5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICByZXR1cm4geyBkYXRhIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5kYXRhLmRhdGFfdHlwZS52YWx1ZSA9PT0gJ1Jlc2VydmF0aW9uIFJlY29tbWVuZGF0aW9uJykge1xuICAgICAgICB0aGlzLnV0aWwuc2V0U3RhdGUoKHByZXZTdGF0ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSB7IC4uLnByZXZTdGF0ZS5kYXRhIH1cbiAgICAgICAgICBkYXRhLmRhdGFfdHlwZS5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICByZXR1cm4geyBkYXRhIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvblNhdmUgKGRhdGFEaWN0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBvblNhdmVTdWNjZXNzICgpIHtcbiAgfVxuXG4gIC8qIEFjdGlvbiBuZWVkcyB0byBwZXJmb3JtIG9uIHNhdmUgZmFpbHVyZSAqL1xuICBvblNhdmVGYWlsICgpIHtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IElucHV0QXp1cmVDb25zdW1wdGlvbkhvb2tcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIkF6dXJlQ29uc3VtcHRpb25Tb3VyY2V0eXBlcyIsIm1zY3NfYXp1cmVfY29uc3VtcHRpb24iLCJnbG9iYWxDb25maWciLCJzZXJ2aWNlTmFtZSIsInN0YXRlIiwibW9kZSIsInV0aWwiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwic291cmNldHlwZSIsIl9jcmVhdGVDbGFzcyIsInZhbHVlIiwiZGVmYXVsdERhdGUiLCJEYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJzZXRTdGF0ZSIsInByZXZTdGF0ZSIsImRhdGEiLCJkYXRhX3R5cGUiLCJzdGFydF9kYXRlIiwidG9JU09TdHJpbmciLCJzdWJzdHJpbmciLCJmaWVsZCIsImRhdGFEaWN0IiwiZGlzYWJsZWQiXSwic291cmNlUm9vdCI6IiJ9