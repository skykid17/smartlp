##
## SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##
[source::...splunk_ta_microsoft-cloudservices_ucc_server.log]
sourcetype = ms:o365:jobinsight:forwarder
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

REPORT-o365_forwarder_name = o365_forwarder_name

REPORT-o365_cred_exception = o365_cred_exception

REPORT-o365_forwarder_rest_error = o365_forwarder_rest_error

FIELDALIAS-o365_raw_forwarder_detail = _raw as detail

EVAL-forwarder_status = case(raw_forwarder_status=="success","valid", raw_forwarder_status=="error","invalid")

EVAL-o365_error_code=case(cred_exception=="Get session key failed.","FWDS001", cred_exception=="Invalid username or password.","FWDS002", raw_forwarder_status=="error" and isnull(o365_error_code), "FWDS999", 1==1, o365_error_code)

EVAL-xml_error_msg = mvjoin(spath(xml_error_info, "response.messages.msg"), ", ")

EVAL-Problem Detail = if(isnull(xml_error_info), null, mvjoin(spath(xml_error_info, "response.messages.msg"), ", "))

LOOKUP-o365_troubleshooting_error_code_lookup = o365_troubleshooting_error_code_lookup o365_error_code OUTPUTNEW Problem,"Problem Detail","Possible Reason",Proposal

[source::...splunk_ta_microsoft-cloudservices_account_monitoring.log]
sourcetype = ms:o365:jobinsight:account
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

REPORT-o365_valid_account = o365_valid_account

REPORT-o365_invalid_account = o365_invalid_account

REPORT-0365_account_microsoft_error_code = 0365_account_microsoft_error_code

REPORT-o365_account_subscription_success = o365_account_subscription_success

REPORT-o365_account_subscription_fail_list_content_type = o365_account_subscription_fail_list_content_type

REPORT-o365_account_subscription_fail_list_api = o365_account_subscription_fail_list_api

REPORT-o365_account_subscription_fail_start_api = o365_account_subscription_fail_start_api

REPORT-o365_connect_refused = o365_connect_refused

REPORT-o365_time_out = o365_time_out

REPORT-o365_server_not_found = o365_server_not_found

REPORT-o365_server_proxy_auth_fail = o365_server_proxy_auth_fail

REPORT-o365_input_api_error = o365_input_api_error

REPORT-o365_input_wrong_access_token = o365_input_wrong_access_token

EVAL-proxy_enabled = if(proxy_enabled == 1 OR proxy_enabled=="true" OR proxy_enabled== "True" OR proxy_enabled == "TRUE", 1, 0)

EVAL-fail_content_type = split(fail_content_type," ")

EVAL-o365_error_code = if(subscription_type=="list" and o365_error_code=="ACTC001","ACTC002", if(serverNotFound == "ServerNotFoundError", "NETB002", o365_error_code) )

EVAL-serverNotFound = if(serverNotFound == "ServerNotFoundError", "yes", serverNotFound)

FIELDALIAS-o365_account_raw_detail = _raw as detail

LOOKUP-o365_troubleshooting_error_code_lookup = o365_troubleshooting_error_code_lookup o365_error_code OUTPUT Problem,"Problem Detail","Possible Reason",Proposal

LOOKUP-o365_troubleshooting_microsoft_error_code_lookup = o365_troubleshooting_microsoft_error_code_lookup microsoft_error_code OUTPUT o365_error_code,Problem,"Problem Detail","Possible Reason",Proposal

[source::...splunk_ta_microsoft-cloudservices_management.log]
sourcetype = ms:o365:jobinsight:input
SHOULD_LINEMERGE = true
TRUNCATE=0
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=


REPORT-o365_input_wrong_access_token = o365_input_wrong_access_token

REPORT-o365_input_request_exception = o365_request_exception

REPORT-o365_input_time_out = o365_time_out

REPORT-o365_input_server_not_found_client = o365_server_not_found

REPORT-o365_input_connect_refused = o365_connect_refused

REPORT-o365_server_proxy_auth_fail = o365_server_proxy_auth_fail

REPORT-o365_input_api_error = o365_input_api_error

REPORT-o365_decode_input_name = o365_decode_input_name

REPORT-o365_decode_account_name = o365_decode_account_name

EVAL-proxy_enabled = if(proxy_enabled == 1 OR proxy_enabled=="true" OR proxy_enabled== "True" OR proxy_enabled == "TRUE", 1, 0)

EVAL-Problem Detail = if(isnotnull(o365_api_error_json),"error code=" + spath(o365_api_error_json, "error.code") + " message=" + spath(o365_api_error_json, "error.message"), null)

EVAL-serverNotFound = if(serverNotFound == "ServerNotFoundError", "yes", serverNotFound)

EVAL-input_status = case(match(_raw, "Successfully indexed events"), "success", request_error == "Failed to get msg from", "fail", 1==1, input_status)

EVAL-o365_error_code = if(serverNotFound == "ServerNotFoundError", "NETB002", o365_error_code)

EVAL-request_error = if(request_error == "Failed to get msg from", "yes", request_error)

FIELDALIAS-o365_input_raw_detail = _raw as detail

LOOKUP-o365_troubleshooting_error_code_lookup = o365_troubleshooting_error_code_lookup o365_error_code OUTPUTNEW Problem,"Problem Detail","Possible Reason",Proposal


[ms:o365:management]
TIME_PREFIX = \"CreationTime\":\s*\"|\"StatusTime\":\s*\"|\"LastUpdatedTime\":\s*\"
MAX_TIMESTAMP_LOOKAHEAD = 35
KV_MODE=json
TZ = UTC
pulldown_type = true
category = Application
description = "Microsoft Cloud Services"

FIELDALIAS-Client = Client as app

FIELDALIAS-ClientIP = ClientIP as src_ip

FIELDALIAS-ObjectId = ObjectId as object_id, ObjectId as dest

FIELDALIAS-dvc = Workload as dvc

FIELDALIAS-SourceFileName = SourceFileName as file_name

FIELDALIAS-SourceRelativeUrl = SourceRelativeUrl as file_path

FIELDALIAS-src = ClientIP as src

FIELDALIAS-UserId = UserId as user, UserId as src_user

EVAL-object_path = case(ObjectId!="Not Available", ObjectId)
EVAL-object = if(isnull(SourceFileName),ObjectId,SourceFileName)

EVAL-request_type = case(match(source, "ServiceComms/Messages"), "operational_messages", \
        match(source, "ServiceComms/HistoricalStatus"), "historical_status", \
        match(source, "ServiceComms/CurrentStatus"), "current_status", \
        match(source, "activity/feed/Audit"), "audit_" + Workload)

EVAL-result = if(isnull(ResultStatus),"success",ResultStatus)

EVAL-vendor_product = "Microsoft Cloud Services:".Workload

LOOKUP-o365_model_lookup = o365_model_lookup Operation,ResultStatus OUTPUTNEW model_type, model_type as o365_audit_model_type, action, change_type, object_category
LOOKUP-o365_model_operation_only_lookup = o365_model_operation_only_lookup Operation OUTPUTNEW model_type, model_type as o365_audit_model_type, action, change_type, object_category

LOOKUP-o365_status_lookup = o365_status_lookup ResultStatus OUTPUT status

[mscs:resource:virtualMachine]
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id
KV_MODE = json

# Enterprise Security Assets Framework Interface

## Field Aliases

FIELDALIAS-mscs-vm-asset_category = tags as category
FIELDALIAS-mscs_vm_asset_instance_type = properties.hardwareProfile.vmSize as instance_type
FIELDALIAS-mscs-vm-asset_network_interface_id = properties.networkProfile.networkInterfaces{}.id as network_interface_id
FIELDALIAS-mscs_vm_asset_nt_host = id AS nt_host
FIELDALIAS-mscs_vm_asset_vendor_region = location as vendor_region

## Calculated fields

# Calculated field for image_name Asset lookup mapping, example: UbuntuServer 18.04-LTS latest
EVAL-image_name = 'properties.storageProfile.imageReference.offer'." ".'properties.storageProfile.imageReference.sku'." ".'properties.storageProfile.imageReference.version'
# ITSI Fields: https://docs.splunk.com/Documentation/ITSICSM/2.4.0/ITSICSM/AbouttheSplunkITSIModuleforCloudServices

REPORT-mscs_vm_account_id = mscs_vm_account_id
REPORT-mscs_vm_power_state = mscs_vm_power_state
FIELDALIAS-mscs_custom_tag = tags{} AS custom_tag
FIELDALIAS-mscs_region = location AS region
FIELDALIAS-mscs_vm_id= id AS vm_id
FIELDALIAS-mscs_vm_name = name AS vm_name
FIELDALIAS-mscs_vm_os = properties.storageProfile.osDisk.osType AS vm_os
FIELDALIAS-mscs_vm_size = properties.hardwareProfile.vmSize AS vm_size
EVAL-vendor="Microsoft Corporation"
EVAL-vendor_product="Microsoft Azure Virtual Machine"

LOOKUP-mscs_vm_cpu_mem_storage_lookup = mscs_vm_cpu_mem_storage_lookup vm_size OUTPUT cpu_cores mem_capacity storage_capacity
LOOKUP-mscs_vm_ip_lookup = mscs_vm_ip_lookup vm_id OUTPUT public_ip AS ip private_ip AS ip
LOOKUP-mscs_vm_power_state_lookup = mscs_vm_power_state_lookup power_state_tmp OUTPUT power_state

[mscs:resource:networkInterfaceCard]
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id
KV_MODE = json

# Common Mapping

FIELDALIAS-mscs_networkinterface_ip = properties.ipConfigurations{}.properties.privateIPAddress as ip
FIELDALIAS-mscs_interface = name AS interface
REPORT-mscs_interface_dest = mscs_interface_dest
EVAL-vendor = "Microsoft"
EVAL-product = "Azure"
EVAL-vendor_product = "Microsoft Azure"

# Enterprise Security Assets Framework Interface

FIELDALIAS-mscs_networkinterface_asset_dns = properties.dnsSettings.internalDomainNameSuffix as dns
FIELDALIAS-mscs_networkinterface_asset_mac = properties.macAddress as mac
FIELDALIAS-mscs_networkinterface_asset_security_group_id = properties.networkSecurityGroup.id as security_group_id
FIELDALIAS-mscs_networkinterface_asset_subnet_id = properties.ipConfigurations{}.properties.subnet.id as subnet_id

# ITSI Fields: https://docs.splunk.com/Documentation/ITSICSM/2.4.0/ITSICSM/AbouttheSplunkITSIModuleforCloudServices

REPORT-mscs_virtual_network_id = mscs_virtual_network_id
FIELDALIAS-mscs_virtual_subnet_id = properties.ipConfigurations{}.properties.subnet.id AS virtual_subnet_id
FIELDALIAS-mscs_vm_id = properties.virtualMachine.id AS vm_id
FIELDALIAS-mscs_region = location AS region

[mscs:resource:publicIPAddress]
KV_MODE = json
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id

FIELDALIAS-mscs_region = location AS region

[mscs:resource:virtualNetwork]
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id
KV_MODE = json

# Enterprise Security Assets Framework Interface

FIELDALIAS-mscs_virtualnetwork_vpc_id = id as vpc_id

# ITSI Fields: https://docs.splunk.com/Documentation/ITSICSM/2.4.0/ITSICSM/AbouttheSplunkITSIModuleforCloudServices

FIELDALIAS-mscs_region = location AS region

[mscs:azure:audit]
KV_MODE = json
TIME_PREFIX = "eventTimestamp":\s*"
REPORT-mscs_audit_change_object = mscs_audit_change_object, mscs_audit_change_object2, mscs_audit_change_object3
REPORT-mscs_audit_change_status = mscs_audit_change_status
REPORT-mscs_audit_alert = mscs_audit_alert_cim_fields
FIELDALIAS-result = properties.statusCode AS result
FIELDALIAS-src = httpRequest.clientIpAddress AS src
FIELDALIAS-user = claims.name AS user, claims.name AS user_name
EVAL-object_path = coalesce(resourceUri,resourceuri,resourceId)
EVAL-event_description = if(description="",null(),description)
EVAL-subStatus.localizedValue = if('subStatus.localizedValue'="",null(),'subStatus.localizedValue')
EVAL-operationName.localizedValue = trim('operationName.localizedValue')
FIELDALIAS-dvc = subscriptionId AS dvc
EVAL-description = coalesce(signature,if(description="",null(),description))
EVAL-severity = if(signature IN("Email notification for high severity alerts should be enabled"),case(level=="Informational","informational",level=="Warning","medium"),severity)
## Extract resourceuri as dest for alert dm and subscriptionid for change dm
EVAL-dest = case(signature IN("Email notification for high severity alerts should be enabled"), coalesce(resourceUri, resourceId), true(), subscriptionId)
EVAL-type = case(signature IN("Email notification for high severity alerts should be enabled"), "alert", true(), type)
## Handle action cim field based on status.value=Started
EVAL-vendor_res_code = coalesce('properties.statusCode', if('status.value'=="Started", "Started", "unknown"))
EVAL-status = case('status.value' IN("Succeeded","Started","Accepted"), "success", 'status.value'=="Failed", "failure")
EVAL-vendor = "Microsoft"
EVAL-product = "Azure"
EVAL-vendor_product = "Microsoft Azure"
LOOKUP-mscs_audit_change_cim_fields_with_status_code = mscs_audit_change_cim_fields_with_status_code operationName.localizedValue vendor_res_code OUTPUTNEW action,object_attrs,object_category,change_type

[mscs:storage:table]
KV_MODE = json
TIME_PREFIX = "Timestamp":\s*"
SHOULD_LINEMERGE = false


[mscs:vm:metrics]
KV_MODE = json
TIME_PREFIX = "TIMESTAMP":\s*"
FIELDALIAS-mscs_vm_id = PartitionKey AS vm_id
REPORT-mscs_row_key = mscs_row_key
EVAL-cpu_load_percent = round(case(CounterName == "\\Processor(_Total)\\% Processor Time", Average, CounterName == "\\Processor\\PercentProcessorTime", Average), 2)
EVAL-mem_usage_percent = round(case(CounterName == "\\Memory\\% Committed Bytes In Use", Average, CounterName == "\\Memory\\PercentUsedMemory", Average), 2)
EVAL-mem_provisioned = round(case(CounterName == "\\Memory\\Committed Bytes" , Average, CounterName == "\\Memory\\UsedMemory", Average), 0)

[mscs:kql]
KV_MODE = json
TRUNCATE = 9999999
DATETIME_CONFIG = CURRENT
description = "Azure KQL Log Analytics"

[mscs:kql:stats]
KV_MODE = json
TRUNCATE = 9999999
DATETIME_CONFIG = CURRENT
description = "Azure KQL Query Statistics"

[source::...splunk_ta_microsoft-cloudservices_rh_mscs_azure_kql.log*]
sourcetype = mscs:kql:input:validation:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[source::...splunk_ta_microsoft-cloudservices_mscs_azure_kql_*.log*]
sourcetype = mscs:kql:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[source::...splunk_ta_microsoft-cloudservices_storage_account_validation.log*]
sourcetype = mscs:storage:account:validation:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\w+\spid=

[source::...splunk_ta_microsoft-cloudservices_azure_account_validation.log*]
sourcetype = mscs:app:account:validation:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\w+\spid=

[source::...splunk_ta_microsoft-cloudservices_azure_audit.log*]
sourcetype = mscs:azure:audit:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[source::...splunk_ta_microsoft-cloudservices_azure_resource.log*]
sourcetype = mscs:azure:resource:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[source::...splunk_ta_microsoft-cloudservices_storage_table*.log*]
sourcetype = mscs:storage:table:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[source::...splunk_ta_microsoft-cloudservices_storage_blob*.log*]
sourcetype = mscs:storage:blob:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[source::...splunk_ta_microsoft_cloudservices_mscs_azure_event_hub_*.log*]
sourcetype = mscs:azure:eventhub:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\slevel=

[source::...splunk_ta_microsoft-cloudservices_ucc_lib.log*]
sourcetype = mscs:ucc:lib:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \dDATETIME_CONFIG{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[source::...splunk_ta_microsoft-cloudservices_util.log*]
sourcetype = mscs:util:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[ms:0365:jobinsight:input]
TRUNCATE=0

[mscs:storage:blob:json]
KV_MODE=json

[mscs:storage:blob:xml]
KV_MODE=xml

[mscs:azure:eventhub]
TRUNCATE = 2097152
KV_MODE = json
TRANSFORMS-sourcetype_mscs_azure_security_alerts = mscs_azure_security_alerts
TRANSFORMS-sourcetype_mscs_azure_security_recommendations = mscs_azure_security_recommendations

[azure:monitor:aad]
KV_MODE = json
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
description = "Azure Audit and Authentication Events"
TRUNCATE = 2097152
TIME_PREFIX = "time":\s*"

REPORT-splunk_ta_mscs_additional_details = mscs_get_additonalDetails,mscs_extract_name_and_new_value,mscs_extract_UPN,mscs_extract_Email,mscs_extract_InvitationId,mscs_extract_ObjectId,mscs_extract_UserObjectId,mscs_extract_path_from_resourceId,mscs_extract_object_attrs_from_resultReason

FIELDALIAS-authentication_service = properties.tokenIssuerType as authentication_service
FIELDALIAS-command = operationName as command
FIELDALIAS-dest = tenantId as dest
FIELDALIAS-enabled = properties.provisioningSteps{}.details.dynamicProperties.accountEnabled as enabled
FIELDALIAS-id = properties.id as id
FIELDALIAS-reason = properties.status.failureReason as reason
FIELDALIAS-severity = properties.riskLevel as severity
FIELDALIAS-signature = operationName as signature
FIELDALIAS-src = callerIpAddress as src
FIELDALIAS-src_ip = callerIpAddress as src_ip
FIELDALIAS-vendor_account = tenantId as vendor_account

EVAL-action = case(operationName IN ("Sign-in activity") and isnull('properties.status.failureReason'), "success", \
                   operationName IN ("Sign-in activity") and isnotnull('properties.status.failureReason'), "failure")
EVAL-app = case(isnotnull('properties.appDisplayName'), 'properties.appDisplayName', \
                operationName IN ("Risky user", "User Risk Detection", "Sign-in activity"), "Azure AD")
EVAL-authentication_method = case('properties.isInteractive'="true", "Interactive", \
                                  'properties.isInteractive'="false", "nonInteractive")
EVAL-description = case(operationName IN ("Risky user"),'properties.riskState', \
operationName IN ("User Risk Detection"),'properties.riskState'.", ".'properties.riskType')
EVAL-dest_type = "tenant"
EVAL-duration = 'properties.processingTimeInMilliseconds'/1000
EVAL-dvc = if(operationName IN ("Provisioning activity"),"Azure AD",coalesce('properties.loggedByService','properties.sourceSystem.Name'))

EVAL-object = case(operationName IN ("Provisioning activity"),'properties.provisioningSteps{}.details.dynamicProperties.userPrincipalName', \
                        operationName IN ("Add member to role requested (PIM activation)","Add member to role completed (PIM activation)","Change user password","Remove member from group","Remove eligible member from role","Add eligible member to role","Add member to role outside of PIM (permanent)","Restore user","Reset user password","Add owner to application","Update user","Invite external user","Add member to role","Add member to group","Invite external user","Change password (self-service)","Reset password (by admin)","Add user","Delete user","Remove member from role","Clear block on user","Add blocked user","User registered all required security info","User registered security info","Set user manager","Enable account","Disable account","Hard Delete user") OR (like(operationName,"Add eligible member to role in PIM%"))  OR (like(operationName,"Add member to role in PIM%")) OR (like(operationName,"Remove eligible member from role in PIM%")) OR (like(operationName,"Remove member from role in PIM%")),'properties.targetResources{}.userPrincipalName', \
                        operationName IN ("Redeem external user invite","Delete external user","Viral user creation"),UPN, \
                        operationName IN ("Register device"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^Device Id$")), \
                        operationName IN ("Create resource request"),mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^Request$")), \
                        operationName IN ("Update role setting in PIM","Add role from template"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^Role$")), \
                        operationName IN ("Create access review","Delete access review","Update access review","Access review ended"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^AccessReview$")), \
                        operationName IN ("Add app role assignment to group","Add owner to group"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Group.DisplayName$")),"\"",""), \
                        operationName IN ("Add application","Add group","Update group","Update Sign-In Risk Policy","Update policy","Update User Risk and MFA Registration Policy","Add policy","Create company settings","Update role","Add device","Update company settings","Add service principal","Update service principal","Delete application","Update application","Update application – Certificates and secrets management ","Hard Delete application","Delete group","Set directory feature on tenant","Consent to application","Set Company Information","Hard Delete group","Delete role definition","Add role definition","Restore application","Get tenant details","Delete policy","Finish applying group based license to users","Set group license","Update authorization policy","Add label","Remove service principal","Hard delete service principal") OR (like(operationName,"%business flow")) OR (like(operationName,"%conditional access policy")),'properties.targetResources{}.displayName', \
                        operationName IN ("Add owner to service principal"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^ServicePrincipal.DisplayName$")),"\"",""), \
                        operationName IN ("Remove owner from group"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.oldValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Group.DisplayName$")),"\"",""), \
                        operationName IN ("Remove owner from application"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.oldValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Application.DisplayName$")),"\"",""), \
                        operationName IN ("POST Tenant.CreateTenant"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Model.TenantName$")),"\"",""), \
                        operationName IN ("Remove app role assignment from user","Add app role assignment grant to user"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^User.UPN$")),"\"",""), \
                        operationName IN ("Get resource properties of a tenant","Initialize tenant"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^targetTenant$")), \
                        operationName IN ("Update access package catalog","Create access package catalog","Delete access package catalog"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^AccessPackageCatalog$")), \
                        operationName IN ("Create connected organization"),replace(mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^Other$")),"\"",""), \
                        operationName IN ("Add unverified domain","Update NotificationSettings","Set directory feature on tenant","Set Company Information","Remove unverified domain","Verify domain") OR (like(operationName,"%(bulk)")),"Azure AD")

EVAL-object_attrs = case(operationName IN ("Provisioning activity"),'properties.modifiedProperties{}.displayName', \
                        operationName IN ("Redeem external user invite"),"Email"."=".Email, \
                        operationName IN ("Restore user","Delete external user","Viral user creation","Clear block on user","Add blocked user"),"user", \
                        operationName IN ("Reset user password","Change user password","Change password (self-service)","Reset password (by admin)"),"password", \
                        operationName IN ("Register device","Invite external user"),mvzip(additional_details_name,additional_details_value,"="), \
                        operationName IN ("Download groups - finished (bulk)","Hard Delete group","Download groups - started (bulk)"),"group", \
                        operationName IN ("Create access review","Delete access review","Access review ended"),"access review", \
                        operationName IN ("Download users - finished (bulk)","Download users - started (bulk)","Download group members - finished (bulk)","Download group members - started (bulk)") OR (like(operationName,"Bulk%")),"users", \
                        operationName IN ("Add unverified domain","Verify domain"),"domain", \
                        operationName IN ("Update Sign-In Risk Policy","Update policy","Update User Risk and MFA Registration Policy","Delete policy","Create business flow","Delete business flow","POST Tenant.CreateTenant"),"policy", \
                        operationName IN ("Delete application","Download service principals - finished (bulk)","Hard Delete application","Restore application","Download service principals - started (bulk)"),"application", \
                        operationName IN ("Add owner to service principal","Add owner to group","Remove owner from group","Remove owner from application"),"owner", \
                        operationName IN ("Download devices - finished (bulk)","Download devices - started (bulk)"),"device", \
                        operationName IN ("Remove unverified domain"),"unverified domain", \
                        operationName IN ("Delete role definition"),"role", \
                        operationName IN ("Create connected organization"),"directory", \
                        operationName IN ("Add label"),"label", \
                        operationName IN ("Remove service principal","Hard delete service principal"),"ServicePrincipal", \
                        operationName IN ("Delete group"),'properties.targetResources{}.groupType', \
                        like(operationName,"Remove eligible member from role in PIM%") OR like(operationName,"Remove member from role in PIM%"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^Role$")), \
                        operationName IN ("Remove app role assignment from user","Add app role assignment grant to user"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^ServicePrincipal$")), \
                        operationName IN ("Set Company Information"),coalesce(nullif(replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Included Updated Properties$")),"\"",""),""),'properties.targetResources{}.type'), \
                        operationName IN ("Update access package catalog"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^DisplayName$")),"\"",""), \
                        operationName IN ("Update business flow"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Description$")),"\"",""), \
                        operationName IN ("Get resource properties of a tenant","Initialize tenant","Get tenant details"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^targetEntityType$")), \
                        operationName IN ("Add user"),"UserState="+replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^UserState$")),"\[|\]|\"",""), \
                        operationName IN ("Enable account","Disable account"),"AccountEnabled="+replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^AccountEnabled$")),"\[|\]|\"",""), \
                        operationName IN ("Delete user","Hard Delete user"),"Is Hard Deleted="+replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Is Hard Deleted$")),"\"",""), \
                        operationName IN ("Add role from template"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^TargetId.RoleWellKnownObjectName$")),"\"",""), \
                        operationName IN ("Remove member from role"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.oldValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Role.DisplayName$")),"\"",""), \
                        operationName IN ("User registered all required security info","User registered security info"),'object_attrs_from_resultReason', \
                        true(),mvfilter(match('properties.targetResources{}.modifiedProperties{}.displayName', "^(?!Included Updated Properties).+")))

EVAL-object_id = case(operationName IN ("Create resource request"),mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^Request$")), \
                operationName IN ("Update role setting in PIM"),mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^Role$")), \
                operationName IN ("Create access review","Delete access review"),mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^AccessReview$")), \
                operationName IN ("Provisioning activity"),'properties.provisioningSteps{}.details.dynamicProperties.objectId',operationName IN ("Viral user creation"),UserObjectId, \
                operationName IN ("Delete external user"),ObjectId, \
                operationName IN ("Redeem external user invite"),InvitationId, \
                operationName IN ("Update service principal"),mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^ServicePrincipal$")), \
                like(operationName,"Add member to role in PIM%") OR like(operationName,"Add eligible member to role in PIM%") OR like(operationName,"Remove eligible member from role in PIM%") OR like(operationName,"Remove member from role in PIM%") OR operationName IN ("Reset password (by admin)","Change password (self-service)","Add member to role requested (PIM activation)","Add member to role completed (PIM activation)","Add member to group","Add owner to application","Update user","Invite external user","Reset user password","Add member to role outside of PIM (permanent)","Add eligible member to role","Remove eligible member from role","Remove member from group","Change user password","Add member to role","Remove member from role"),mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^User$")), \
                operationName IN ("Register device"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^Device Id$")), \
                operationName IN ("Add app role assignment to group","Add owner to group"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Group.ObjectID$")),"\"",""), \
                operationName IN ("Add owner to service principal"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^ServicePrincipal.ObjectID$")),"\"",""), \
                operationName IN ("Remove owner from group"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.oldValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Group.ObjectID$")),"\"",""), \
                operationName IN ("Remove owner from application"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.oldValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Application.ObjectID$")),"\"",""), \
                operationName IN ("Remove app role assignment from user"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.oldValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^User.ObjectID$")),"\"",""), \
                operationName IN ("Add app role assignment grant to user"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^User.ObjectID$")),"\"",""), \
                operationName IN ("Create connected organization"),replace(mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^Other$")),"\"",""), \
                operationName IN ("Update access package catalog","Create access package catalog","Delete access package catalog"),mvindex('properties.targetResources{}.id',mvfind('properties.targetResources{}.type',"^AccessPackageCatalog$")), \
                'properties.targetResources{}.id'!="null",'properties.targetResources{}.id', \
                operationName IN ("Clear block on user","Add blocked user"),null(), \
                true(),'tenantId')

EVAL-object_path = case(operationName IN ("Add unverified domain","Update NotificationSettings","Set directory feature on tenant","POST Tenant.CreateTenant","Set Company Information","Remove unverified domain","Verify domain","Initialize tenant","Get tenant details") OR (like(operationName,"%(bulk)")),path_from_resourceId)

EVAL-object_category = case(operationName IN ("Set directory feature on tenant","Set Company Information","Bulk invite users - finished (bulk)","Bulk invite users - started (bulk)","Download users - finished (bulk)","Download users - started (bulk)","Verify domain"),'properties.targetResources{}.type', \
                operationName IN ("Get resource properties of a tenant","Initialize tenant","Get tenant details"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^targetEntityType$")))

EVAL-response_time = 'properties.processingTimeInMilliseconds'/1000

EVAL-result = case(operationName IN ("Provisioning activity"),mvindex('properties.provisioningSteps{}.description',mvfind('properties.provisioningSteps{}.provisioningStepType',"^5$")), \
                operationName IN ("Create resource request"),operationName, \
                operationName IN ("Register device"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^AdditionalInfo$")), \
                'properties.resultReason'=="null" OR 'properties.resultReason'=="None" OR 'properties.resultReason'=="<null>",'operationName', \
                'properties.resultReason'!="",'properties.resultReason',true(),'operationName')

EVAL-result_id = case(operationName IN ("Provisioning activity"),mvindex('properties.provisioningSteps{}.name',mvfind('properties.provisioningSteps{}.provisioningStepType',"^5$")), \
                operationName IN ("Create resource request"),operationName, \
                operationName IN ("Register device"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^AdditionalInfo$")), \
                'properties.resultReason'=="null" OR 'properties.resultReason'=="None" OR 'properties.resultReason'=="<null>",'operationName', \
                'properties.resultReason'!="",'properties.resultReason',true(),'operationName')

EVAL-signature_id = case(operationName IN ("Risky user", "User Risk Detection"), 'operationName')

EVAL-signinDateTime = case(category IN ("NonInteractiveUserSignInLogs", "ManagedIdentitySignInLogs", "ServicePrincipalSignInLogs", "SignInLogs"), 'properties.createdDateTime', true(), signinDateTime)

EVAL-src_user = case(operationName IN ("Provisioning activity"),'properties.initiatedBy.Name', \
                        operationName IN ("Add member to role","Update user","Add eligible member to role","Remove eligible member from role"),'properties.initiatedBy.app.displayName', \
                        operationName IN ("Delete user","Remove member from role"),if('properties.initiatedBy.app.servicePrincipalId'!="null",'properties.initiatedBy.app.servicePrincipalId','properties.initiatedBy.app.displayName'), \
                        'properties.initiatedBy.user.userPrincipalName'!="",'properties.initiatedBy.user.userPrincipalName', \
                        'properties.initiatedBy.user.displayName'!="",'properties.initiatedBy.user.displayName')

EVAL-src_user_name = case(operationName IN ("Provisioning activity"),'properties.initiatedBy.Name', \
                                operationName IN ("Add member to role","Update user","Add eligible member to role","Remove eligible member from role","Delete user","Remove member from role"),'properties.initiatedBy.app.displayName', \
                                'properties.initiatedBy.user.displayName'!="null",'properties.initiatedBy.user.displayName', \
                                'properties.initiatedBy.user.userPrincipalName'!="",'properties.initiatedBy.user.userPrincipalName')

EVAL-src_user_type = case(operationName IN ("Provisioning activity"),'properties.initiatedBy.Type', \
                        like('properties.initiatedBy.user.userPrincipalName',"%#EXT#%"),"external identity", \
                        isnotnull('properties.initiatedBy.user.userPrincipalName'),"userPrincipal", \
                        isnotnull('properties.initiatedBy.app.servicePrincipalName'),"servicePrincipal", \
                        'properties.initiatedBy.app.servicePrincipalId'!="","ServicePrincipal", \
                        true(),null)

EVAL-status = case(operationName IN ("Provisioning activity") AND 'resultType'=="Success","success", \
'properties.result'=="success","success", \
true(),"failure")

EVAL-user = case(operationName IN ("Add service principal","Update service principal"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^ServicePrincipal$")), \
                        operationName IN ("Provisioning activity"),'properties.provisioningSteps{}.details.dynamicProperties.userPrincipalName', \
                        operationName IN ("Redeem external user invite","Delete external user","Viral user creation"),UPN, \
                        like(operationName,"Add member to role in PIM%") OR like(operationName,"Add eligible member to role in PIM%") OR like(operationName,"Remove eligible member from role in PIM%") OR like(operationName,"Remove member from role in PIM%") OR operationName IN ("Add member to role","Add member to group","Add owner to application","Update user","Invite external user","Reset user password","Restore user","Add member to role outside of PIM (permanent)","Change password (self-service)","Reset password (by admin)","Add eligible member to role","Remove eligible member from role","Remove member from group","Change user password","Add user","Delete user","Remove member from role","Clear block on user","Add blocked user","User registered all required security info","User registered security info","Set user manager","Enable account","Disable account","Hard Delete user"),'properties.targetResources{}.userPrincipalName',operationName IN ("Add device"),'properties.initiatedBy.app.displayName', \
                        operationName IN ("Set Company Information","Create connected organization","Finish applying group based license to users","Add label","Hard delete service principal"),if('properties.initiatedBy.app.servicePrincipalId'!="null",'properties.initiatedBy.app.servicePrincipalId','properties.initiatedBy.app.displayName'), \
                        operationName IN ("Hard Delete group"),'identity', \
                        operationName IN ("Remove app role assignment from user","Add app role assignment grant to user"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^User.UPN$")),"\"",""), \
                        true(),coalesce('properties.initiatedBy.user.userPrincipalName','properties.userPrincipalName','properties.servicePrincipalName'))

EVAL-user_agent = case(operationName IN ("Sign-in activity"),'properties.userAgent', \
                        true(),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^User-Agent$")))

EVAL-user_id = case(isnotnull('properties.servicePrincipalId') AND 'properties.servicePrincipalId' != "", 'properties.servicePrincipalId', \
                    true(), 'properties.userId')

EVAL-user_name = case(operationName IN ("Risky user","User Risk Detection"),'properties.userDisplayName', \
                operationName IN ("Provisioning activity"),'properties.provisioningSteps{}.details.dynamicProperties.namegivenName'." ".'properties.provisioningSteps{}.details.dynamicProperties.namefamilyName', \
                operationName IN ("Add member to role","Add member to group","Add owner to application","Update user","Reset user password","Restore user","Add eligible member to role","Remove eligible member from role","Remove member from group","Change user password","Delete user","Remove member from role","Clear block on user","Add blocked user","Set user manager","Enable account","Disable account","Hard Delete user"),'properties.targetResources{}.userPrincipalName', \
                operationName IN ("Viral user creation","Delete external user","Redeem external user invite"),UPN, \
                like (operationName,"Add member to role in PIM%") OR like (operationName,"Add eligible member to role in PIM%") OR like(operationName,"Remove eligible member from role in PIM%") OR like(operationName,"Remove member from role in PIM%") OR operationName IN ("Change password (self-service)","Reset password (by admin)","Add member to role outside of PIM (permanent)","Invite external user","User registered all required security info","User registered security info"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^User$")), \
                operationName IN ("Add service principal","Update service principal"),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^ServicePrincipal$")), \
                operationName IN ("Set Company Information","Create connected organization","Finish applying group based license to users","Add label","Hard delete service principal"),'properties.initiatedBy.app.displayName', \
                operationName IN ("Hard Delete group"),'identity', \
                operationName IN ("Remove app role assignment from user","Add app role assignment grant to user"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^User.UPN$")),"\"",""), \
                operationName IN ("Add user"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^DisplayName$")),"\[|\]|\"",""), \
                'properties.initiatedBy.user.displayName'!="null",'properties.initiatedBy.user.displayName', \
                true(),'properties.initiatedBy.user.userPrincipalName')

EVAL-user_role = case(isnotnull('properties.servicePrincipalName'), "ServicePrincipal")

EVAL-user_type = case(operationName IN ("Update user"),mvindex('properties.additionalDetails{}.value',mvfind('properties.additionalDetails{}.key',"^UserType$")), \
        operationName IN ("Add service principal","Update service principal"),mvindex('properties.targetResources{}.type',mvfind('properties.targetResources{}.type',"^ServicePrincipal$")), \
        operationName IN ("Add member to role completed (PIM activation)","Add member to role requested (PIM activation)") OR (like(operationName,"Add member to role in PIM%")) OR (like(operationName,"Add eligible member to role in PIM%")) OR (like(operationName,"Remove eligible member from role in PIM%")) OR (like(operationName,"Remove member from role in PIM%")),mvindex('properties.targetResources{}.displayName',mvfind('properties.targetResources{}.type',"^Role$")), \
        operationName IN ("Add user"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^UserType$")),"\[|\]|\"",""), \
        operationName IN ("Remove member from role"),replace(mvindex('properties.targetResources{}.modifiedProperties{}.oldValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^Role.DisplayName$")),"\"",""), \
        operationName IN ("Remove app role assignment from user","Add app role assignment grant to user"),if(like(replace(mvindex('properties.targetResources{}.modifiedProperties{}.newValue',mvfind('properties.targetResources{}.modifiedProperties{}.displayName',"^User.UPN$")),"\"",""),"%#EXT#%"),"external identity","userPrincipal"), \
        operationName IN ("Delete user","Clear block on user","Add blocked user","User registered all required security info","User registered security info","Set user manager","Enable account","Disable account","Hard Delete user"),if(like('properties.targetResources{}.userPrincipalName',"%#EXT#%"),"external identity","userPrincipal"), \
        like('properties.initiatedBy.user.userPrincipalName',"%#EXT#%"),"external identity", \
        isnotnull('properties.initiatedBy.user.userPrincipalName'),"userPrincipal", \
        operationName IN ("Hard Delete group") OR (isnotnull('properties.initiatedBy.app.servicePrincipalName')),"servicePrincipal", \
        isnotnull('properties.servicePrincipalName'), "ServicePrincipal", \
                        true(), 'properties.userType')

EVAL-vendor_product = "Azure AD"

EVAL-vendor_region = case(operationName="Risky user", location, \
                          operationName="User Risk Detection",'properties.location.city'.",".'properties.location.state'.",".'properties.location.countryOrRegion')

LOOKUP-mscs_aad_change_analysis = mscs_aad_change_analysis operationName OUTPUTNEW change_type,action,object_category
LOOKUP-mscs_audit_authentication = mscs_audit_authentication operationName,category OUTPUTNEW dataset_name
LOOKUP-mscs_severity_type = mscs_severity_type properties.riskLevel,severity OUTPUTNEW type

[mscs:azure:security:alert]
KV_MODE = json
REPORT-extract_fields_from_azure_resource_id = mscs_extract_subscription_id_and_resource_group

# Azure Security Center Alerts CIM Mapping

## Field Extractions

EXTRACT-vendor_account = "AzureResourceId":"\/subscriptions\/(?<vendor_account>[a-fA-F0-9-]*)
EXTRACT-vendor-region = \/location\/(?<vendor_region>[\w]*)

## Field Aliases

FIELDALIAS-mscs_security_alert_app = ProductName as app
FIELDALIAS-mscs_security_alert_description = Description as description
FIELDALIAS-mscs_security_alert_dest = AzureResourceId as dest
FIELDALIAS-mscs_security_alert_dest_name = CompromisedEntity as dest_name
FIELDALIAS-mscs_security_alert_id = SystemAlertId as id
FIELDALIAS-mscs_security_alert_signature = AlertDisplayName as signature
FIELDALIAS-mscs_security_alert_signature_id = AlertType as signature_id

## Calculated Fields

EVAL-recommendation = coalesce(RemediationSteps, 'RemediationSteps{}')
EVAL-user = coalesce('ExtendedProperties.Client Principal Name', 'ExtendedProperties.User Name', user)
EVAL-user_name = coalesce('ExtendedProperties.Client Principal Name', 'ExtendedProperties.User Name', user)
EVAL-src = coalesce('Entities.Address','Entities{}.Address','ExtendedProperties.Client IP Address','ExtendedProperties.Client IP address','ExtendedProperties.Attacker IP Address')

EVAL-severity = lower(Severity)
EVAL-type = "alert"

## Lookups

# Lookup to generate object_category name from destination resource type
LOOKUP-mscs_security_alert_object_category = mscs_security_alert_object_category ExtendedProperties.resourceType OUTPUTNEW dest_type

[mscs:azure:security:recommendation]
KV_MODE = json
REPORT-extract_fields_from_id = mscs_extract_subscription_id_and_resource_group_from_id

# Azure Security Center Recommendations CIM Mapping

## Field Extractions

EXTRACT-vendor_account = "id":"\/subscriptions\/(?<vendor_account>[a-fA-F0-9-]*)

## Field Aliases

FIELDALIAS-mscs_security_recommendation_description = properties.metadata.description as description
FIELDALIAS-mscs_security_blob_recommendation_dest = properties.resourceDetails.id as dest
FIELDALIAS-mscs_security_recommendation_id = name as id
FIELDALIAS-mscs_security_recommendation_recommendation = properties.metadata.remediationDescription as recommendation
FIELDALIAS-mscs_security_recommendation_signature = properties.displayName as signature
FIELDALIAS-mscs_security_recommendation_signature_id = properties.metadata.policyDefinitionId as signature_id
## Calculated Fields

EVAL-app = "Azure Security Center"
EVAL-severity = lower('properties.metadata.severity')
EVAL-type = "warning"

## SCDM search time props START
[azure:monitor:activity]
KV_MODE = json
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
TRUNCATE = 9999999
description = "Azure Activity Log Events"
TIME_PREFIX = "time":\s*"
REPORT-azure_monitor_logs_extract_subscription_and_resourcegroup = azure_monitor_logs_extract_subscription_and_resourcegroup,mscs_extract_fields_from_resource_id,mscs_extract_dvc_from_operationName, mscs_extract_object_from_resource_id,mscs_extract_object_from_sites_resource_id,mscs_extract_subscription_id_from_resource_id, mscs_extract_vm_name_from_resource_id,mscs_extract_namespace_from_resource_id,mscs_extract_storage_blob_from_resource_id, mscs_extract_web_app_name_from_resource_id,mscs_extract_eventhub_name_from_resource_id,mscs_extract_workspace_name_from_resource_id, mscs_extract_storage_acc_name_from_resource_id,mscs_extract_properties,mscs_extract_instance_type_value_from_properties,mscs_extract_publisher_from_properties, mscs_extract_sku_from_properties,mscs_extract_version_from_properties

## Field Aliases
FIELDALIAS-operation_name = operationName AS command
FIELDALIAS-object_path = resourceId as object_path
FIELDALIAS-src = callerIpAddress as src
FIELDALIAS-vendor_account = tenantId as vendor_account
FIELDALIAS-vendor_region = RoleLocation AS vendor_region

EVAL-change_type = case(operationName IN ("MICROSOFT.COMPUTE/DISKS/WRITE", "MICROSOFT.COMPUTE/DISKS/DELETE"), "storage",\
                        operationName IN ("MICROSOFT.COMPUTE/VIRTUALMACHINES/WRITE", "MICROSOFT.COMPUTE/VIRTUALMACHINES/DELETE",\
                                        "MICROSOFT.COMPUTE/VIRTUALMACHINES/START/ACTION", "MICROSOFT.COMPUTE/VIRTUALMACHINES/DEALLOCATE/ACTION",\
                                        "MICROSOFT.COMPUTE/VIRTUALMACHINES/EXTENSIONS/WRITE", "MICROSOFT.COMPUTE/VIRTUALMACHINES/RESTART/ACTION"), "virtual machine",\
                                        true(), "resources")

EVAL-dest = if(operationName = "Smart Detection - Failure Anomalies Alert Rule Creation",subscription_id,'properties.hierarchy')
EVAL-dvc = if(operationName = "Smart Detection - Failure Anomalies Alert Rule Creation",resource_provider_from_resource_id,resource_provider)
EVAL-image_id = if(operationName="MICROSOFT.COMPUTE/VIRTUALMACHINES/WRITE",publisher+":"+instance_type_value+":"+sku+":"+version,null())
EVAL-instance_type = if(operationName="MICROSOFT.COMPUTE/VIRTUALMACHINES/WRITE",instance_type_value,null())
EVAL-object = case(operationName IN ("MICROSOFT.WEB/SITES/HOST/LISTKEYS/ACTION"),object_from_sites,\
                   operationName IN ("MICROSOFT.SECURITY/AUTOPROVISIONINGSETTINGS/WRITE"),subscription_id,\
                   operationName IN ("MICROSOFT.COMPUTE/VIRTUALMACHINES/EXTENSIONS/WRITE"),vm_name,\
                   true(), object_name)

EVAL-object_id = case(operationName IN ("MICROSOFT.WEB/SITES/HOST/LISTKEYS/ACTION"),object_from_sites,\
                   operationName IN ("MICROSOFT.SECURITY/AUTOPROVISIONINGSETTINGS/WRITE"),subscription_id,\
                   operationName IN ("MICROSOFT.COMPUTE/VIRTUALMACHINES/EXTENSIONS/WRITE"),vm_name,\
                   true(), object_name)
EVAL-object_attrs = case(operationName IN ("MICROSOFT.EVENTHUB/NAMESPACES/EVENTHUBS/WRITE","MICROSOFT.EVENTHUB/NAMESPACES/EVENTHUBS/DELETE"),"NAMESPACES="+namespace,\
                        operationName IN ("MICROSOFT.NETWORK/REGISTER/ACTION","MICROSOFT.OPERATIONALINSIGHTS/REGISTER/ACTION","MICROSOFT.OPERATIONSMANAGEMENT/REGISTER/ACTION",\
                        "MICROSOFT.RESOURCEHEALTH/REGISTER/ACTION","MICROSOFT.SECURITY/REGISTER/ACTION"),"subscription",\
                        operationName IN ("MICROSOFT.COMPUTE/VIRTUALMACHINES/EXTENSIONS/WRITE"),"extensions="+'object_name',\
                        operationName IN ("MICROSOFT.STORAGE/STORAGEACCOUNTS/BLOBSERVICES/CONTAINERS/DELETE","MICROSOFT.STORAGE/STORAGEACCOUNTS/BLOBSERVICES/CONTAINERS/WRITE"),mvappend("STORAGEACCOUNTS="+storage_account,"BLOBSERVICES="+blobservice),\
                        operationName IN ("MICROSOFT.WEB/SITES/FUNCTIONS/LISTKEYS/ACTION"),"Web App = "+web_app_name,\
                        operationName IN ("MICROSOFT.WEB/SITES/HOST/LISTKEYS/ACTION"),"Functions Host keys = "+object_name,\
                        operationName IN ("MICROSOFT.EVENTHUB/NAMESPACES/AUTHORIZATIONRULES/LISTKEYS/ACTION","MICROSOFT.EVENTHUB/NAMESPACES/AUTHORIZATIONRULES/WRITE"),mvappend("RESOURCEGROUPS="+resource_group,"NAMESPACES="+namespace),\
                        operationName IN ("MICROSOFT.EVENTHUB/NAMESPACES/EVENTHUBS/CONSUMERGROUPS/WRITE"),mvappend("RESOURCEGROUPS="+resource_group,"NAMESPACES="+namespace,"EVENTHUBS="+eventhub_name),\
                        operationName IN ("MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/DATASOURCES/WRITE","MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/LINKEDSERVICES/WRITE"),mvappend("RESOURCEGROUPS="+resource_group,"WORKSPACES="+workspace_name),\
                        operationName IN ("MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/SHAREDKEYS/ACTION"),"Shared Keys",\
                        operationName IN ("MICROSOFT.SECURITY/ADVANCEDTHREATPROTECTIONSETTINGS/WRITE"),mvappend("RESOURCEGROUPS="+resource_group,"STORAGEACCOUNTS="+storage_acc_name),\
                        operationName IN ("MICROSOFT.SECURITY/AUTOPROVISIONINGSETTINGS/WRITE"),"Auto Provisioning Setting",\
                        true(),if(like('resourceId',"%RESOURCEGROUPS%") OR like('resourceId',"%resourceGroups%"),"RESOURCEGROUPS="+resource_group,null()))
EVAL-result = if('resultType' IN ("Failure","Failed"),'resultSignature','operationName')
EVAL-result_id = if('resultType' IN ("Failure","Failed"),'resultSignature','operationName')
EVAL-status = if('resultType' IN ("Failure","Failed"),"failure","success")
EVAL-user = case('identity.authorization.evidence.principalType' IN ("ServicePrincipal"),'identity.authorization.evidence.principalId',\
                'identity.authorization.evidence.principalType' IN ("User"),'identity.claims.http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name',\
                isnull('identity.authorizaion.evidence.principalType'),'identity.claims.http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name')

EVAL-user_name = case('identity.authorization.evidence.principalType' IN ("ServicePrincipal"),'identity.authorization.evidence.role',\
                'identity.authorization.evidence.principalType' IN ("User"),if('identity.claims.name'="null",'identity.claims.http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name','identity.claims.name'),\
                isnull('identity.authorizaion.evidence.principalType'),if('identity.claims.name'="null",'identity.claims.http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name','identity.claims.name'))

EVAL-user_type = case('identity.authorization.evidence.principalType' IN ("ServicePrincipal"),"ServicePrincipal",\
                'identity.authorization.evidence.principalType'IN ("User"),case('identity.authorization.evidence.role'!="null" AND 'identity.authorization.evidence.role'!="",'identity.authorization.evidence.role',\
                                                                            like('identity.claims.http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name',"%#EXT#%"),"external identity",\
                                                                            true(),"UserPrincipal"),\
                isnull('identity.authorizaion.evidence.principalType'),case('identity.authorization.evidence.role'!="null" AND 'identity.authorization.evidence.role'!="",'identity.authorization.evidence.role',\
                                                                            like('identity.claims.http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name',"%#EXT#%"),"external identity",\
                                                                            true(),"UserPrincipal"))

# Lookups
LOOKUP-mscs_azure_activity = mscs_azure_activity operationName OUTPUTNEW action,object_category,vendor_product,object_category AS object_attrs
LOOKUP-mscs_azure_activity_dataset_names = mscs_azure_activity_dataset_names operationName resultType OUTPUTNEW dataset_name
## SCDM search time props END

[azure:monitor:resource]
KV_MODE = json
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
description = "Azure CosmosDB Events"
TRUNCATE = 2097152
TIME_PREFIX = "time":\s*"

REPORT-extract_fields_for_cosmosdb = mscs_extract_object_name_for_controlplane, mscs_extract_object_name_for_controlplane_before_slash, mscs_extract_object_name_for_dataplane, mscs_extract_trigger_attributes
REPORT-extract_fields_for_datashare = azure_data_share_extract_from_properties, azure_data_share_extract_from_detailMessage, azure_data_share_extract_from_shareResourceId, azure_data_share_extract_from_shareSubscriptionResourceId, azure_monitor_resource_extract_from_resourceId, azure_data_share_status_for_RHC

FIELDALIAS-command = operationName AS command
FIELDALIAS-user_agent = properties.userAgent AS user_agent
FIELDALIAS-vendor_region = properties.region AS vendor_region

EVAL-action = if('category' == "ReceivedShareSnapshots" AND isnull(detailMessage), null(), action)
EVAL-app = case(('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots") AND isnotnull(detailMessage)) OR 'category' == "Shares", "Azure Data Share", true(), app)
EVAL-dest = case('category' IN ("GremlinRequests", "CassandraRequests", "MongoRequests") AND 'properties.databaseName' == "<empty>", null(), \
                'category' IN ("GremlinRequests", "CassandraRequests", "MongoRequests"), 'properties.databaseName', \
                'category' IN ("ControlPlaneRequests", "DataPlaneRequests"), DATABASEACCOUNTS, \
                ('category' IN  ("SentShareSnapshots", "ReceivedShareSnapshots") AND isnotnull(detailMessage)) OR 'category' IN ("RHC","Shares"), SUBSCRIPTIONS)
EVAL-dest_name = if(('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots") AND isnotnull(detailMessage)) OR 'category' == "Shares", SUBSCRIPTIONS, dest_name)
EVAL-duration = 'properties.duration'*0.001
EVAL-object = case('category' IN ("GremlinRequests", "CassandraRequests", "MongoRequests") AND ('properties.databaseName' == "<empty>" OR 'properties.databaseName' == ""), null(), \
                'category' IN ("GremlinRequests", "CassandraRequests", "MongoRequests"), 'properties.databaseName', \
                'category' == "ControlPlaneRequests" AND 'properties.resourceUri' != "", coalesce(object_name_controlplane, object_name_before_slash, DATABASEACCOUNTS), \
                'category' == "ControlPlaneRequests" AND 'operationName' IN ("DiagnosticLogUpdateComplete", "DiagnosticLogUpdateStart", "AccountUpdateComplete", "AccountUpdateStart"), coalesce(object_name_controlplane, object_name_before_slash, DATABASEACCOUNTS), \
                'category' == "DataPlaneRequests" AND 'properties.requestResourceId' != "", coalesce(object_name_dataplane, 'properties.requestResourceId', DATABASEACCOUNTS), \
                'category' IN ("RHC","Shares"), ACCOUNTS, \
                'category' == "SentShareSnapshots", shares, \
                'category' == "ReceivedShareSnapshots" AND isnotnull(shareSubscriptions), shareSubscriptions)
EVAL-object_attrs = case('operationName' == "TableTablesThroughputUpdate", "Throughput", \
                        'operationName' IN ("DiagnosticLogUpdateComplete", "DiagnosticLogUpdateStart"), "Diagnosticlog", \
                        'operationName' IN ("AccountUpdateComplete", "AccountUpdateStart"), "Account", \
                        'properties.apiKindResourceType' == "Triggers" AND isnotnull('properties.resourceDetails'), mvzip(resourcedetails_key, resourcedetails_value, "="), \
                        'category' == "DataPlaneRequests", 'properties.requestResourceType', \
                        'category' == "RHC", RESOURCEGROUPS)
EVAL-object_category = case('operationName' IN ("AccountUpdateComplete", "AccountUpdateStart"), "Account", \
                        'operationName' IN ("DiagnosticLogUpdateComplete", "DiagnosticLogUpdateStart"), "account", \
                        'category' == "DataPlaneRequests", 'properties.requestResourceType', \
                        ('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots") AND isnotnull(detailMessage)) OR 'category' IN ("Shares","RHC"), "data share")
EVAL-object_id = case('category' IN ("GremlinRequests", "CassandraRequests", "MongoRequests") AND ('properties.databaseName' == "<empty>" OR 'properties.databaseName' == ""), null(), \
                'category' IN ("GremlinRequests", "CassandraRequests", "MongoRequests"), 'properties.databaseName', \
                'category' == "ControlPlaneRequests"  AND 'properties.resourceUri' != "", coalesce(object_name_controlplane, DATABASEACCOUNTS), \
                'category' == "ControlPlaneRequests" AND 'operationName' IN ("DiagnosticLogUpdateComplete", "DiagnosticLogUpdateStart", "AccountUpdateComplete", "AccountUpdateStart"), coalesce(object_name_controlplane, object_name_before_slash, DATABASEACCOUNTS), \
                'category' == "DataPlaneRequests"  AND 'properties.requestResourceId' != "", coalesce(object_name_dataplane, 'properties.requestResourceId', DATABASEACCOUNTS), \
                'category' IN ("RHC","Shares"), ACCOUNTS, \
                'category' == "SentShareSnapshots", shares, \
                'category' == "ReceivedShareSnapshots" AND isnotnull(shareSubscriptions), shareSubscriptions)
EVAL-object_path = case('category' == "ControlPlaneRequests" AND 'properties.resourceUri' != "", \
                        coalesce('properties.resourceUri', 'resourceId'), \
                        'category' == "ControlPlaneRequests" AND 'operationName' IN ("DiagnosticLogUpdateComplete", "DiagnosticLogUpdateStart", "AccountUpdateComplete", "AccountUpdateStart"), coalesce('properties.resourceUri', 'resourceId'), \
                        'category' == "DataPlaneRequests" AND 'properties.requestResourceId' != "", \
                        coalesce('properties.requestResourceId', 'resourceId'), \
                        ('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots") AND isnotnull(detailMessage)) OR 'category' IN ("Shares","RHC"), coalesce(shareResourceId, shareSubscriptionResourceId, resourceId))
EVAL-parent_object = case('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots"), account, \
                'category' == "Shares", RESOURCEGROUPS)
EVAL-parent_object_category = case('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots") AND isnotnull(detailMessage), "data share", 'category' == "Shares", "resource group")
EVAL-parent_object_id = case('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots"), account, \
                'category' == "Shares", RESOURCEGROUPS)
EVAL-result = case('category' == "RHC", operationName, 'category' == "ControlPlaneRequests" AND 'properties.httpstatusCode' == "204", "No Content", \
                'category' == "DataPlaneRequests", case('properties.statusCode' == "200", "OK", 'properties.statusCode' == "201", "Created", \
                'properties.statusCode' == "204", "No Content", 'properties.statusCode' == "304", "OK", \
                'properties.statusCode' == "400", "Bad Request", 'properties.statusCode' == "404", "Not Found", \
                'properties.statusCode' == "409", "Conflict"), true(), coalesce('properties.result', 'properties.statusCode'))
EVAL-result_id = case('category' IN ("ControlPlaneRequests", "DataPlaneRequests"), coalesce('properties.httpstatusCode', 'properties.statusCode'), \
                'category' == "RHC", operationName)
EVAL-src = case('category' IN ("GremlinRequests", "CassandraRequests", "MongoRequests"), 'properties.address', 'category' == "DataPlaneRequests", 'properties.clientIpAddress')
EVAL-status = case('category' == "ControlPlaneRequests", \
                case('properties.httpstatusCode' IN ("200", "201", "204"), "success", 'properties.httpstatusCode' IN ("0", "202", "400", "404"), "failure"), \
                'category' == "DataPlaneRequests", \
                case('properties.statusCode' IN ("200", "201", "204", "304"), "success", 'properties.statusCode' IN ("400", "404", "409"), "failure"), \
                'category' == "RHC" AND 'operationName' == "Delete", "success", isnotnull(RHCStatus), "success", true(), status)
EVAL-tenant_id = if(('category' IN ("SentShareSnapshots", "ReceivedShareSnapshots") AND isnotnull(detailMessage)) OR 'category' == "Shares", SUBSCRIPTIONS, tenant_id)
EVAL-user = case('category' == "DataPlaneRequests" AND isnotnull('properties.callerId'), 'properties.callerId', \
                'category' == "SentShareSnapshots" AND isnotnull(recipient), recipient, true(), user)
EVAL-user_name = if('category' == "DataPlaneRequests" AND isnotnull('properties.callerId'), 'properties.callerId', null())
EVAL-vendor_account = if('category' == "ReceivedShareSnapshots" AND isnull(detailMessage), null(), coalesce('subscriptionId', 'properties.subscriptionId', 'properties.subscriptionid', SUBSCRIPTIONS))
EVAL-vendor_region = coalesce('properties.region', sourceLocation)


LOOKUP-mscs_azure_monitor_resource_fields_from_category_status = mscs_azure_monitor_resource_fields_from_category_status category, status, operationName OUTPUTNEW change_type, dvc, vendor_product, action
LOOKUP-mscs_azure_monitor_resource_action_from_operation_name = mscs_azure_monitor_resource_action_from_operation_name operationName OUTPUT action
LOOKUP-mscs_azure_monitor_resource_fields_from_category = mscs_azure_monitor_resource_fields_from_category category OUTPUTNEW change_type, dvc, vendor_product
LOOKUP-mscs_cosmosdb_object_category_from_apikindresourcetype = mscs_cosmosdb_object_category_from_apikindresourcetype properties.apiKindResourceType OUTPUTNEW object_category, object_category AS object_attrs

[mscs:consumption:reservation:recommendation]
SHOULD_LINEMERGE = false

[mscs:consumption:billing]
SHOULD_LINEMERGE = false
TIME_PREFIX = \"date\"\:\s*\"
MAX_TIMESTAMP_LOOKAHEAD = 32
TZ = Etc/UTC

[source::...splunk_ta_microsoft-cloudservices_mscs_azure_consumption_*.log*]
sourcetype = mscs:azure:consumption:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

# Metrics

[source::...splunk_ta_microsoft-cloudservices_mscs_azure_metrics_*.log*]
sourcetype = mscs:metrics:log
SHOULD_LINEMERGE = true
BREAK_ONLY_BEFORE = \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d+\s\+\d{4}\slog_level=

[mscs:metrics]
DATETIME_CONFIG = NONE
SHOULD_LINEMERGE = false
KV_MODE = none
INDEXED_EXTRACTIONS = JSON
TRANSFORMS-azure-metric-dimensions = eval_dimensions
METRIC-SCHEMA-TRANSFORMS = metric-schema:extract_mscs_metrics

[mscs:metrics:events]
DATETIME_CONFIG = NONE
SHOULD_LINEMERGE = false
FIELDALIAS-time = timeStamp as time

[mscs:resource:securityGroup]
KV_MODE = json
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id

FIELDALIAS-dest = subscription_id AS dest
FIELDALIAS-family = type AS family
FIELDALIAS-serial = properties.resourceGuid AS serial
FIELDALIAS-status = properties.provisioningState AS status

EVAL-description = "Azure Virtual Network"
EVAL-vendor_product = "Azure Virtual Network"

[mscs:resource:disk]
KV_MODE = json
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id

FIELDALIAS-dest = subscription_id AS dest
FIELDALIAS-family = type AS family
FIELDALIAS-hypervisor_id=properties.hyperVGeneration AS hypervisor_id
FIELDALIAS-mount = id AS mount
FIELDALIAS-parent = managedBy AS parent
FIELDALIAS-read_blocks = properties.diskMBpsReadWrite AS read_blocks
FIELDALIAS-read_ops = properties.diskIOPSReadWrite AS read_ops
FIELDALIAS-serial = properties.uniqueId AS serial
FIELDALIAS-status = properties.diskState AS status
FIELDALIAS-version=properties.hyperVGeneration AS version
FIELDALIAS-write_blocks = properties.diskMBpsReadWrite AS write_blocks
FIELDALIAS-write_ops = properties.diskIOPSReadWrite AS write_ops

EVAL-description = "Azure Virtual Machines"
EVAL-storage = 'properties.diskSizeBytes'/1024/1024
EVAL-vendor_product = "Azure Virtual Machines"

[mscs:resource:image]
KV_MODE = json
DATETIME_CONFIG = NONE
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id

FIELDALIAS-dest = subscription_id AS dest
FIELDALIAS-family = type AS family
FIELDALIAS-hypervisor_id=properties.hyperVGeneration AS hypervisor_id
FIELDALIAS-status = properties.provisioningState AS status
FIELDALIAS-version= properties.hyperVGeneration AS version

EVAL-description = "Azure Virtual Machines"
EVAL-vendor_product = "Azure Virtual Machines"

[mscs:resource:snapshot]
KV_MODE = json
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id

FIELDALIAS-dest = subscription_id AS dest
FIELDALIAS-family = type AS family
FIELDALIAS-status = properties.provisioningState AS status
FIELDALIAS-snapshot = name AS snapshot
FIELDALIAS-time = properties.timeCreated AS time

EVAL-description = "Azure Virtual Machines"
EVAL-size = 'properties.diskSizeBytes'/1024/1024
EVAL-vendor_product = "Azure Virtual Machines"

[mscs:resource:resourceGroup]
KV_MODE = json
REPORT-azure_resource_extract_subscription_id_and_resourcegroup = mscs_extract_fields_from_id

FIELDALIAS-dest = subscription_id AS dest
FIELDALIAS-family = type AS family
FIELDALIAS-status = properties.provisioningState AS status

EVAL-description = "Azure Resource Manager"
EVAL-vendor_product = "Azure Resource Manager"

[mscs:resource:subscriptions]
KV_MODE = json

FIELDALIAS-dest = subscriptionId AS dest
FIELDALIAS-serial = subscriptionId AS serial
FIELDALIAS-status = state AS status

EVAL-description = "Azure Resource Manager"
EVAL-enabled = if(lower(state)=="enabled","yes","no")
EVAL-family = "subscription"
EVAL-vendor_product = "Azure Resource Manager"


[mscs:resource:topology]
KV_MODE = json
SHOULD_LINEMERGE = 0
EXTRACT-topo_subscription_id = \/subscriptions\/(?P<topo_subscription_id>[^\/]+)
EXTRACT-topo_resource_group = \/resourceGroups\/(?P<topo_resource_group>[^\/]+)
EXTRACT-topo_vnet = \/providers\/Microsoft\.Network\/virtualNetworks\/(?P<topo_vnet>[^(\/|\")]+)
EXTRACT-topo_subnet = \/subnets\/(?P<topo_subnet>[^(\/|\")]+)
EVAL-resourceType = case(\
    match(id,"\/subscriptions\/([^\/]+)\/resourceGroups\/([^\/]+)\/providers\/Microsoft\.Network\/virtualNetworks\/([^\/]+)\/subnets\/([^\/]+)$"), "Subnet", \
    match(id,"\/subscriptions\/([^\/]+)\/resourceGroups\/([^\/]+)\/providers\/Microsoft\.Compute\/virtualMachines\/([^\/]+)$"), "Virtual Machine", \
    match(id,"\/subscriptions\/([^\/]+)\/resourceGroups\/([^\/]+)\/providers\/Microsoft\.Network\/virtualNetworks\/([^\/]+)$"), "Virtual Network", \
    match(id,"\/subscriptions\/([^\/]+)\/resourceGroups\/([^\/]+)\/providers\/Microsoft\.Network\/networkInterfaces\/([^\/]+)$"), "Network Interface", \
    match(id,"\/subscriptions\/([^\/]+)\/resourceGroups\/([^\/]+)\/providers\/Microsoft\.Network\/networkSecurityGroups\/([^\/]+)$"), "Network Security Group", \
    match(id,"\/subscriptions\/([^\/]+)\/resourceGroups\/([^\/]+)\/providers\/Microsoft\.Network\/networkSecurityGroups\/([^\/]+)\/securityRules\/([^\/]+)$"), "Network Security Rule"\
    )

[mscs:resource:resourceGraph]
KV_MODE = json
TRUNCATE = 9999999
DATETIME_CONFIG = CURRENT
