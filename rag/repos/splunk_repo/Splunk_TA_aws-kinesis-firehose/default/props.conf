[aws:firehose:json]
pulldown_type = true
INDEXED_EXTRACTIONS = json
SHOULD_LINEMERGE = false
category = Structured
description = JavaScript Object Notation format. For more information, visit http://json.org/

[aws:firehose:text]
SHOULD_LINEMERGE = false

########################################
###      CloudWatch - Events      ###
########################################
[aws:firehose:cloudwatchevents]
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
TIME_PREFIX = \"time\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
MAX_TIMESTAMP_LOOKAHEAD = 40
KV_MODE = json

######################################
###      CloudWatch - VPCFlow      ###
######################################
[aws:cloudwatchlogs:vpcflow]
SHOULD_LINEMERGE = false
TIME_FORMAT = %s
TIME_PREFIX = ^(?>\S+\s){10}
MAX_TIMESTAMP_LOOKAHEAD = 10

## Extraction ##
################
EXTRACT-vpcflowlog=^\s*(\d{4}-\d{2}-\d{2}.\d{2}:\d{2}:\d{2}[.\d\w]*)?\s*(?<version>[^\s]+)\s+(?<account_id>[^\s]+)\s+(?<interface_id>[^\s]+)\s+(?<src_ip>[^\s]+)\s+(?<dest_ip>[^\s]+)\s+(?<src_port>[^\s]+)\s+(?<dest_port>[^\s]+)\s+(?<protocol_code>[^\s]+)\s+(?P<packets>[^\s]+)\s+(?<bytes>[^\s]+)\s+(?<start_time>[^\s]+)\s+(?<end_time>[^\s]+)\s+(?<vpcflow_action>[^\s]+)\s+(?<log_status>[^\s]+)
REPORT-region = extract-region

## Aliases ##
#############
# aws_account_id - unify account ID field
FIELDALIAS-aws-account-id = account_id as aws_account_id
FIELDALIAS-dest = dest_ip as dest
FIELDALIAS-src = src_ip as src
FIELDALIAS-user_id = account_id as user_id
FIELDALIAS-vendor_account = account_id as vendor_account

## Eval ##
##########
EVAL-app = "AWS VPC Flow Logs"
EVAL-bytes = if(bytes!="-", bytes, "unknown")
EVAL-dest = if(dest!="-", dest, "unknown")
EVAL-dest_ip = if(dest_ip!="-", dest_ip, "unknown")
EVAL-dest_port = if(dest_port!="-", dest_port, "unknown")
EVAL-duration=end_time-start_time
EVAL-dvc = "VPC Flow"
EVAL-packets = if(packets!="-", packets, "unknown")
EVAL-protocol_code = if(protocol_code!="-", protocol_code, "unknown")
EVAL-protocol_version = case(match(dest_ip,"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"),"IPV4",dest_ip="-" OR dest_ip="unknown", "unknown", match(dest_ip,"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))"),"IPV6")
EVAL-src = if(src!="-", src, "unknown")
EVAL-src_port = if(src_port!="-", src_port, "unknown")
EVAL-src_ip = if(src_ip!="-", src_ip, "unknown")
EVAL-vendor_product = "AWS VPC Flow Logs"
EVAL-vpcflow_action = if(vpcflow_action!="-", vpcflow_action, "unknown")


## Lookups ##
##########
LOOKUP-action = aws_firehose_kinesis_vpcflow_action_lookup vpcflow_action OUTPUT action
LOOKUP-protocol-and-transport = aws_firehose_kinesis_vpcflow_protocol_code_lookup protocol_code OUTPUT protocol transport protocol_full_name

##################################
###         CloudTrail         ###
##################################

# Set Source to aws_firehose_cloudtrail when ingesting data
[source::aws_firehose_cloudtrail]
TRANSFORMS-extract_detail_from_cloudwatch_events=extract_detail_from_cloudwatch_events
TRANSFORMS-use_for_cloudtrail_sourcetype_change=use_for_cloudtrail_sourcetype_change
LINE_BREAKER=(([\r\n]+)|(?={"version":"[\d.]+","id":))
SHOULD_LINEMERGE = false
NO_BINARY_CHECK = false
TRUNCATE = 8388608
TIME_PREFIX = \"eventTime\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
MAX_TIMESTAMP_LOOKAHEAD = 28
sourcetype = aws:cloudtrail

[aws:cloudtrail]
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
TIME_PREFIX = \"eventTime\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
MAX_TIMESTAMP_LOOKAHEAD = 28
KV_MODE = json

## Extraction ##
################
# non-CIM
# AWS ARN Scheme
# arn:partition:service:region:account-id:resource
# arn:partition:service:region:account-id:resourcetype/resource
# arn:partition:service:region:account-id:resourcetype:resource
REPORT-user-for-aws-cloudtrail-acctmgmt = user-for-aws-cloudtrail-acctmgmt
REPORT-user-for-aws-cloudtrail-acctmgmt-2 = user-for-aws-cloudtrail-acctmgmt-2

## Aliases ##
#############
# non-CIM
FIELDALIAS-requestParameters-for-aws-cloudtrail = requestParameters AS desc
FIELDALIAS-eventTime-for-aws-cloudtrail = eventTime AS start_time
FIELDALIAS-responseElements.credentials.accessKeyId-for-aws-cloudtrail = responseElements.credentials.accessKeyId AS temp_access_key
FIELDALIAS-userIdentity.accessKeyId-for-aws-cloudtrail = userIdentity.accessKeyId AS user_access_key

# Common CIM
FIELDALIAS-eventType-for-aws-cloudtrail-app = eventType AS app
FIELDALIAS-eventSource-for-aws-cloudtrail-dvc = eventSource AS dvc
FIELDALIAS-awsRegion-for-aws-cloudtrail_region = awsRegion AS region
FIELDALIAS-eventName-for-aws-cloudtrail_signature = eventName AS signature
FIELDALIAS-sourceIPAddress-for-aws-cloudtrail-src = sourceIPAddress AS src
FIELDALIAS-sourceIPAddress-for-aws-cloudtrail-src_ip = sourceIPAddress AS src_ip
FIELDALIAS-accountId_user_group_id = userIdentity.accountId AS user_group_id
FIELDALIAS-userIdentity_type-for-aws-cloudtrail_user_type = userIdentity.type AS user_type
FIELDALIAS-awsRegion-for-aws-cloudtrail_vendor_region =awsRegion AS vendor_region

# Authentication CIM
FIELDALIAS-errorMessage-for-aws-cloudtrail-reason = errorMessage AS reason

# Change CIM
FIELDALIAS-eventName-for-aws-cloudtrail-command = eventName AS command
FIELDALIAS-requestParameters.instanceType-for-aws-cloudtrail-instance_type = requestParameters.instanceType as instance_type
FIELDALIAS-requestParameters.instancesSet.items{}.imageId-for-aws-cloudtrail-image_id = requestParameters.instancesSet.items{}.imageId as image_id
FIELDALIAS-errorMessage-for-aws-cloudtrail-result = errorMessage AS result
FIELDALIAS-errorCode-for-aws-cloudtrail-result_id = errorCode AS result_id

## Eval ##
##########
# non-CIM
EVAL-msg = coalesce('errorCode',"success")
EVAL-user_arn = coalesce('userIdentity.arn', 'requestParameters.roleArn')
EVAL-userName = coalesce('userIdentity.userName', 'requestParameters.sourceIdentity','userIdentity.sessionContext.sessionIssuer.userName', if(isnull('userIdentity.arn'), mvindex(split(mvindex(split('requestParameters.roleArn',":"), -1), "/"), -1), mvindex(split(mvindex(split('userIdentity.arn',":"), -1), "/"), -1)))

# Common CIM
EVAL-user_agent=coalesce(userAgent,'userAgent{}')
EVAL-user = case(eventName="PutBucketAcl",'userIdentity.userName',\
                 eventName IN("CreateLoadBalancerListeners","CreateLoadBalancerPolicy","CreateLogGroup","CreateLogStream","GetBucketEncryption"),'userIdentity.sessionContext.sessionIssuer.userName',\
                 eventName="CreateLoginProfile",'responseElements.loginProfile.userName',\
                 eventName="CreateUser",'responseElements.user.userName',\
                 (eventName="DeleteUser" OR  eventName="DeleteLoginProfile"),'requestParameters.userName',\
                 eventName="UpdateUser",'requestParameters.newUserName',\
                 eventName="CreateAccessKey",coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                 (eventName="ListSigningCertificates" OR eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="ListSigningCertificates"),replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                 eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                 eventName="CreateNetworkInterface" OR eventName="DeleteNetworkInterface",'userIdentity.sessionContext.sessionIssuer.userName',\
                 eventName="AssumeRole" AND 'userIdentity.type'="AssumedRole",mvindex(split('requestParameters.roleArn', "/"), -1),\
                 eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity",mvindex(split('responseElements.assumedRoleUser.arn',"/"), -1),\
                 eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnotnull('additionalEventData.LoginTo'),coalesce(mvindex(split('userIdentity.principalId', ":"), 1), 'userIdentity.userName'),\
                 eventType="AwsConsoleSignIn" OR eventName IN("ListAliases","ListRoles"),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName'),\
                 like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName'),\
                 true(),'userIdentity.userName')
EVAL-user_id =  case((eventName="ConsoleLogin" AND 'userIdentity.type'="IAMUser") OR eventName="CheckMfa",coalesce(mvindex(split('userIdentity.principalId', ":"), 0), 'userIdentity.accountId'),\
                ((eventName="ConsoleLogin" OR eventName="ListAliases" OR eventName="ListRoles" OR eventName="DeleteNetworkInterface") AND 'userIdentity.type'="AssumedRole"), coalesce(mvindex(split('userIdentity.sessionContext.sessionIssuer.principalId', ":"), 0), mvindex(split('userIdentity.principalId', ":"), 0)),\
                eventName="CreateUser", 'responseElements.user.userId',\
                eventName="DeleteUser" OR eventName="UpdateUser", 'requestParameters.userName',\
                eventType="AwsApiCall",mvindex(split('responseElements.assumedRoleUser.assumedRoleId', ":"), 0),\
                true(), 'userIdentity.userName')
EVAL-user_name = case(eventName="ListRoles",mvindex(split('userIdentity.principalId', ":"), 0),\
                     eventName="CreateLoginProfile", 'responseElements.loginProfile.userName',\
                     eventName="CreateUser",'responseElements.user.userName',\
                     (eventName="DeleteUser" OR  eventName="DeleteLoginProfile"),'requestParameters.userName',\
                     eventName="UpdateUser",'requestParameters.newUserName',\
                     eventName="CreateAccessKey",coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                     (eventName="ListSigningCertificates" OR eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="ListSigningCertificates"),replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                     eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                     true(),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName',if(isnull('userIdentity.arn'),mvindex(split(mvindex(split('requestParameters.roleArn',":"), -1), "/"), -1), mvindex(split(mvindex(split('userIdentity.arn',":"), -1), "/"), -1))))
EVAL-user_type = case((eventName="CreateLoginProfile" OR like(eventName, "%User") OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases"), null(),\
                      (eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo')), 'userIdentity.sessionContext.sessionIssuer.type',\
                      eventType="AwsConsoleSignIn" , 'userIdentity.type',\
                      like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"), 'userIdentity.type',\
                      eventName IN("ListAliases","ListRoles", "DeleteNetworkInterface"),'userIdentity.sessionContext.sessionIssuer.type',\
                      like(eventName, "AssumeRole%"),mvjoin(coalesce('resources{}.type',mvindex(split('responseElements.assumedRoleUser.arn', "/"), 1)), ","),\
                      true(),'userIdentity.type')
EVAL-vendor_account = coalesce('userIdentity.accountId', 'recipientAccountId')
EVAL-vendor_product = "AWS CloudTrail" 


# Authentication CIM
EVAL-aws_account_id = if('userIdentity.type'="AWSAccount" OR 'userIdentity.type'="AWSService", recipientAccountId, 'userIdentity.accountId')

# Change CIM
# Supporting ES A&I, object_id mapping is replicated in the dest field. Default to dest=eventSource
EVAL-dest = case(eventName="PutBucketAcl",'requestParameters.Host',\
                 eventName="GetBucketEncryption",'requestParameters.host{}',\
                 eventName="RunInstances", coalesce('responseElements.instancesSet.items{}.instanceId', 'eventSource'),\
                 eventName="StartInstances", coalesce('requestParameters.instancesSet.items{}.instanceId', 'eventSource'),\
                 eventName="StopInstances" OR eventName="TerminateInstances" OR eventName="RebootInstances",'requestParameters.instancesSet.items{}.instanceId',\
                 like(eventName, "%Volume"),coalesce('requestParameters.instanceId', 'eventSource'),\
                 like(eventName, "%Bucket"),'requestParameters.host{}',\
                 like(eventName, "Put%"),coalesce('requestParameters.host{}', 'requestParameters.Host'),\
                 eventName="CreateUser" OR eventName="UpdateUser" OR eventName="DeleteUser",'eventSource',\
                 eventName="DeleteLoginProfile",'requestParameters.userName',\
                 eventName="ConsoleLogin" OR eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" OR eventName="CheckMfa" OR eventName="ListAliases",coalesce('additionalEventData.LoginTo', 'eventSource'),\
                 eventName="DeleteSecurityGroup", 'eventSource',\
                 true(), eventSource)
# object field mappings differ for various Change event types, and must be specified uniquely.
EVAL-object = case(like(eventName, "%Instances"),if((eventName="RunInstances"),coalesce('responseElements.instancesSet.items{}.instanceId', 'eventSource'),coalesce('requestParameters.instancesSet.items{}.instanceId', 'eventSource')),\
                   like(eventName, "%SecurityGroup%"),coalesce('responseElements.groupId', 'requestParameters.groupId'),\
                   like(eventName, "%Volume"),if((eventName="CreateVolume"),'responseElements.volumeId', 'requestParameters.volumeId'),\
                   like(eventName, "%NetworkAcl%"),coalesce('requestParameters.networkAclId', 'responseElements.networkAcl.networkAclId'),\
                   (like(eventName, "%Bucket%") OR eventName="PutObject"), 'requestParameters.bucketName',\
                   eventName="CreateUser",'responseElements.user.userName',\
                   eventName="DeleteUser" OR eventName="DeleteLoginProfile",'requestParameters.userName',\
                   eventName="UpdateUser",'requestParameters.newUserName',\
                   eventName="CreateLoginProfile",'responseElements.loginProfile.userName',\
                   eventName="CreateAccessKey", coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                   eventName="CreateVirtualMFADevice",mvindex(split('responseElements.virtualMFADevice.serialNumber', "/"), 1),\
                   eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                   eventName="CreateChangeSet",'requestParameters.stackName',\
                   eventName="CreateDeliveryStream",'requestParameters.deliveryStreamName',\
                   eventName="CreateKeyspace",'requestParameters.keyspaceName',\
                   eventName="CreateLoadBalancerListeners",'requestParameters.loadBalancerName',\
                   eventName="CreateLoadBalancerPolicy",'requestParameters.loadBalancerName',\
                   eventName="CreateQueue",'requestParameters.queueName',\
                   eventName="CreateTable",'requestParameters.tableName',\
                   eventName="CreateFunction20150331",'requestParameters.functionName',\
                   eventName="CreateLogGroup",'requestParameters.logGroupName',\
                   eventName="CreateLogStream",'requestParameters.logStreamName',\
                   eventName="CreateNetworkInterface",'responseElements.networkInterface.networkInterfaceId',\
                   eventName="DeleteNetworkInterface",'requestParameters.networkInterfaceId',\
                   eventName="ListSigningCertificates",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"))
# object_id field mappings differ for various Change event types, and must be specified uniquely.
EVAL-object_id = case(eventName="RunInstances",'responseElements.instancesSet.items{}.instanceId',\
                      like(eventName, "%Instances"),coalesce('requestParameters.instancesSet.items{}.instanceId','eventSource'),\
                      like(eventName, "%SecurityGroup%"),coalesce('responseElements.groupId', 'requestParameters.groupId'),\
                      like(eventName, "%Volume"), if((eventName="CreateVolume"), 'responseElements.volumeId', 'requestParameters.volumeId'),\
                      like(eventName, "%NetworkAcl%"), coalesce('requestParameters.networkAclId', 'responseElements.networkAcl.networkAclId'),\
                      (like(eventName, "%Bucket%") OR eventName="PutObject"),'requestParameters.bucketName',\
                      eventName="CreateUser", 'responseElements.user.userId',\
                      eventName="DeleteUser" OR eventName="DeleteLoginProfile", 'requestParameters.userName',\
                      eventName="CreateLoginProfile", 'responseElements.loginProfile.userName',\
                      eventName="UpdateUser", 'requestParameters.newUserName',\
                      eventName="CreateAccessKey", coalesce('responseElements.accessKey.accessKeyId',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                      eventName="CreateVirtualMFADevice", mvindex(split('responseElements.virtualMFADevice.serialNumber', "/"), 1),\
                      eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases", replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                      eventName="CreateChangeSet",'requestParameters.stackName',\
                      eventName="CreateDeliveryStream",'requestParameters.deliveryStreamName',\
                      eventName="CreateKeyspace",'requestParameters.keyspaceName',\
                      eventName="CreateLoadBalancerListeners",'requestParameters.loadBalancerName',\
                      eventName="CreateLoadBalancerPolicy",'requestParameters.loadBalancerName',\
                      eventName="CreateQueue",'requestParameters.queueName',\
                      eventName="CreateTable",'requestParameters.tableName',\
                      eventName="CreateFunction20150331",'requestParameters.functionName',\
                      eventName="CreateLogGroup",'requestParameters.logGroupName',\
                      eventName="CreateLogStream",'requestParameters.logStreamName',\
                      eventName="CreateNetworkInterface",'responseElements.networkInterface.networkInterfaceId',\
                      eventName="DeleteNetworkInterface",'requestParameters.networkInterfaceId',\
                      eventName="ListSigningCertificates",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"))

# Change CIM - Network dataset
EVAL-dest_ip_range = case(like(eventName, "%SecurityGroupEgress"), 'requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp',\
                         (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true"),  'requestParameters.cidrBlock')
EVAL-dest_port_range = case(like(eventName, "%SecurityGroupEgress%"), mvappend('requestParameters.ipPermissions.items{}.toPort','requestParameters.ipPermissions.items{}.fromPort'),\
                            (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true"), mvappend('requestParameters.portRange.from','requestParameters.portRange.to'))
EVAL-direction = case(((like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false") OR like(eventName, "%SecurityGroupIngress")), "Inbound",\
                      ((like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true") OR like(eventName, "%SecurityGroupEgress")), "Outbound")
EVAL-object_attrs =  case(eventName="CreateKeyspace",replace('requestParameters.rawQuery', ".*(REPLICATION).*class.*:\s*['\"](.*)['\"].*", "\1=\2"),\
                        eventName IN ("CreateUser","DeleteUser","ListSigningCertificates","ListAccessKeys","GetUser","GetAccountSummary", "ListAccountAliases","ListRoles"),"user",\
                        eventName="CreateLoginProfile","passwordResetRequired=". 'responseElements.loginProfile.passwordResetRequired',\
                        eventName="UpdateUser", "userName=". 'requestParameters.userName',\
                        (eventName="CreateAccessKey" AND 'errorCode'="AccessDenied"), "user",\
                        eventName="CreateAccessKey","status=". 'responseElements.accessKey.status',\
                        eventName="CreateVirtualMFADevice", "virtualMFADevice",\
                        eventName="CreateNetworkAcl", if('responseElements.networkAcl.isDefault'== "false", "non-default", "default"),\
                        eventName="CreateNetworkAclEntry", "ruleAction=".'requestParameters.ruleAction',\
                        eventName="DeleteNetworkAclEntry", "ruleNumber=".'requestParameters.ruleNumber',\
                        eventName="ReplaceNetworkAclAssociation", "associationId=".'responseElements.newAssociationId',\
                        like(eventName, "RevokeSecurityGroup%") OR like(eventName, "AuthorizeSecurityGroup%"),"ipPermissions",\
                        eventName="DetachVolume","device=".'responseElements.device',\
                        eventName="AttachVolume","device=".'requestParameters.device'.", deleteOnTermination=".'requestParameters.deleteOnTermination',\
                        eventName="CreateVolume", "volumeType=".'responseElements.volumeType',\
                        eventName IN ("StartInstances", "StopInstances", "TerminateInstances", "RebootInstances"), "EC2",\
                        like(eventName, "%Volume"), "volume",\
                        eventName IN ("DeleteBucket", "CreateBucket"), "bucket",\
                        eventName="RunInstances" AND responseElements="", "subnetId=".'requestParameters.subnetId'.", iamInstanceProfile=".'requestParameters.iamInstanceProfile.name',\
                        eventName="RunInstances", "macAddress=".mvjoin('responseElements.instancesSet.items{}.networkInterfaceSet.items{}.macAddress',", macAddress=").", "."privateIpAddress=".mvjoin('responseElements.instancesSet.items{}.networkInterfaceSet.items{}.privateIpAddress',", privateIpAddress="),\
                        eventName="PutBucketPublicAccessBlock", "RestrictPublicBuckets=".'requestParameters.PublicAccessBlockConfiguration.RestrictPublicBuckets'.", BlockPublicPolicy=".'requestParameters.PublicAccessBlockConfiguration.BlockPublicPolicy'.", BlockPublicAcls=".'requestParameters.PublicAccessBlockConfiguration.BlockPublicAcls'.", IgnorePublicAcls=".'requestParameters.PublicAccessBlockConfiguration.IgnorePublicAcls',\
                        eventName="PutBucketAcl","AccessControlList",\
                        eventName="CreateChangeSet","changeSetName=".'requestParameters.changeSetName',\
                        eventName="CreateDeliveryStream","SplunkDestinationConfiguration",\
                        eventName="CreateLoadBalancerListeners","listeners",\
                        eventName="CreateQueue","message_queue",\
                        eventName="CreateTable","keyspaceName=".'requestParameters.keyspaceName',\
                        eventName="CreateLoadBalancerPolicy","policyName=".'requestParameters.policyName',\
                        eventName="CreateFunction20150331","lambda-console:blueprint".",".'requestParameters.tags.lambda-console:blueprint',\
                        eventName="CreateLogGroup","log_group",\
                        eventName="CreateLogStream","logGroupName=".'requestParameters.logGroupName',\
                        eventName="GetBucketEncryption","bucket",\
                        eventName="PutObject", "x-amz-storage-class=".'requestParameters.x-amz-storage-class',\
                        eventName="DeleteNetworkAcl", "ACL",\
                        eventName="ReplaceNetworkAclEntry","ruleNumber=".'requestParameters.ruleNumber'.", egress=".'requestParameters.egress'.", ruleAction=".'requestParameters.ruleAction',\
                        eventName="CreateSecurityGroup", "groupName=".'requestParameters.groupName',\
                        eventName="DeleteSecurityGroup", "security_group",\
                        eventName="DeleteNetworkInterface", "network_interface",\
                        eventName="CreateNetworkInterface", "description=".'responseElements.networkInterface.description'.", macAddress=".'responseElements.networkInterface.macAddress'.", privateIpAddress=".'responseElements.networkInterface.privateIpAddress')
EVAL-protocol = if(like(eventName, "%SecurityGroup%"), 'requestParameters.ipPermissions.items{}.ipProtocol', null())
EVAL-protocol_code = if(like(eventName, "%NetworkAcl%"), 'requestParameters.aclProtocol', null())
EVAL-rule_action = coalesce('responseElements.networkAcl.entrySet.items{}.ruleAction','requestParameters.ruleAction')
EVAL-src_ip_range = case(like(eventName, "%SecurityGroupIngress"), 'requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp',\
                    (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false"),  'requestParameters.cidrBlock')
EVAL-src_port_range = case(like(eventName, "%SecurityGroupIngress%"), mvappend('requestParameters.ipPermissions.items{}.toPort','requestParameters.ipPermissions.items{}.fromPort'),\
                      (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false"), mvappend('requestParameters.portRange.from','requestParameters.portRange.to'))

# Authentication CIM
# If eventName!=ConsoleLogin then authentication_method will be left blank
# [aws_cloudtrail_multifactor_auth]
# TAGS multifactor, cloud
EVAL-authentication_method = case((('additionalEventData.MFAUsed'="Yes" AND eventName="ConsoleLogin") OR eventName="CheckMfa"), "MFA",\
                            ('additionalEventData.MFAUsed'="No" AND eventName="ConsoleLogin") OR ((eventName="AssumeRole" OR eventName="ListAliases") AND 'userIdentity.type'="AssumedRole" AND 'userIdentity.sessionContext.attributes.mfaAuthenticated'="false"), "SFA")

EVAL-errorCode = coalesce('errorCode', if(like('responseElements.ConsoleLogin', "Failure"), "failure", "success"), "success")

# eventtype for AssumeRole events - CIM fields src_user, src_user_id, src_user_type, and user_role. Only mapped for AssumeRole* events. They're blank for non-AssumeRole* events
# [eventtype::aws_cloudtrail_assumeRole_auth]
# TAGS assume_role
EVAL-src_user = case(eventName="PutBucketAcl",'userIdentity.userName',\
                    eventName IN("CreateLoadBalancerListeners", "GetBucketEncryption", "CreateLogStream", "CreateLogGroup", "CreateLoadBalancerPolicy"),'userIdentity.sessionContext.sessionIssuer.userName',\
                    eventName IN("CreateUser","CreateLoginProfile", "DeleteNetworkInterface"), mvindex(split('userIdentity.principalId', ":"), 1),\
                    eventName="DeleteLoginProfile",'requestParameters.userName',\
                    eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                    eventName="CreateNetworkInterface",'userIdentity.sessionContext.sessionIssuer.userName',\
                    like(eventName, "AssumeRole%"), coalesce('userIdentity.userName', 'requestParameters.sourceIdentity', 'userIdentity.sessionContext.sessionIssuer.userName'),\
                    (eventName="ConsoleLogin" AND  isnotnull('additionalEventData.LoginTo')), null(),\
                    eventName="ConsoleLogin" AND isnull('additionalEventData.LoginTo'), mvindex(split('userIdentity.principalId', ":"), 1),\
                    eventName IN("ListAliases","ListRoles"),mvindex(split('userIdentity.arn', "/"), -1),\
                    like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"),coalesce('userIdentity.userName', 'userIdentity.sessionContext.sessionIssuer.userName'),\
                    true(),'userIdentity.userName')
EVAL-src_user_id = case(eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" OR eventName="ListAliases", if((mvcount(split('userIdentity.principalId', ":")) == 1)\
                        OR (mvcount(split('userIdentity.principalId', ":")) == 2), mvindex(split('userIdentity.principalId', ":"), 0),null()),\
                        eventName="AssumeRole" AND 'userIdentity.type'="IAMUser",mvindex(split('userIdentity.principalId', ":"), 0),\
                        eventName="AssumeRole" AND 'userIdentity.type'="AssumedRole",mvindex(split('userIdentity.sessionContext.sessionIssuer.principalId', ":"), 0),\
                        eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo'), mvindex(split('userIdentity.principalId', ":"), 0),\
                        like(eventName,"%User") AND 'userIdentity.type'!="AWSService",'userIdentity.principalId')
EVAL-src_user_name = case((eventName="DeleteUser" OR eventName="UpdateUser" OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases"), 'userIdentity.userName',\
                           eventName IN("ListAliases","ListRoles"),mvindex(split('userIdentity.arn', "/"), -1),\
                           eventName="CreateLoginProfile" OR eventName="CreateUser", mvindex(split('userIdentity.principalId', ":"), 1))
EVAL-src_user_role = if((eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity") AND 'userIdentity.type'="AssumedRole", 'userIdentity.arn', null())
EVAL-src_user_type = case((eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" or eventName="ListAliases" OR eventName="ListRoles" OR eventName="CreateLoginProfile" OR like(eventName, "%User") OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="DeleteNetworkInterface") AND 'userIdentity.type'!="AWSService",'userIdentity.type',\
                     (eventType="AwsConsoleSignIn" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo')),'userIdentity.type') 
EVAL-user_role = if(eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity", case('userIdentity.type'="AssumedRole", 'requestParameters.roleArn', 'userIdentity.type'!="AWSService", 'responseElements.assumedRoleUser.arn', 'userIdentity.type'="AWSService", null()), null())

## Lookups ##
#############
# non-CIM
LOOKUP-vendor-product-for-aws-cloudtrail = vendor-product-for-aws-cloudtrail sourcetype OUTPUTNEW vendor, product
LOOKUP-changeType-for-aws-cloudtrail-lookup = eventName-change_type-for-aws-cloudtrail eventName OUTPUT change_type
LOOKUP-changetype-for-aws-cloudtrail = change_type-for-aws-cloudtrail eventSource OUTPUTNEW change_type

# Common CIM
LOOKUP-action-status-for-aws-cloudtrail = aws-cloudtrail-action-status-lookup eventName, errorCode OUTPUTNEW action, status

# Change CIM
LOOKUP-object_category-for-aws-cloudtrail = aws_cloudtrail_eventname_lookup eventName OUTPUTNEW object_category

# Change CIM - Network dataset
LOOKUP-protocol-for-aws-cloudtrail = aws_firehose_kinesis_vpcflow_protocol_code_lookup protocol_code OUTPUT protocol

########################################
###      CloudWatch - GuardDuty      ###
########################################
[source::aws_cloudwatchevents_guardduty]
TRANSFORMS-extract_detail_from_cloudwatch_events=extract_detail_from_cloudwatch_events
TRANSFORMS-use_for_guardduty_sourcetype_change=use_for_guardduty_sourcetype_change
LINE_BREAKER=(([\r\n]+)|(?={"version":"[\d.]+","id":))
SHOULD_LINEMERGE = false
NO_BINARY_CHECK = false
TRUNCATE = 8388608
TIME_PREFIX = \"time\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
MAX_TIMESTAMP_LOOKAHEAD = 40

[aws:cloudwatch:guardduty]
KV_MODE = json
SHOULD_LINEMERGE = 0

## Extraction ##
################
# Intrusion Detection CIM
# transforms entries for extracting smaller details
REPORT-aws_guardduty_details = aws_guardduty_details
REPORT-aws_guardduty_objects = aws_guardduty_object
REPORT-aws_guardduty_affectedResources = aws_guardduty_affectedResources, aws_guardduty_key_value, aws_guardduty_count_aws

## Aliases ##
#############
# non-CIM
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_6 = resource.instanceDetails.availabilityZone AS aws_az
FIELDALIAS-gd-resource-agg-inst = resource.instanceDetails.instanceId as instanceId
FIELDALIAS-lat = service.action.awsApiCallAction.remoteIpDetails.geoLocation.lat AS lat service.action.networkConnectionAction.remoteIpDetails.geoLocation.lat AS lat service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.geoLocation.lat AS lat
FIELDALIAS-lon = service.action.awsApiCallAction.remoteIpDetails.geoLocation.lon AS lon service.action.networkConnectionAction.remoteIpDetails.geoLocation.lon AS lon service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.geoLocation.lon AS lon
FIELDALIAS-gd-resource-agg-user = resource.accessKeyDetails.userName as userName
FIELDALIAS-region = region as region
FIELDALIAS-gd-attacker-ip1 = service.action.awsApiCallAction.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-gd-attacker-ip2 = service.action.networkConnectionAction.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-gd-attacker-ip3 = service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-gd-attacker-ip4 = service.action.awsApiCallAction.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-raw_gd_type = type AS raw_gd_type

#fieldaliases to more easily work with API as needed
FIELDALIAS-accountid = accountId as aws_account_id
FIELDALIAS-detectorId = service.detectorId as detectorId
FIELDALIAS-findingType = type as finding_category
FIELDALIAS-findingId = id as findingId

# Common CIM
#GENERIC FIELDS THAT ARE COMMON, GET IT?!
# Changed to attacker_domain - standardizing on new definition of dest
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_2 = resource.instanceDetails.networkInterfaces{}.privateDnsName AS attacker_domain
FIELDALIAS-aws-guardduty-body = description AS body
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_7 = resource.instanceDetails.networkInterfaces{}.publicIp as dest_ip
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_5 = resource.instanceDetails.networkInterfaces{}.vpcId AS dest_zone
FIELDALIAS-aws-guardduty-vendor_account = accountId as vendor_account
FIELDALIAS-aws-guardduty-vendor_region = region AS vendor_region

# Alerts CIM - https://docs.splunk.com/Documentation/CIM/4.18.0/User/Alerts
# the fields description, id are automatically mapped
# TAGS alert
#SEVERITY ID
FIELDALIAS-aws-guardduty-severity_id = severity AS severity_id
FIELDALIAS-gd-type-subj = type AS subject
FIELDALIAS-user = resource.accessKeyDetails.userName AS user

# Intrusion Detection CIM - http://docs.splunk.com/Documentation/CIM/4.9.1/User/IntrusionDetection
#TAGS ids, attack
#INCLUDES CLOUDTRAIL/API CALLS AND FLOW ANALYSIS FOR EC2
FIELDALIAS-gd-category = type AS category
# ODD FIELDS - categorizing outbound DNS request as "dest"
# Changed to outbound_attacker_domain - standardizing on new definition of dest
FIELDALIAS-gd-ec2-attacker-domain = service.action.dnsRequestAction.domain as outbound_attacker_domain
#NOTE THAT THIS IS THE INTERNAL IP OF THE AWS EC2 INSTANCE - YOU MAY NEED TO CONFIGURE THIS
#TO BETTER SUPPORT YOUR USE CASES
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_3 = resource.instanceDetails.networkInterfaces{}.privateIpAddresses{}.privateIpAddress AS dest_ip_internal
# Changed to ct_user for standardizing on new definition of user
FIELDALIAS-ctuser =  resource.accessKeyDetails.userName AS ct_user

## Eval ##
##########
# non-CIM
EVAL-awsresource = coalesce('resource.instanceDetails.instanceId', 'resource.accessKeyDetails.userName')

# Common CIM
EVAL-app = "AWS GuardDuty"
#SEVERITY FOR ALERTS AND INTRUSION DETECTION
EVAL-severity = case(severity_id<4, "low", severity_id<7, "medium", severity_id<9, "high")

# Alerts CIM
EVAL-findingType = type
EVAL-src = case('service.resourceRole'="ACTOR", case('resource.resourceType'="Instance", 'resource.instanceDetails.instanceId', 'resource.resourceType'="AccessKey",\
            'resource.accessKeyDetails.principalId', 'resource.resourceType'="S3Bucket", coalesce('resource.s3BucketDetails{}.name', 'resource.s3BucketDetails{}.arn'), 1==1, ""),\
            'service.resourceRole'="TARGET", coalesce(case(match(description, "EC2 instance(?:.*?) communicating with IP address ((?:\d+.){3}(?:\d))"), instanceId), case(match(description, "EC2 instance(?:.*?) has attempted to communicate"), instanceId), case(match(description, "EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d))"), instanceId), 'service.action.awsApiCallAction.remoteIpDetails.ipAddressV4', 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4',\
            'service.action.networkConnectionAction.localIpDetails.ipAddressV4'))
EVAL-src_name = case('service.resourceRole'="ACTOR" AND 'resource.resourceType'="AccessKey", 'resource.accessKeyDetails.userName',\
                match(description, "(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|EC2 instance(?:.*?) communicating with IP address ((?:\d+.){3}(?:\d))|(EC2 instance(?:.*?) Denial of Service)"), instanceId)
EVAL-src_ip = if(match(description, "(EC2 instance(?:.*?) communicating with IP address ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|(Denial of Service)"), null(),\
                coalesce('service.action.awsApiCallAction.remoteIpDetails.ipAddressV4', 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4', 'service.action.networkConnectionAction.localIpDetails.ipAddressV4', 'service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.ipAddressV4'))

# Aliased type above into raw_gd_type
EVAL-signature = if(severity_id < 8 AND subject!="UnauthorizedAccess:EC2/SSHBruteForce", title, subject)
EVAL-signature_id = if(severity_id < 8 AND subject!="UnauthorizedAccess:EC2/SSHBruteForce", subject, detectorId)
EVAL-type = if(severity_id < 5, "alert", "alarm")
EVAL-user_name = if('resource.resourceType'="AccessKey", 'resource.accessKeyDetails.userName', null())
EVAL-vendor_product = "AWS GuardDuty"

# Intrusion Detection CIM
#TAGS ids, attack
#INCLUDES CLOUDTRAIL/API CALLS AND FLOW ANALYSIS FOR EC2
EVAL-dvc = "AWS GuardDuty"
EVAL-ids_type = "network"
#NOTE THAT THIS IS THE INTERNAL IP OF THE AWS EC2 INSTANCE - YOU MAY NEED TO CONFIGURE THIS
#TO BETTER SUPPORT YOUR USE CASES
# Changed to src_intrusion for standardizing on new definition of src
EVAL-src_intrusion = coalesce(src_ip,src)
EVAL-transport = "tcp"

# The extractions of the below fields are applicable to Alerts and Intrusion Detection DM.
EVAL-action = case('service.action.dnsRequestAction.blocked'=="true", "blocked", 'service.action.networkConnectionAction.blocked'=="true", "blocked", 'service.action.portProbeAction.blocked'=="true", "blocked", true(), "allowed")
EVAL-dest_port = case(match(description, "(EC2 instance(?:.*?) is communicating with IP address ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) Denial of Service)"), 'service.action.networkConnectionAction.remotePortDetails.port',\
                    true(), 'service.action.networkConnectionAction.localPortDetails.port')
EVAL-dest = case(mvcount(aws_count)==1, replace(affectedResources, "\"AWS::(?:[^\"]*)\"\s*:\s*\"[^\"]*((?<=role\/|\")[^\"]*)\"", "\1"),\
            match(description, "(S3 bucket)|(Impact:S3/)|(Amazon S3)"), coalesce(AWS__S3__Bucket, AWS__EC2__Instance, instanceId, accountId),\
            match(description, "AWS CloudTrail trail"), coalesce(AWS__CloudTrail__Trail, accountId),\
            match(description, "Principal AssumedRole"), replace(description, ".*Principal AssumedRole\s*:\s*([^\s]+).*", "\1"),\
            match(description, "Principal IAMUser:"), coalesce(AWS__IAM__User, instanceId, accountId),\
            match(description, "(Denial of Service) | (DoS)"), 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4',\
            match(description, "remote host ((?:\d+.){3}(?:\d))"), replace(description, ".*remote host ((?:\d+.){3}(?:\d)).*", "\1"),\
            match(description, "communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d))"), replace(description, ".*communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d)).*", "\1"),\
            match(description, "Credentials created(?:.*?) role "), replace(description, ".*Credentials created(?:.*?) role ([^\s]+).*", "\1"),\
            match(description, "EC2 instance(?:.*?) has attempted to communicate"), null(),\
            match(description, instanceId), instanceId,\
            true(), coalesce(instanceId, accountId))
EVAL-dest_ip = case(match(description, "remote host ((?:\d+.){3}(?:\d))"), replace(description, ".*remote host ((?:\d+.){3}(?:\d)).*", "\1"),\
                match(description, "communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d))"), replace(description, ".*communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d)).*", "\1"),\
                match(description, "(Denial of Service)|(DoS)"), 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4')
EVAL-dest_name = case(mvcount(aws_count)==1, replace(affectedResources, "\"AWS::(?:[^\"]*)\"\s*:\s*\"[^\"]*((?<=role\/|\")[^\"]*)\"", "\1"),\
                match(description, "(S3 bucket)|(Impact:S3/)|(Amazon S3)"), coalesce(AWS__S3__Bucket, AWS__EC2__Instance, instanceId, accountId),\
                match(description, "AWS CloudTrail trail"), coalesce(AWS__CloudTrail__Trail, accountId),\
                match(description, "Principal AssumedRole"), replace(description, ".*Principal AssumedRole\s*:\s*([^\s]+).*", "\1"),\
                match(description, "Principal IAMUser:"), coalesce(AWS__IAM__User, instanceId, accountId),\
                match(description, "(Denial of Service) | (DoS)"), 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4',\
                match(description, "remote host ((?:\d+.){3}(?:\d))"), null(),\
                match(description, "communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d))"), null(),\
                match(description, "Credentials created(?:.*?) role "), replace(description, ".*Credentials created(?:.*?) role ([^\s]+).*", "\1"),\
                match(description, "EC2 instance(?:.*?) has attempted to communicate"), null(),\
                match(description, instanceId), instanceId,\
                true(), coalesce(instanceId, accountId))
EVAL-dest_type = case(match(description, "(S3 bucket)|(Impact:S3/)|(Amazon S3)|(S3 Bucket)"), "S3Bucket",\
                match(description, "AWS CloudTrail trail"), "CloudTrail Trail",\
                match(description, "Principal AssumedRole"), "Role",\
                match(description, "Principal IAMUser:"), "user",\
                match(description, "remote host ((?:\d+.){3}(?:\d))"), null(),\
                mvcount(aws_count)==1, replace(affectedResources, "\"AWS::(?:[^\"]*)\"\s*:\s*\"[^\"]*((?<=role\/|\")[^\"]*)\"", "\1"),\
                match(description, instanceId), "instance", instanceId!="" or isnotnull(instanceId), "instance",\
                true(), "AwsAccount")
EVAL-src_port = case(match(description, "(EC2 instance(?:.*?) is communicating with IP address ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) Denial of Service)"), 'service.action.networkConnectionAction.localPortDetails.port',\
                true(), 'service.action.networkConnectionAction.remotePortDetails.port')

## Lookups ##
#############
# non-CIM
LOOKUP-guardduty-category = aws_category subject OUTPUT category
LOOKUP-guardduty-resource-type = aws_gd_finding_types finding_category OUTPUTNEW resource_type

# Alerts CIM
LOOKUP-guardduty-mitre_technique_id = aws_firehose_kinesis_mitre_technique_id_lookup subject OUTPUTNEW mitre_technique_id
LOOKUP-guardduty-src-dest-type = aws-guardduty-resourceType_lookup resource.resourceType, service.resourceRole OUTPUTNEW src_type


##########################################
###      CloudWatch - SecurityHub      ###
##########################################
[source::aws_cloudwatchevents_securityhub]
TRANSFORMS-use_for_securityhub_sourcetype_change=use_for_securityhub_sourcetype_change
KV_MODE = json
SHOULD_LINEMERGE = false
TIME_PREFIX = \"UpdatedAt\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
SEDCMD-remove_foot = s/}]}]}}(,?)/}]}/g
SEDCMD-remove_header = s/^\[//g
SEDCMD-remove_footer = s/\]$//g
SEDCMD-remove_preable = s/{"version(.*?)findings\":\[//g
LINE_BREAKER = [}\]}|{"findings":\[](,?){"ProductArn"

[aws:securityhub:finding]
## Extraction ##
################
# Alerts CIM - https://docs.splunk.com/Documentation/CIM/4.18.0/User/Alerts
EXTRACT-aws-security-hub-app-extract = \S*\:\:product\/aws\/(?<app>[^\W]+)\".*
EXTRACT-aws-securityhub-account-user-extract = .*\\\"(?<account_user>[^\\\"]*)\\\" account.*
EXTRACT-aws-securityhub-dest-iam_user-extract = \S*\:\d+:user\/(?<user_extract>[\w\d-]+)\"
REPORT-aws-securityhub-id-dest-extract=aws-securityhub-dest-instance-extract, aws-securityhub-dest-iam_accesskey-extract, aws-securityhub-dest-s3-extract, aws-securityhub-dest-managed-instance-extract, aws-securityhub-dest-volume-extract, aws-securityhub-dest-security-group-extract, aws-securityhub-dest-vpc-extract


## Aliases ##
#############
# Common CIM
FIELDALIAS-aws-securityhub-vendor_account = AwsAccountId AS vendor_account
FIELDALIAS-aws-securityhub-vendor_region =  Resources{}.Region AS vendor_region

# Alerts CIM
FIELDALIAS-aws-securityhub-body = Description AS body
FIELDALIAS-aws-securityhub-description = Description AS description
FIELDALIAS-aws-securityhub-dest_ip = Resources{}.Details.AwsEc2Instance.IpV4Addresses{} AS dest_ip
FIELDALIAS-aws-securityhub-dest_type = Resources{}.Type AS dest_type
FIELDALIAS-aws-securityhub-severity_id = Severity.Normalized AS severity_id
FIELDALIAS-aws-securityhub-signature = Title AS signature
FIELDALIAS-aws-securityhub-signature_id = GeneratorId AS signature_id
FIELDALIAS-aws-securityhub-subject = Title AS subject


## Eval ##
##########
# Common CIM
EVAL-recommendation = mvappend('Remediation.Recommendation.Text', 'Remediation.Recommendation.Url')

# Alerts CIM
EVAL-dest = coalesce((case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", null(),\
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract), \
            case('Resources{}.Type'="AwsEc2Vpc", vpc_extract), case('Resources{}.Type'="AwsEc2Volume", volume_extract), \
            case('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract), \
            case('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract), case('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract, \
            if('Resources{}.Type'="AwsEc2Vpc", vpc_extract, if('Resources{}.Type'="AwsEc2Volume", volume_extract,\
            if('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsIamUser", user_extract, replace('Resources{}.Id', ".*:", ""))))))))))))), 'Resources{}.Details.AwsEc2Instance.IpV4Addresses{}')
EVAL-dest_name = coalesce('Resources{}.Details.AwsIamUser.UserName', \
            (case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", null(), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract), \
            case('Resources{}.Type'="AwsEc2Vpc", vpc_extract), case('Resources{}.Type'="AwsEc2Volume", volume_extract), \
            case('Resources{}.Type'="AwsSsmAssociationCompliance" OR 'Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract), \
            case('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract, \
            if('Resources{}.Type'="AwsEc2Vpc", vpc_extract, if('Resources{}.Type'="AwsEc2Volume", volume_extract, \
            if('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsIamUser", user_extract, replace('Resources{}.Id', ".*:", ""))))))))))))))
EVAL-id = replace(Id,"(?:.*)\/(.*)","\1")
EVAL-severity=lower('Severity.Label')
EVAL-src = coalesce((case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract), \
            case('Resources{}.Type'="AwsEc2Vpc", vpc_extract), case('Resources{}.Type'="AwsEc2Volume", volume_extract), \
            case('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract), \
            case('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract), case('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract, \
            if('Resources{}.Type'="AwsEc2Vpc", vpc_extract, if('Resources{}.Type'="AwsEc2Volume", volume_extract, \
            if('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsIamUser", user_extract, replace('Resources{}.Id', ".*:", ""))))))))))), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), null())), \
            'ProductFields.aws/guardduty/service/action/networkConnectionAction/remoteIpDetails/ipAddressV4', 'ProductFields.aws/guardduty/service/action/awsApiCallAction/remoteIpDetails/ipAddressV4')
EVAL-src_ip = coalesce('ProductFields.aws/guardduty/service/action/networkConnectionAction/remoteIpDetails/ipAddressV4', 'ProductFields.aws/guardduty/service/action/awsApiCallAction/remoteIpDetails/ipAddressV4')
EVAL-src_name = case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsIamUser", user_extract, 'Resources{}.Id'))))), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), null())
EVAL-src_type = case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR",  \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", "instance"), case('Resources{}.Type'="AwsEc2Volume", "disk"), \
            case('Resources{}.Type'="AwsIamAccessKey" OR 'Resources{}.Type'="AwsIamUser", "user"), case('Resources{}.Type'="AwsEc2SecurityGroup", "firewall"), \
            case('Resources{}.Type'="AwsS3Bucket", "storage"), case('Resources{}.Type'="AwsIamRole", "role"), case('Resources{}.Type'="AwsEc2Eip", "public ip")), \
            if('Resources{}.Type'="AwsEc2Instance", "instance", if('Resources{}.Type'="AwsEc2Volume", "disk", if('Resources{}.Type'="AwsS3Bucket", "storage", \
            if('Resources{}.Type'="AwsEc2SecurityGroup", "firewall", if('Resources{}.Type'="AwsIamAccessKey" OR 'Resources{}.Type'="AwsIamUser", "user", \
            if('Resources{}.Type'="AwsIamRole", "role", if('Resources{}.Type'="AwsEc2Eip", "public ip", 'Resources{}.Type')))))))), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), null())
EVAL-type = case('Severity.Label'="INFORMATIONAL", "event", 'Severity.Label'="LOW", "warning", 'Severity.Label'="MEDIUM", "alert", 'Severity.Label'="HIGH", "alert", 'Severity.Label'="CRITICAL", "alarm")
EVAL-user = coalesce(case('Resources{}.Type'="AwsIamUser", 'Resources{}.Details.AwsIamUser.UserId'), 'Resources{}.Details.AwsIamAccessKey.PrincipalName', account_user)


##################################
###      AWS Metadata       ###
##################################

[aws:metadata]
MAX_TIMESTAMP_LOOKAHEAD = 1
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
KV_MODE = json

## FIELDALIAS ##
################
# Enterprise Security Identities Framework Interface - IAM_USERS
FIELDALIAS-startDate-for-aws-metadata = CreateDate as startDate
FIELDALIAS-user-id-for-aws-description = UserId AS user_id
FIELDALIAS-username-for-aws-description = UserName AS user_name

# Enterprise Security Assets Framework Interface - EC2_INSTANCES
FIELDALIAS-image_id_for_aws_metadata = ImageId AS image_id
FIELDALIAS-instance_type_for_aws_metadata = InstanceType AS instance_type
FIELDALIAS-network_interface_id_for_aws_metadata = NetworkInterfaces{}.NetworkInterfaceId AS network_interface_id
FIELDALIAS-region_for_aws_metdata = Region as region
FIELDALIAS-vendor_account_for_aws_metdata = AccountId as vendor_account
FIELDALIAS-vendor_region_for_aws_metdata = Region as vendor_region

## EVAL ##
##########
# Enterprise Security Identities Framework Interface - IAM_USERS
EVAL-identity = case(match(source, ".+\:iam_users"), mvappend(if(user_id="", null(), user_id), if(user_name="", null(), user_name)))

# Enterprise Security Assets Framework Interface - EC2_INSTANCES
EVAL-dns = case(match(source, ".+\:ec2_instances"), mvappend(if(PublicDnsName="", null(), PublicDnsName), if(PrivateDnsName="", null(), PrivateDnsName)))
EVAL-ip = case(match(source, ".+\:ec2_instances"), mvappend(if(PublicIpAddress="", null(), PublicIpAddress), if(PrivateIpAddress="", null(), PrivateIpAddress)))
EVAL-nt_host = case(InstanceId!="" AND isnotnull(InstanceId), InstanceId)
EVAL-subnet_id = case(SubnetId!="" AND isnotnull(SubnetId), SubnetId)
EVAL-vendor = "AWS"
EVAL-vpc_id = case(VpcId!="" AND isnotnull(VpcId), VpcId)


##############################################
###      CloudWatch - Access Analyzer      ###
##############################################
[source::aws_eventbridgeevents_iam_aa]
TRANSFORMS-extract_detail_from_cloudwatch_events=extract_detail_from_cloudwatch_events
TRANSFORMS-use_for_accessanalyzer_sourcetype_change=use_for_accessanalyzer_sourcetype_change
KV_MODE = json
SHOULD_LINEMERGE = false
TIME_PREFIX = \"createdAt\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
LINE_BREAKER=(([\r\n]+)|(?={"version":"[\S.]","id":))

[aws:accessanalyzer:finding]
