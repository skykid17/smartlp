var t={2411:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.extractAppName=l,e.versionLabel=e.username=e.splunkdPath=e.serverTimezoneInfo=e.rootPath=e.portNumber=e.locale=e.config=e.buildPushNumber=e.buildNumber=e.appBuild=e.app=e.isAvailable=e.CSRFToken=void 0;var n,o=(n=r(508))&&n.__esModule?n:{default:n},a=r(9327),i="undefined"==typeof window?r.g:window;function u(t){return(0,o.default)(i,["$C",t])}var c=(0,a.getEntry)("splunkweb_csrf_token_".concat(u("MRSPARKLE_PORT_NUMBER")));e.CSRFToken=c;var s=!!u("SPLUNKD_PATH");function l(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:(0,o.default)(i,["document","location","pathname"],"")).match(/\w\w.\w\w\/(app|manager)\/([^/]+)/);return t?t[2]:void 0}e.isAvailable=s;var p=l();e.app=p;var f=u("APP_BUILD");e.appBuild=f;var v=u("BUILD_NUMBER");e.buildNumber=v;var d=u("BUILD_PUSH_NUMBER");e.buildPushNumber=d;var h=(0,o.default)(i,"$C");e.config=h;var y=u("LOCALE");e.locale=y;var b=u("MRSPARKLE_PORT_NUMBER");e.portNumber=b;var m=u("MRSPARKLE_ROOT_PATH");e.rootPath=m;var g=u("SERVER_ZONEINFO");e.serverTimezoneInfo=g;var _=u("SPLUNKD_PATH");e.splunkdPath=_;var O=u("USERNAME");e.username=O;var w=u("VERSION_LABEL");e.versionLabel=w},7212:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}e.Ng=void 0;var o=r(7735);function a(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return a=function(){return t},t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){c(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(t){var e=t.appBuild,r=t.buildNumber,n=t.buildPushNumber,a=t.locale,i=t.rootPath,c=t.splunkdPath;function s(t){var o=u({appBuild:e,buildPushNumber:n,buildNumber:r},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}),a=t.match(/(^|\w\w-\w\w\/)static\//);if(!a)return t;var i=a.index+a[0].length-1,c=t.match(/(^|\w\w-\w\w|)static\/app/)?":".concat(o.appBuild||0):"",s=o.buildPushNumber?".".concat(o.buildPushNumber):"",l="/@".concat(o.buildNumber).concat(s).concat(c),p=t.substr(0,i),f=t.substr(i);return"".concat(p).concat(l).concat(f)}function l(t,c){var l=u({appBuild:e,buildPushNumber:n,buildNumber:r,rootPath:i,locale:a},arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}),p=t||"/",f=c?"?".concat((0,o.stringify)(c)):"";return"/"!==p.charAt(0)&&(p="/".concat(p)),s(p="".concat(l.rootPath||"","/").concat(l.locale).concat(p).concat(f),l)}function p(t,e){return l("/help",t,e)}return{createAppDocsURL:function(t,e,r){var n=e.appName,o=e.appVersion;return p({location:"[".concat(n,":").concat(o,"]").concat(t)},r)},createDocsURL:function(t,e){return p({location:t},e)},createRESTURL:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(/^http[s]?:\/\//.test(t))return t;var n,o,a=r.splunkdPath||c||"";return/^\/.*/.test(t)?/^\/services/.test(t)?"".concat(a).concat(t):t:e.app||e.owner?(n=e.sharing?"nobody":e.owner?encodeURIComponent(e.owner):"-",o="system"===e.sharing?"system":e.app?encodeURIComponent(e.app):"-","".concat(a,"/servicesNS/").concat(n,"/").concat(o,"/").concat(t)):"".concat(a,"/services/").concat(t)},createStaticURL:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return l.apply(void 0,["static/".concat(t)].concat(r))},createURL:l,insertCacheBuster:s}}(function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var e=a();if(e&&e.has(t))return e.get(t);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var u=o?Object.getOwnPropertyDescriptor(t,i):null;u&&(u.get||u.set)?Object.defineProperty(r,i,u):r[i]=t[i]}return r.default=t,e&&e.set(t,r),r}(r(2411))),l=(s.createAppDocsURL,s.createDocsURL,s.createRESTURL);s.createStaticURL,s.createURL;s.insertCacheBuster,e.Ng=l},9327:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getEntry=function(t){if("undefined"==typeof document)return null;var e=new RegExp("(^|; ?)".concat(t,"=([^;]+)")),r=null;try{var n=document.cookie.match(e);r=n?n[2]:null}catch(t){}return r}},6310:(t,e,r)=>{var n=r(8480),o=r(3195),a=r(3063),i=r(1830),u=r(5818);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},5415:(t,e,r)=>{var n=r(5438),o=r(8438),a=r(3038),i=r(2774),u=r(7811);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},3618:(t,e,r)=>{var n=r(9077)(r(995),"Map");t.exports=n},3049:(t,e,r)=>{var n=r(2171),o=r(3513),a=r(9004),i=r(4405),u=r(1254);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},797:(t,e,r)=>{var n=r(995).Symbol;t.exports=n},5525:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}},5131:(t,e,r)=>{var n=r(6158);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},62:(t,e,r)=>{var n=r(9468),o=r(3466);t.exports=function(t,e){for(var r=0,a=(e=n(e,t)).length;null!=t&&r<a;)t=t[o(e[r++])];return r&&r==a?t:void 0}},1022:(t,e,r)=>{var n=r(797),o=r(1020),a=r(3123),i=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":i&&i in Object(t)?o(t):a(t)}},8621:(t,e,r)=>{var n=r(2463),o=r(1495),a=r(3502),i=r(6152),u=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,l=c.toString,p=s.hasOwnProperty,f=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!a(t)||o(t))&&(n(t)?f:u).test(i(t))}},4222:(t,e,r)=>{var n=r(797),o=r(5525),a=r(1285),i=r(2220),u=n?n.prototype:void 0,c=u?u.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(a(e))return o(e,t)+"";if(i(e))return c?c.call(e):"";var r=e+"";return"0"==r&&1/e==-1/0?"-0":r}},9468:(t,e,r)=>{var n=r(1285),o=r(9335),a=r(2982),i=r(884);t.exports=function(t,e){return n(t)?t:o(t,e)?[t]:a(i(t))}},609:(t,e,r)=>{var n=r(995)["__core-js_shared__"];t.exports=n},3486:(t,e,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;t.exports=n},8317:(t,e,r)=>{var n=r(3485);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},9077:(t,e,r)=>{var n=r(8621),o=r(712);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},1020:(t,e,r)=>{var n=r(797),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,u=n?n.toStringTag:void 0;t.exports=function(t){var e=a.call(t,u),r=t[u];try{t[u]=void 0;var n=!0}catch(t){}var o=i.call(t);return n&&(e?t[u]=r:delete t[u]),o}},712:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},8480:(t,e,r)=>{var n=r(7199);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},3195:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},3063:(t,e,r)=>{var n=r(7199),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},1830:(t,e,r)=>{var n=r(7199),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},5818:(t,e,r)=>{var n=r(7199);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},9335:(t,e,r)=>{var n=r(1285),o=r(2220),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;t.exports=function(t,e){if(n(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!o(t))||i.test(t)||!a.test(t)||null!=e&&t in Object(e)}},3485:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},1495:(t,e,r)=>{var n,o=r(609),a=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!a&&a in t}},5438:t=>{t.exports=function(){this.__data__=[],this.size=0}},8438:(t,e,r)=>{var n=r(5131),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0||(r==e.length-1?e.pop():o.call(e,r,1),--this.size,0))}},3038:(t,e,r)=>{var n=r(5131);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},2774:(t,e,r)=>{var n=r(5131);t.exports=function(t){return n(this.__data__,t)>-1}},7811:(t,e,r)=>{var n=r(5131);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},2171:(t,e,r)=>{var n=r(6310),o=r(5415),a=r(3618);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(a||o),string:new n}}},3513:(t,e,r)=>{var n=r(8317);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},9004:(t,e,r)=>{var n=r(8317);t.exports=function(t){return n(this,t).get(t)}},4405:(t,e,r)=>{var n=r(8317);t.exports=function(t){return n(this,t).has(t)}},1254:(t,e,r)=>{var n=r(8317);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},4917:(t,e,r)=>{var n=r(5535);t.exports=function(t){var e=n(t,(function(t){return 500===r.size&&r.clear(),t})),r=e.cache;return e}},7199:(t,e,r)=>{var n=r(9077)(Object,"create");t.exports=n},3123:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},995:(t,e,r)=>{var n=r(3486),o="object"==typeof self&&self&&self.Object===Object&&self,a=n||o||Function("return this")();t.exports=a},2982:(t,e,r)=>{var n=r(4917),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=n((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(o,(function(t,r,n,o){e.push(n?o.replace(a,"$1"):r||t)})),e}));t.exports=i},3466:(t,e,r)=>{var n=r(2220);t.exports=function(t){if("string"==typeof t||n(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},6152:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},6158:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},508:(t,e,r)=>{var n=r(62);t.exports=function(t,e,r){var o=null==t?void 0:n(t,e);return void 0===o?r:o}},1285:t=>{var e=Array.isArray;t.exports=e},2463:(t,e,r)=>{var n=r(1022),o=r(3502);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},3502:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},560:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},2220:(t,e,r)=>{var n=r(1022),o=r(560);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==n(t)}},5535:(t,e,r)=>{var n=r(3049);function o(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],a=r.cache;if(a.has(o))return a.get(o);var i=t.apply(this,n);return r.cache=a.set(o,i)||a,i};return r.cache=new(o.Cache||n),r}o.Cache=n,t.exports=o},884:(t,e,r)=>{var n=r(4222);t.exports=function(t){return null==t?"":n(t)}},534:t=>{function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,n,o,a){n=n||"&",o=o||"=";var i={};if("string"!=typeof t||0===t.length)return i;var u=/\+/g;t=t.split(n);var c=1e3;a&&"number"==typeof a.maxKeys&&(c=a.maxKeys);var s=t.length;c>0&&s>c&&(s=c);for(var l=0;l<s;++l){var p,f,v,d,h=t[l].replace(u,"%20"),y=h.indexOf(o);y>=0?(p=h.substr(0,y),f=h.substr(y+1)):(p=h,f=""),v=decodeURIComponent(p),d=decodeURIComponent(f),e(i,v)?r(i[v])?i[v].push(d):i[v]=[i[v],d]:i[v]=d}return i};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},8795:t=>{var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,a,i,u){return a=a||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?n(o(t),(function(o){var u=encodeURIComponent(e(o))+i;return r(t[o])?n(t[o],(function(t){return u+encodeURIComponent(e(t))})).join(a):u+encodeURIComponent(e(t[o]))})).join(a):u?encodeURIComponent(e(u))+i+encodeURIComponent(e(t)):""};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function n(t,e){if(t.map)return t.map(e);for(var r=[],n=0;n<t.length;n++)r.push(e(t[n],n));return r}var o=Object.keys||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.push(r);return e}},7735:(t,e,r)=>{e.decode=e.parse=r(534),e.encode=e.stringify=r(8795)}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};(()=>{r.d(n,{Z:()=>s});var t=r(2411),e=r(7212);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){var n,o,a;n=t,o=e,a=r[e],(o=c(o))in n?Object.defineProperty(n,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,c(n.key),n)}}function c(t){var e=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==o(e)?e:String(e)}const s=function(){function r(t,e,n,o,a){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),this.globalConfig=t,this.serviceName=e,this.state=n,this.mode=o,this.util=a,this._debouncedTemplateChange=this.debounce(this._templateChange.bind(this),200),this.savedOnce=!1}var n,o;return n=r,o=[{key:"debounce",value:function(t,e){var r;return function(){for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];clearTimeout(r),r=setTimeout((function(){t.apply(void 0,o)}),e)}}},{key:"onChange",value:function(t,e,r){"templates"===t&&this._debouncedTemplateChange(r),"server"!==t&&"templates"!==t||(this.savedOnce=!1)}},{key:"onRender",value:function(){var t=this.state.data.templates.value;this.isEmpty(t)||this._templateChange(this.state)}},{key:"_templateChange",value:function(r){var n=this,o=r.data.templates.value,a=o.split(/\|/);0===o.length&&this.util.setState((function(t){var e=i({},t.data);return e.filter_parameters.display=!1,e.filter_parameters.value=null,{data:e}}));var u={"X-Splunk-Form-Key":t.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"},c=new URL((0,e.Ng)("splunk_ta_ms_scom_template"),location);c.search=new URLSearchParams({output_mode:"json"}).toString(),fetch(c,{method:"GET",headers:u}).then((function(t){return t.json()})).then((function(t){for(var e=t.entry,r=[],o=!1,u=0;u<e.length;u++)r.push(e[u].name);for(var c=0;c<a.length;c++)if(e[r.indexOf(a[c])].content.content.includes("cmd=Get-SCOMAllPerfData")){o=!0;break}o?n.util.setState((function(t){var e=i({},t.data);return e.filter_parameters.display=!0,null!==e.filter_parameters.value&&void 0!==e.filter_parameters.value||(e.filter_parameters.value="CounterName IS NOT NULL"),e.filter_parameters.markdownMessage={text:"Provide filters as per SCOM syntax. (Default is 'CounterName IS NOT NULL') For more details refer to TA ##documentation##. This is only applicable for performance data.",link:"https://docs.splunk.com/Documentation/AddOns/released/MSSCOM/Configureinputs",markdownType:"hybrid",token:"##documentation##",linkText:"documentation"},{data:e}})):n.util.setState((function(t){var e=i({},t.data);return e.filter_parameters.display=!1,e.filter_parameters.value=null,{data:e}}))}))}},{key:"onCreate",value:function(){if(null==this.state.data.starttime.value){var t=new Date(new Date((new Date).getTime()-864e5).toUTCString()).toISOString().slice(0,19)+"Z";this.util.setState((function(e){var r=i({},e.data);return r.starttime.value=t,{data:r}}))}}},{key:"onSave",value:function(r){var n=r.starttime;if(""===r.starttime.trim())return n=new Date(new Date((new Date).getTime()-864e5).toUTCString()).toISOString().slice(0,19)+"Z",this.util.setState((function(t){var e=i({},t.data);return e.starttime.value=n,{data:e}})),!0;var o=new Date(n),a=new Date(o.getUTCFullYear(),o.getUTCMonth(),o.getUTCDate(),o.getUTCHours(),o.getUTCMinutes(),o.getUTCSeconds()),u=new Date;if(a>new Date(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate(),u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds()))return this.util.setErrorMsg("Start Time should not be in future."),!1;var c={templates:r.templates,server:r.server,input_name:r.name,output_mode:"json"},s=new URL((0,e.Ng)("splunk_ta_ms_scom_rh_validate_input_data_duplication"),location);if(s.search=new URLSearchParams(c).toString(),!this.savedOnce)try{var l=new XMLHttpRequest;if(l.open("GET",s,!1),l.setRequestHeader("X-Splunk-Form-Key",t.CSRFToken),l.setRequestHeader("X-Requested-With","XMLHttpRequest"),l.setRequestHeader("Content-Type","application/json"),l.send(),200===l.status){if(!0===JSON.parse(l.responseText).entry[0].content.duplicate_warning&&!this.savedOnce){this.savedOnce=!0;var p="Selected server and templates are also being used in some other input which can cause data duplication/loss. For more information, see the splunk_ta_microsoft-scom_input_validation.log file. To continue, click ",f="Save.";return"create"===this.mode?f="Add.":"edit"===this.mode&&(f="Update."),p+=f,this.util.setState((function(t){return i(i({},t),{},{warningMsg:p})})),!1}}else console.error("Validation of data duplication/loss for selected server and templates failed with status code : ",l.status)}catch(t){console.error("Validation of data duplication/loss for selected server and templates failed. ERROR : ",t)}return!0}},{key:"isEmpty",value:function(t){return null===t||0===t.trim().length}}],o&&u(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),r}()})();var o=n.Z;export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,