#
# SPDX-FileCopyrightText: 2024 Splunk, Inc.
# SPDX-License-Identifier: LicenseRef-Splunk-8-2021
#
#
[(?:::){0}microsoft:scom*]
SHOULD_LINEMERGE = false
TRANSFORMS-force_sourcetype_for_scom = force_sourcetype_for_scom
TRANSFORMS-force_sourcetype_for_scom_perf = force_sourcetype_for_scom_perf
TIME_PREFIX =\b(scom_timestamp)="
TZ = UTC

KV_MODE = none
REPORT-multi_kv = multi_kv, multi_kv2

#inventory
EVAL-description = case(scom_command=="get-scomclassinstance" AND isnotnull(microsoft_windows_operatingsystem__osversiondisplayname),microsoft_windows_operatingsystem__osversiondisplayname, scom_command=="get-scomclassinstance", displayname, 1==1,description)
EVAL-enabled = if(scom_command=="get-scomclassinstance",isavailable, enabled)
EVAL-family = case(scom_command=="get-scomclassinstance" AND match(displayname,"^.*Linux.*$"),"Linux",scom_command=="get-scomclassinstance" AND match(displayname,"^.*Windows.*$"),"Windows",1==1,family)
EVAL-serial = if(scom_command=="get-scomclassinstance", microsoft_windows_operatingsystem__serialnumber, serial)
EVAL-vendor_product = if(scom_command=="get-scomclassinstance", microsoft_windows_operatingsystem__osversiondisplayname, vendor_product)
EVAL-version = if(scom_command=="get-scomclassinstance", microsoft_windows_operatingsystem__osversion, version)
EVAL-cpu_count = if(scom_command=="get-scomclassinstance", microsoft_windows_computer__logicalprocessors, cpu_count)
EVAL-cpu_mhz = if(scom_command=="get-scomclassinstance",microsoft_windows_server_processor__speed, cpu_mhz)
EVAL-mem = if(scom_command=="get-scomclassinstance",microsoft_windows_operatingsystem__physicalmemory/1024, mem)
EVAL-storage = case(scom_command=="get-scomclassinstance" AND isnotnull(microsoft_windows_server_physicaldisk__sizeinmbs),microsoft_windows_server_physicaldisk__sizeinmbs, scom_command="get-scomclassinstance" AND isnotnull(microsoft_windows_server_logicaldisk__sizeinmbs),microsoft_windows_server_logicaldisk__sizeinmbs,1==1,storage)
EVAL-dns = if(scom_command=="get-scomclassinstance",microsoft_windows_computer__dnsname, dns)
EVAL-interface = if(scom_command=="get-scomclassinstance" AND isnotnull(microsoft_windows_logicaldevice__name),microsoft_windows_logicaldevice__name,interface)
EVAL-ip = if(scom_command=="get-scomclassinstance",split(microsoft_windows_server_networkadapter__ipaddress,", "),ip)
EVAL-mac = if(scom_command=="get-scomclassinstance",replace(lower(microsoft_windows_server_networkadapter__macaddress),"-|\s",":"),mac)
EVAL-src_ip = if(scom_command=="get-scomclassinstance",split(microsoft_windows_server_networkadapter__ipaddress,", "),src_ip)
EVAL-status = if(scom_command=="get-scomclassinstance",healthstate,status)
EVAL-dest = if(scom_command=="get-scomclassinstance", microsoft_windows_computer__principalname,dest)
EVAL-role = if(scom_command=="get-scomclassinstance","operating_system_host",role)

[microsoft:scom:alert]
FIELDALIAS-app_for_scom_alert           = monitoringobjectdisplayname as app
FIELDALIAS-body_for_scom_alert          = description as body
EVAL-dest_for_scom_alert                = coalesce(netbioscomputername, dest)

FIELDALIAS-src_for_scom_alert           = monitoringobjectfullname as src
FIELDALIAS-subject_for_scom_alert       = name as subject

EVAL-vendor_severity = severity
LOOKUP-severity_for_ms_scom = ms_scom_vendor_severity_lookup vendor_severity OUTPUT severity
LOOKUP-type_for_ms_scom = ms_scom_type_lookup vendor_severity OUTPUT type

[source::...splunk_ta_microsoft-scom...]
sourcetype = ms:scom:log:ucc

[source::...ta_scom.log]
sourcetype = ms:scom:log:script

[source::...splunk_ta_microsoft-scom_server_validation.log]
sourcetype = ms:scom:log:server_validation
priority = 1

[source::...splunk_ta_microsoft-scom_input_validation.log]
sourcetype = ms:scom:log:input_validation
priority = 1

[source::...splunk_ta_microsoft-scom_performance_filter_parameter_validation.log]
sourcetype = ms:scom:log:performance_filter_parameter_validation
priority = 1

[microsoft:scom:performance]

FIELDALIAS-dest = monitoringobjectpath as dest
FIELDALIAS-resource_type = objectname as resource_type


#cpu
EVAL-cpu_user_percent = if(match(ruledisplayname,"Processor\s(Information\s)?%\sProcessor\sTime\sTotal.*"), samplevalue, null)
EVAL-cpu_load_percent = if(match(countername, "agent processor utilization") OR match(countername, "Percent Processor Time"), samplevalue, null)
EVAL-wait_threads_count = if(match(ruledisplayname,"System Processor Queue Length.*"), samplevalue, null)

#mem
EVAL-mem_committed = if(match(ruledisplayname,".*Committed\sBytes$"), samplevalue, null)
EVAL-mem_free = if(match(ruledisplayname,"Memory Available Megabytes.*"), samplevalue, null)
EVAL-mem_page_ops = if(match(ruledisplayname,"Memory Pages per Second.*"), samplevalue, null)
EVAL-mem_used_percent = if(match(ruledisplayname,"Percent Memory Used"), samplevalue, null)
EVAL-mem_free_percent = if(match(ruledisplayname,"Percent Memory Used"), 100-samplevalue, null)
EVAL-mem = if(match(countername, "Private Bytes"), samplevalue/(1024*1024), null)

#storage
EVAL-cluster = if(match(ruledisplayname,"Cluster Disk*"),instancename, null)
EVAL-latency = if(match(ruledisplayname,"(Collection Rule for Average Disk Seconds Per Transfer.*|Physical Disk Average Disk Seconds per Transfer.*)"), samplevalue*1000, null)
EVAL-read_latency = if(match(ruledisplayname,"(Collection Rule for Average Disk Seconds Per Read.*|Physical Disk Average Disk Seconds per Read.*)"), samplevalue*1000, null)
EVAL-read_ops = if(match(ruledisplayname,"Collection Rule for Disk Reads Per Second.*|Physical Disk Reads per Second.*"), samplevalue, null)
EVAL-storage = if(match(ruledisplayname,"Cluster Disk - Total size.*|Cluster Shared Volume - Total size.*"), samplevalue, total_storage_mb)
EVAL-storage_free = if(match(ruledisplayname,"Logical Disk Free Megabytes.*|Cluster Disk - Free space.*|Cluster Shared Volume - Free space.*"),samplevalue,null)
EVAL-storage_used = if(match(ruledisplayname,"Logical Disk Free Megabytes.*|Cluster Disk - Free space.*|Cluster Shared Volume - Free space.*") AND isnotnull(total_storage_mb), total_storage_mb-samplevalue, null)
EVAL-storage_free_percent = case(match(ruledisplayname,"% Logical Disk Free Space.*|Cluster Disk - Free space.*%|Cluster Shared Volume - Free space.*%"), samplevalue, match(ruledisplayname,"Logical Disk Free Megabytes.*|Cluster Disk - Free space.*|Cluster Shared Volume - Free space.*") AND isnotnull(total_storage_mb),(samplevalue*100/total_storage_mb))
EVAL-storage_used_percent = case(match(ruledisplayname,"% Logical Disk Free Space.*|Cluster Disk - Free space.*%|Cluster Shared Volume - Free space.*%"), 100-samplevalue, match(ruledisplayname,"Logical Disk Free Megabytes.*|Cluster Disk - Free space.*|Cluster Shared Volume - Free space.*") AND isnotnull(total_storage_mb), ((total_storage_mb-samplevalue)*100/total_storage_mb))
EVAL-write_latency = if(match(ruledisplayname,"(Collection Rule for Average Disk Seconds Per Write.*|Physical Disk Average Disk Seconds per Write.*)"), samplevalue*1000, null)
EVAL-write_ops = if(match(ruledisplayname,"(Collection Rule for Disk Writes Per Second.*|Physical Disk Writes per Second.*)"), samplevalue, null)
EVAL-total_ops = if(match(ruledisplayname,"Collection Rule for Disk Transfers Per Second.*"), samplevalue, null)
#network
EVAL-thruput = if(match(ruledisplayname,"Current Bandwidth") OR match(countername, "PercentBandwidthUsedTotal"), samplevalue, null)
EVAL-bytes = if(match(ruledisplayname,"Network Adapter Bytes Total per Second.*"), samplevalue, null)
EVAL-bytes_in = if(match(ruledisplayname,"Network Adapter Bytes Received per Second.*"), samplevalue, null)
EVAL-bytes_out = if(match(ruledisplayname,"Network Adapter Bytes Sent per Second*"), samplevalue, null)
EVAL-interface = if(objectname=="Network Adapter", instancename, null)

#OS
FIELDALIAS-signature = id as signature

#uptime
EVAL-uptime = if(match(countername, "System Up Time"), samplevalue, null)

LOOKUP-monitor_to_datamodel = ms_scom_monitor_to_datamodel_lookup monitoringruledisplayname OUTPUT enabled_by_default,target_class,description,counter_type as scom_counter_type ,counter_category as scom_counter_category,supported_os
LOOKUP-countername_to_datamodel = ms_scom_countername_to_datamodel_lookup countername OUTPUT scom_perf_category
