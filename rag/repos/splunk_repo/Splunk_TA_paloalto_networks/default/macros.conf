##
## SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##

########################
# Base Macros
########################

# This `pan_index` macro is deprecated, but is here for legacy
# dashboards created by administrators so they don't break.
# It is better to use the `pan_logs` macro.

[p_index]
definition = index=pan*

[pan_index]
definition = `p_index` eventtype="pan"

[pan_logs]
definition = `p_index` eventtype="pan"

[pan_firewall]
definition = `p_index` eventtype="pan_firewall"

[pan_threat]
definition = `p_index` eventtype="pan_threat"

[pan_threat_all]
definition = `p_index` sourcetype="pan:threat"

[pan_traffic]
definition = `p_index` eventtype="pan_traffic"

[pan_system]
definition = `p_index` eventtype="pan_system"

[pan_config]
definition = `p_index` eventtype="pan_config"

[pan_web_activity]
definition = `p_index` eventtype="pan_url"

[pan_url]
definition = `p_index` eventtype="pan_url"

[pan_data_filtering]
definition = `p_index` eventtype="pan_data"

[pan_data]
definition = `p_index` eventtype="pan_data"

[pan_file_blocking]
definition = `p_index` eventtype="pan_file"

[pan_file]
definition = `p_index` eventtype="pan_file"

[pan_globalprotect]
definition = `p_index` eventtype="pan_globalprotect"

[pan_decryption]
definition = `p_index` eventtype="pan_decryption"

[pan_wildfire]
definition = `p_index` eventtype="pan_wildfire"

[pan_correlation]
definition = `p_index` eventtype="pan_correlation"

[pan_iot_device]
definition = `p_index` eventtype="pan_iot_device"

[pan_iot_alert]
definition = `p_index` eventtype="pan_iot_alert"

[pan_iot_vulnerability]
definition = `p_index` eventtype="pan_iot_vulnerability"

[pan_xdr_incident]
definition = `p_index` eventtype="pan_xdr_incident"

########################
# macros used internally by dashboards
########################

[_pan_dropdown(2)]
args = node, field
definition = tstats summariesonly=t count FROM datamodel="pan_firewall" WHERE nodename="$node$" groupby $field$ | rename $field$ as field | eval field_with_count = field . " (" . count . ")"

[top]
definition = sort -count | head 999

[top(1)]
args = num
definition = sort -count | head $num$

[groupby(1)]
args = fields
definition = "GROUPBY " + "$fields$" + " | rename " + replace(replace("$fields$", "^.*?log\.(.*)", "log.\1"), "log.([^ ]*)", "log.\1 AS \1")
iseval = true

[groupby(2)]
args = fields, span
definition = "GROUPBY " + "$fields$" + " span=$span$ | rename " + replace(replace("$fields$", "^.*?log\.(.*)", "log.\1"), "log.([^ ]*)", "log.\1 AS \1")
iseval = true

[table(1)]
args = fields
definition = "GROUPBY " + "$fields$" + " | rename " + replace(replace("$fields$", "^.*?log\.(.*)", "log.\1"), "log.([^ ]*)", "log.\1 AS \1") + " | table " + replace("$fields$", "log.([^ ]*)", "\1")
iseval = true

[table(2)]
args = fields, count
definition = `table($fields$)` $count$ | `top`

########################
# base macro for tstats
########################

# This macro is deprecated, use `summariesonly` instead
[pan_tstats]
definition = tstats summariesonly=t

[summariesonly]
definition = summariesonly=t

[node(1)]
args = nodename
definition = datamodel="pan_firewall" WHERE nodename="$nodename$"

[fw_node(1)]
args = nodename
definition = datamodel="pan_firewall" WHERE nodename="$nodename$"

[pan_decode_flags]
definition = eval flags_text=mvappend(if(floor(flags_dec / pow(2, 31))==0,null(),"pcap"),if(floor(flags_dec / pow(2, 25))==0,null(),"ipv6"),if(floor(flags_dec / pow(2, 24))==0,null(),"decrypted"),if(floor(flags_dec / pow(2, 23))==0,null(),"denied_by_url_filtering"),if(floor(flags_dec / pow(2, 22))==0,null(),"nat"),if(floor(flags_dec / pow(2, 21))==0,null(),"captive_portal"),if(floor(flags_dec / pow(2, 19))==0,null(),"x_forwarded_for"),if(floor(flags_dec / pow(2, 18))==0,null(),"http_proxy"),if(floor(flags_dec / pow(2, 15))==0,null(),"container_page"),if(floor(flags_dec / pow(2, 13))==0,null(),"implicit_application"),if(floor(flags_dec / pow(2, 11))==0,null(),"symmetric_return"))

[session]
definition = log.session_id log.serial_number log.client_ip log.server_ip

[kill_chain_depth]
definition = eval kill_chain_depth=case( log_subtype=="data" AND action=="allowed", 7, log_subtype=="data" AND (action=="blocked" OR action=="dropped"), 6, log_subtype=="spyware" AND action=="allowed", 6, vendor_action=="sinkhole", 5, log_subtype=="spyware" AND (action=="blocked" OR action=="dropped"), 5, log_subtype=="Notification Event", 5, log_subtype=="Prevention Event", 3, log_subtype=="wildfire" AND action=="allowed", 3, log_subtype=="virus" AND action=="allowed", 3, log_subtype=="wildfire-virus" AND action=="allowed", 3, log_subtype=="virus" AND (action=="blocked" OR action=="dropped"), 2, log_subtype=="wildfire-virus" AND (action=="blocked" OR action=="dropped"), 2, log_subtype=="vulnerability" AND action=="allowed", 2, log_subtype=="vulnerability" AND (action=="blocked" OR action=="dropped"), 1, log_subtype=="flood", 1 ) | fillnull kill_chain_depth
