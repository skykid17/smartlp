var t={2411:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.extractAppName=l,e.versionLabel=e.username=e.splunkdPath=e.serverTimezoneInfo=e.rootPath=e.portNumber=e.locale=e.config=e.buildPushNumber=e.buildNumber=e.appBuild=e.app=e.isAvailable=e.CSRFToken=void 0;var n,o=(n=r(2281))&&n.__esModule?n:{default:n},a=r(9327),i="undefined"==typeof window?r.g:window;function u(t){return(0,o.default)(i,["$C",t])}var c=(0,a.getEntry)("splunkweb_csrf_token_".concat(u("MRSPARKLE_PORT_NUMBER")));e.CSRFToken=c;var s=!!u("SPLUNKD_PATH");function l(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:(0,o.default)(i,["document","location","pathname"],"")).match(/\w\w.\w\w\/(app|manager)\/([^/]+)/);return t?t[2]:void 0}e.isAvailable=s;var p=l();e.app=p;var d=u("APP_BUILD");e.appBuild=d;var f=u("BUILD_NUMBER");e.buildNumber=f;var h=u("BUILD_PUSH_NUMBER");e.buildPushNumber=h;var v=(0,o.default)(i,"$C");e.config=v;var y=u("LOCALE");e.locale=y;var _=u("MRSPARKLE_PORT_NUMBER");e.portNumber=_;var b=u("MRSPARKLE_ROOT_PATH");e.rootPath=b;var m=u("SERVER_ZONEINFO");e.serverTimezoneInfo=m;var g=u("SPLUNKD_PATH");e.splunkdPath=g;var w=u("USERNAME");e.username=w;var x=u("VERSION_LABEL");e.versionLabel=x},7212:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}e.Ng=void 0;var o=r(7735);function a(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return a=function(){return t},t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){c(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(t){var e=t.appBuild,r=t.buildNumber,n=t.buildPushNumber,a=t.locale,i=t.rootPath,c=t.splunkdPath;function s(t){var o=u({appBuild:e,buildPushNumber:n,buildNumber:r},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}),a=t.match(/(^|\w\w-\w\w\/)static\//);if(!a)return t;var i=a.index+a[0].length-1,c=t.match(/(^|\w\w-\w\w|)static\/app/)?":".concat(o.appBuild||0):"",s=o.buildPushNumber?".".concat(o.buildPushNumber):"",l="/@".concat(o.buildNumber).concat(s).concat(c),p=t.substr(0,i),d=t.substr(i);return"".concat(p).concat(l).concat(d)}function l(t,c){var l=u({appBuild:e,buildPushNumber:n,buildNumber:r,rootPath:i,locale:a},arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}),p=t||"/",d=c?"?".concat((0,o.stringify)(c)):"";return"/"!==p.charAt(0)&&(p="/".concat(p)),s(p="".concat(l.rootPath||"","/").concat(l.locale).concat(p).concat(d),l)}function p(t,e){return l("/help",t,e)}return{createAppDocsURL:function(t,e,r){var n=e.appName,o=e.appVersion;return p({location:"[".concat(n,":").concat(o,"]").concat(t)},r)},createDocsURL:function(t,e){return p({location:t},e)},createRESTURL:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(/^http[s]?:\/\//.test(t))return t;var n,o,a=r.splunkdPath||c||"";return/^\/.*/.test(t)?/^\/services/.test(t)?"".concat(a).concat(t):t:e.app||e.owner?(n=e.sharing?"nobody":e.owner?encodeURIComponent(e.owner):"-",o="system"===e.sharing?"system":e.app?encodeURIComponent(e.app):"-","".concat(a,"/servicesNS/").concat(n,"/").concat(o,"/").concat(t)):"".concat(a,"/services/").concat(t)},createStaticURL:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return l.apply(void 0,["static/".concat(t)].concat(r))},createURL:l,insertCacheBuster:s}}(function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var e=a();if(e&&e.has(t))return e.get(t);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var u=o?Object.getOwnPropertyDescriptor(t,i):null;u&&(u.get||u.set)?Object.defineProperty(r,i,u):r[i]=t[i]}return r.default=t,e&&e.set(t,r),r}(r(2411))),l=(s.createAppDocsURL,s.createDocsURL,s.createRESTURL);s.createStaticURL,s.createURL;s.insertCacheBuster,e.Ng=l},9327:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getEntry=function(t){if("undefined"==typeof document)return null;var e=new RegExp("(^|; ?)".concat(t,"=([^;]+)")),r=null;try{var n=document.cookie.match(e);r=n?n[2]:null}catch(t){}return r}},361:(t,e,r)=>{var n=r(2427),o=r(8003),a=r(7407),i=r(2536),u=r(9097);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},259:(t,e,r)=>{var n=r(4958),o=r(7975),a=r(5139),i=r(6774),u=r(7230);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},6299:(t,e,r)=>{var n=r(3446)(r(6695),"Map");t.exports=n},3209:(t,e,r)=>{var n=r(6975),o=r(7899),a=r(8554),i=r(1029),u=r(6053);function c(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},4380:(t,e,r)=>{var n=r(6695).Symbol;t.exports=n},1743:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}},2112:(t,e,r)=>{var n=r(4904);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},435:(t,e,r)=>{var n=r(8637),o=r(2351);t.exports=function(t,e){for(var r=0,a=(e=n(e,t)).length;null!=t&&r<a;)t=t[o(e[r++])];return r&&r==a?t:void 0}},7486:(t,e,r)=>{var n=r(4380),o=r(9527),a=r(5736),i=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":i&&i in Object(t)?o(t):a(t)}},1326:(t,e,r)=>{var n=r(9657),o=r(5070),a=r(4538),i=r(6154),u=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,l=c.toString,p=s.hasOwnProperty,d=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!a(t)||o(t))&&(n(t)?d:u).test(i(t))}},9968:(t,e,r)=>{var n=r(4380),o=r(1743),a=r(6753),i=r(9530),u=n?n.prototype:void 0,c=u?u.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(a(e))return o(e,t)+"";if(i(e))return c?c.call(e):"";var r=e+"";return"0"==r&&1/e==-Infinity?"-0":r}},8637:(t,e,r)=>{var n=r(6753),o=r(3865),a=r(8960),i=r(708);t.exports=function(t,e){return n(t)?t:o(t,e)?[t]:a(i(t))}},8793:(t,e,r)=>{var n=r(6695)["__core-js_shared__"];t.exports=n},8552:(t,e,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;t.exports=n},8561:(t,e,r)=>{var n=r(3766);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},3446:(t,e,r)=>{var n=r(1326),o=r(7983);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},9527:(t,e,r)=>{var n=r(4380),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,u=n?n.toStringTag:void 0;t.exports=function(t){var e=a.call(t,u),r=t[u];try{t[u]=void 0;var n=!0}catch(t){}var o=i.call(t);return n&&(e?t[u]=r:delete t[u]),o}},7983:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},2427:(t,e,r)=>{var n=r(1027);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},8003:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7407:(t,e,r)=>{var n=r(1027),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},2536:(t,e,r)=>{var n=r(1027),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},9097:(t,e,r)=>{var n=r(1027);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},3865:(t,e,r)=>{var n=r(6753),o=r(9530),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;t.exports=function(t,e){if(n(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!o(t))||i.test(t)||!a.test(t)||null!=e&&t in Object(e)}},3766:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5070:(t,e,r)=>{var n,o=r(8793),a=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!a&&a in t}},4958:t=>{t.exports=function(){this.__data__=[],this.size=0}},7975:(t,e,r)=>{var n=r(2112),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0||(r==e.length-1?e.pop():o.call(e,r,1),--this.size,0))}},5139:(t,e,r)=>{var n=r(2112);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},6774:(t,e,r)=>{var n=r(2112);t.exports=function(t){return n(this.__data__,t)>-1}},7230:(t,e,r)=>{var n=r(2112);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},6975:(t,e,r)=>{var n=r(361),o=r(259),a=r(6299);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(a||o),string:new n}}},7899:(t,e,r)=>{var n=r(8561);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},8554:(t,e,r)=>{var n=r(8561);t.exports=function(t){return n(this,t).get(t)}},1029:(t,e,r)=>{var n=r(8561);t.exports=function(t){return n(this,t).has(t)}},6053:(t,e,r)=>{var n=r(8561);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},704:(t,e,r)=>{var n=r(9776);t.exports=function(t){var e=n(t,(function(t){return 500===r.size&&r.clear(),t})),r=e.cache;return e}},1027:(t,e,r)=>{var n=r(3446)(Object,"create");t.exports=n},5736:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},6695:(t,e,r)=>{var n=r(8552),o="object"==typeof self&&self&&self.Object===Object&&self,a=n||o||Function("return this")();t.exports=a},8960:(t,e,r)=>{var n=r(704),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=n((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(o,(function(t,r,n,o){e.push(n?o.replace(a,"$1"):r||t)})),e}));t.exports=i},2351:(t,e,r)=>{var n=r(9530);t.exports=function(t){if("string"==typeof t||n(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},6154:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},4904:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},2281:(t,e,r)=>{var n=r(435);t.exports=function(t,e,r){var o=null==t?void 0:n(t,e);return void 0===o?r:o}},6753:t=>{var e=Array.isArray;t.exports=e},9657:(t,e,r)=>{var n=r(7486),o=r(4538);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},4538:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7101:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},9530:(t,e,r)=>{var n=r(7486),o=r(7101);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==n(t)}},9776:(t,e,r)=>{var n=r(3209),o="Expected a function";function a(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(o);var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],a=r.cache;if(a.has(o))return a.get(o);var i=t.apply(this,n);return r.cache=a.set(o,i)||a,i};return r.cache=new(a.Cache||n),r}a.Cache=n,t.exports=a},708:(t,e,r)=>{var n=r(9968);t.exports=function(t){return null==t?"":n(t)}},9335:t=>{function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,n,o,a){n=n||"&",o=o||"=";var i={};if("string"!=typeof t||0===t.length)return i;var u=/\+/g;t=t.split(n);var c=1e3;a&&"number"==typeof a.maxKeys&&(c=a.maxKeys);var s=t.length;c>0&&s>c&&(s=c);for(var l=0;l<s;++l){var p,d,f,h,v=t[l].replace(u,"%20"),y=v.indexOf(o);y>=0?(p=v.substr(0,y),d=v.substr(y+1)):(p=v,d=""),f=decodeURIComponent(p),h=decodeURIComponent(d),e(i,f)?r(i[f])?i[f].push(h):i[f]=[i[f],h]:i[f]=h}return i};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},8795:t=>{var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,a,i,u){return a=a||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?n(o(t),(function(o){var u=encodeURIComponent(e(o))+i;return r(t[o])?n(t[o],(function(t){return u+encodeURIComponent(e(t))})).join(a):u+encodeURIComponent(e(t[o]))})).join(a):u?encodeURIComponent(e(u))+i+encodeURIComponent(e(t)):""};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function n(t,e){if(t.map)return t.map(e);for(var r=[],n=0;n<t.length;n++)r.push(e(t[n],n));return r}var o=Object.keys||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.push(r);return e}},7735:(t,e,r)=>{e.decode=e.parse=r(9335),e.encode=e.stringify=r(8795)}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};(()=>{r.d(n,{Z:()=>l});var t=r(2411),e=r(7212);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){u(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function u(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===o(e)?e:String(e)}const l=function(){function r(t,e,n,o,a){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),this.globalConfig=t,this.serviceName=e,this.state=n,this.mode=o,this.util=a,this.is_new_input=!0,this._debouncedNameChange=this.debounce(this._nameChange.bind(this),200),this._debouncedFormNameChange=this.debounce(this._formNameChange.bind(this),200),this._debouncedTimefieldChange=this.debounce(this._timefieldChange.bind(this),200),this._debouncedReuseCheckpointChange=this.debounce(this._reuseCheckpointChange.bind(this),200),this._debouncedValueChange=this.debounce(this._valueChange.bind(this),200),this._debouncedQueryStartDateChange=this.debounce(this._queryStartDateChange.bind(this),200),this._debouncedFieldIgnoreList=this.debounce(this._fieldIgnoreList.bind(this),200)}var n,o;return n=r,o=[{key:"onCreate",value:function(){}},{key:"debounce",value:function(t,e){var r;return function(){for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];clearTimeout(r),r=setTimeout((function(){t.apply(void 0,o)}),e)}}},{key:"onChange",value:function(t,e,r){var n=this.state.data.account.value,o=this.state.data.query_start_date.value;"account"===t?this._debouncedValueChange(t,n,r):"name"===t?this._debouncedNameChange(n,r):"reuse_checkpoint"===t?this._debouncedReuseCheckpointChange(o,n,r):"query_start_date"===t?this._debouncedQueryStartDateChange(o,r):"include_properties"===t||"exclude_properties"===t?this._debouncedFieldIgnoreList(r):"form_name"===t?this._debouncedFormNameChange(n,r):"form_type"===t?this.formTypeChange(n,r):"timefield"===t&&this._debouncedTimefieldChange(n,r)}},{key:"onRender",value:function(){var t=window.location.href.replace("inputs","configuration"),e=this.state.data.name.value,r=this.state.data.account.value;this.isEmpty(e)||(this.util.setState((function(t){var e=i({},t.data);return e.reuse_checkpoint.value="yes",e.query_start_date.disabled=!0,{data:e}})),this._nameChange(r,this.state),this.is_new_input=!1),this._fieldIgnoreList(this.state),this.util.setState((function(e){var r=i({},e.data);return r.account.markdownMessage={text:"Configure a new account",link:t,markdownType:"link"},r.reuse_checkpoint.markdownMessage={text:"A Checkpoint for this input already exists. Selecting `No` will reset the data collection.",color:"red",markdownType:"text"},{data:r}}))}},{key:"checkIfCheckpointExists",value:function(r,n){var o=this;if(!this.isEmpty(n.data.name.value)&&!this.isEmpty(n.data.form_name.value)){var a=n.data.name.value,u=n.data.timefield.value||"Last Modified Date",c={input_name:a+"."+n.data.form_name.value+"."+u,output_mode:"json"},s=this,l={"X-Splunk-Form-Key":t.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"},p=new URL((0,e.Ng)("splunk_ta_remedy_input_checkpoint"),location);p.search=new URLSearchParams(c).toString(),fetch(p,{method:"GET",headers:l}).then((function(t){return t.json()})).then((function(t){t.entry[0].content.checkpoint_exist?(o.util.setState((function(t){var e=i({},t.data);return e.reuse_checkpoint.display=!0,e.query_start_date.disabled=!0,e.reuse_checkpoint.value="yes",{data:e}})),o.is_new_input=!1,n.data.account.value!==r&&s._valueChange("account",r,n)):(o.util.setState((function(t){var e=i({},t.data);return e.reuse_checkpoint.display=!1,e.query_start_date.disabled=!1,{data:e}})),o.is_new_input=!0)})).catch((function(t){return console.error(t)}))}}},{key:"_nameChange",value:function(t,e){this.checkIfCheckpointExists(t,e)}},{key:"_timefieldChange",value:function(t,e){this.checkIfCheckpointExists(t,e)}},{key:"formTypeChange",value:function(t,e){var r={incident:"HPD:IncidentInterface",audit:"HPD:HelpDesk_AuditLogSystem",incident_worklog:"HPD:WorkLog"},n={incident:"Last Modified Date",audit:"Modified Date",incident_worklog:"Last Modified Date"};this.util.setState((function(t){var o=i({},t.data);return o.form_name.value=r[e.data.form_type.value],"audit"==e.data.form_type.value?o.form_name.disabled=!1:o.form_name.disabled=!0,o.timefield.value=n[e.data.form_type.value],{data:o}})),this.checkIfCheckpointExists(t,e)}},{key:"_formNameChange",value:function(t,e){this.checkIfCheckpointExists(t,e)}},{key:"onSave",value:function(t){var e=t.query_start_date,r=new Date(e),n="",o=new Date;return r>new Date(o.getUTCFullYear(),o.getUTCMonth(),o.getUTCDate(),o.getUTCHours(),o.getUTCMinutes(),o.getUTCSeconds()).getTime()?(n="Query Start date should not be in future",this.util.setErrorMsg(n),!1):!(!this.isEmpty(t.include_properties)&&!this.isEmpty(t.exclude_properties))}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}},{key:"_reuseCheckpointChange",value:function(t,e,r){"yes"===r.data.reuse_checkpoint.value?(this.util.setState((function(t){var e=i({},t.data);return e.query_start_date.disabled=!0,{data:e}})),this._valueChange("account",e,r)):this.util.setState((function(t){var e=i({},t.data);return e.query_start_date.disabled=!1,{data:e}})),this.util.setState((function(e){var r=i({},e.data);return r.query_start_date.value=t,{data:r}}))}},{key:"_valueChange",value:function(t,e,r){var n=r.data.account.value,o=window.location.href.replace("inputs","configuration");this.isEmpty(r.data.name.value)||this.isEmpty(n)||e===n||!0===this.is_new_input?this.util.setState((function(t){var e=i({},t.data);return e.account.markdownMessage={text:"Configure a new account",link:o,markdownType:"link"},{data:e}})):this.util.setState((function(e){var r=i({},e.data);return r.account.markdownMessage={text:"Changing this ".concat(t," may cause data gaps or duplication. To avoid, create a new input."),color:"red",markdownType:"text"},{data:r}}))}},{key:"_queryStartDateChange",value:function(t,e){var r=window.location.href.replace("inputs","configuration"),n=e.data.query_start_date.value;this.isEmpty(e.data.name.value)||t===n||!0===this.is_new_input||this.util.setState((function(t){var e=i({},t.data);return e.account.markdownMessage={text:"Configure a new account",link:r,markdownType:"link"},e.query_start_date.markdownMessage={text:"Changing this parameter may result in gaps or duplication in data collection",color:"red",markdownType:"text"},{data:e}}))}},{key:"_fieldIgnoreList",value:function(t){var e=t.data.include_properties.value,r=t.data.exclude_properties.value;!this.isEmpty(e)&&this.isEmpty(r)?this.util.setState((function(t){var e=i({},t.data);return e.exclude_properties.disabled=!0,e.include_properties.disabled=!1,e.exclude_properties.placeholder="not allowed",e.include_properties.placeholder="optional",{data:e}})):!this.isEmpty(r)&&this.isEmpty(e)?this.util.setState((function(t){var e=i({},t.data);return e.exclude_properties.disabled=!1,e.include_properties.disabled=!0,e.include_properties.placeholder="not allowed",e.exclude_properties.placeholder="optional",{data:e}})):this.isEmpty(e)&&this.isEmpty(r)&&this.util.setState((function(t){var e=i({},t.data);return e.exclude_properties.disabled=!1,e.include_properties.disabled=!1,e.exclude_properties.placeholder="optional",e.include_properties.placeholder="optional",{data:e}}))}},{key:"isEmpty",value:function(t){return null===t||0===t.trim().length}}],o&&c(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),r}()})();var o=n.Z;export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,