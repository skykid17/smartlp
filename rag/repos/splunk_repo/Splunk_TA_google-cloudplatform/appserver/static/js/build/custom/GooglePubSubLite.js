var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t,r){return(t=a(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,a(n.key),n)}}function a(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(t)?t:String(t)}e.d(t,{Z:()=>l});const l=function(){function e(t,r,n,o,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=r,this.state=n,this.mode=o,this.util=i}var t,r;return t=e,(r=[{key:"onCreate",value:function(){}},{key:"onChange",value:function(e,t,r){var n="";"location"===e&&(n=r.data.location.value,this.toggleObject(n))}},{key:"onRender",value:function(){var e=this.state.data.location.value;this.toggleObject(e)}},{key:"onSave",value:function(e){if(e.name&&e.google_credentials_name&&e.google_project){if("regional"===e.location&&!e.pubsublite_regions)return this.util.setErrorFieldMsg("pubsublite_regions","Field Region is required"),!1;if("zonal"===e.location&&!e.pubsublite_zones)return this.util.setErrorFieldMsg("pubsublite_zones","Field Zone is required"),!1}return!0}},{key:"toggleObject",value:function(e){var t=!1;"regional"===e?(t=!0,this._setValue("pubsublite_zones","")):(t=!1,this._setValue("pubsublite_regions","")),this.util.setState((function(e){var r=o({},e.data);return r.pubsublite_regions.display=t,r.pubsublite_zones.display=!t,{data:r}}))}},{key:"_setValue",value:function(e,t){this.util.setState((function(r){var n=o({},r.data);return n[e].value=t,{data:n}}))}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();var s=t.Z;export{s as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,