{"version":3,"file":"CustomInputRow.js","sources":["../../../../../../../build-ui/js/configs/InputConfig.js","../../../../../../../build-ui/js/CustomInputRow.js"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\n/**\n * A configurable map for AWS services. Each key represents a AWS input in globalConfig.json\n */\nconst INPUT_CONFIG = {\n  aws_config: {\n    label: 'SQS Configuration',\n    fields: [\n      {\n        label: 'Region',\n        field: 'aws_region'\n      },\n      {\n        label: 'SQS Queue',\n        field: 'sqs_queue'\n      }\n    ]\n  },\n  aws_config_rule: {\n    label: 'Rules Configuration',\n    accountField: 'account',\n    fields: [\n      {\n        label: 'Region',\n        field: 'region'\n      },\n      {\n        label: 'Config Rules',\n        field: 'rule_names'\n      }\n    ]\n  },\n  splunk_ta_aws_sqs: {\n    label: 'SQS Configuration',\n    fields: [\n      {\n        label: 'Region',\n        field: 'aws_region'\n      },\n      {\n        label: 'SQS Queues',\n        field: 'sqs_queues'\n      }\n    ]\n  }\n}\n\nexport default INPUT_CONFIG\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport { template, pluck, uniq } from \"underscore\";\nimport INPUT_CONFIG from \"./configs/InputConfig\";\nimport { getComponent } from \"./utils/GlobalConfigUtil\";\nimport CustomInputRowTemplate from \"../html/CustomInputRow.html\";\nimport DetailFieldTemplate from \"../html/DetailField.html\";\nimport \"../stylesheets/CustomInputRow.css\";\n\nclass CustomInputRow {\n  /**\n   * Custom Row Cell\n   * @constructor\n   * @param {Object} globalConfig - Global configuration.\n   * @param {string} serviceName - Input service name.\n   * @param {element} el - The element of the custom cell.\n   * @param {Object} row - custom row object.\n   */\n  constructor(globalConfig, serviceName, el, row) {\n    this.globalConfig = globalConfig;\n    this.serviceName = serviceName;\n    this.el = el;\n    this.row = row;\n\n    this.entities = getComponent(globalConfig, serviceName).entity;\n    this.groupFields =\n      this.serviceName in INPUT_CONFIG\n        ? INPUT_CONFIG[this.serviceName].fields\n        : [];\n    this.IGNORE_FIELDS = [\n      \"metric_dimensions\",\n      \"metric_names\",\n      \"statistics\",\n    ].concat(pluck(this.groupFields, \"field\"));\n  }\n\n  render(row) {\n    this.el.innerHTML = template(CustomInputRowTemplate)();\n\n    let html = \"\";\n\n    const definedFields = this.entities.map((i) => i.field);\n\n    html = Object.keys(row)\n      .filter(\n        (key) =>\n          definedFields.indexOf(key) > -1 &&\n          this.IGNORE_FIELDS.indexOf(key) === -1\n      )\n      .map((key) => this.entities.find((entity) => entity.field === key))\n      .filter((item) => {\n        if (\n          (\"options\" in item &&\n            \"display\" in item.options &&\n            item.options.display === false) ||\n          item.label === null ||\n          item.label === \"\"\n        ) {\n          return false;\n        }\n        return true;\n      })\n      .sort((a, b) => {\n        if (a.label > b.label) {\n          return 1;\n        } else if (a.label < b.label) {\n          return -1;\n        } else {\n          return 0;\n        }\n      })\n      .map((item) => {\n        let value = row[item.field] || \"N/A\";\n\n        // Hard coded this to handle metric_namepsace\n        if (item.field === \"metric_namespace\") {\n          try {\n            value = JSON.parse(value);\n            value = uniq(value).join(\", \");\n          } catch (err) {}\n        }\n        if (value.length > 100) {\n          value = value.substring(0, 100);\n          value += \"...\";\n        }\n        return template(DetailFieldTemplate)({\n          dtClassName: \"custom-term-ellipsis\",\n          ddClassName: \"\",\n          name: item.label,\n          value: value,\n        });\n      })\n      .join(\"\");\n\n    if (this.groupFields.length > 0) {\n      html += template(DetailFieldTemplate)({\n        dtClassName: \"custom-label\",\n        ddClassName: \"custom-label\",\n        name: \"Region\",\n        value: this.groupFields[1].label,\n      });\n\n      let groupCount = -1;\n\n      const values = pluck(this.groupFields, \"field\").map((key) => {\n        const value = JSON.parse(row[key] || \"[]\");\n\n        if (groupCount === -1) {\n          groupCount = value.length;\n        } else {\n          if (value.length !== groupCount) {\n            throw new Error(\"Wrong group\");\n          }\n        }\n\n        return value;\n      });\n\n      for (let i = 0; i < groupCount; i++) {\n        const region = values[0][i];\n        let value = values[1][i];\n\n        // For service like Config Rule, blank means all.\n        // TODO: Any other cases?\n        if (!value) {\n          value = \"ALL\";\n        }\n\n        html += template(DetailFieldTemplate)({\n          dtClassName: \"custom-detail-field\",\n          ddClassName: \"custom-detail-field\",\n          name: region,\n          value: value,\n        });\n      }\n    }\n\n    document.querySelector(\".custom-definition-list\").innerHTML = html;\n    return this;\n  }\n}\n\nexport default CustomInputRow;\n"],"names":["INPUT_CONFIG","aws_config","label","fields","field","aws_config_rule","accountField","splunk_ta_aws_sqs","CustomInputRow","globalConfig","serviceName","el","row","entities","getComponent","entity","groupFields","this","IGNORE_FIELDS","concat","pluck","innerHTML","template","html","definedFields","map","i","Object","keys","filter","key","indexOf","_this","find","item","options","display","sort","a","b","value","JSON","parse","uniq","join","err","length","substring","DetailFieldTemplate","dtClassName","ddClassName","name","groupCount","values","Error","region","document","querySelector"],"mappings":"6KASA,IAAMA,EAAe,CACnBC,WAAY,CACVC,MAAO,oBACPC,OAAQ,CACN,CACED,MAAO,SACPE,MAAO,cAET,CACEF,MAAO,YACPE,MAAO,eAIbC,gBAAiB,CACfH,MAAO,sBACPI,aAAc,UACdH,OAAQ,CACN,CACED,MAAO,SACPE,MAAO,UAET,CACEF,MAAO,eACPE,MAAO,gBAIbG,kBAAmB,CACjBL,MAAO,oBACPC,OAAQ,CACN,CACED,MAAO,SACPE,MAAO,cAET,CACEF,MAAO,aACPE,MAAO,8aCjCTI,wBASQC,EAAcC,EAAaC,EAAIC,kBACpCH,aAAeA,OACfC,YAAcA,OACdC,GAAKA,OACLC,IAAMA,OAENC,SAAWC,EAAaL,EAAcC,GAAaK,YACnDC,YACHC,KAAKP,eAAeV,EAChBA,EAAaiB,KAAKP,aAAaP,OAC/B,QACDe,cAAgB,CACnB,oBACA,eACA,cACAC,OAAOC,EAAMH,KAAKD,YAAa,0CAGnC,SAAOJ,mBACAD,GAAGU,UAAYC,iPAAAA,OAEhBC,EAAO,GAELC,EAAgBP,KAAKJ,SAASY,KAAI,SAACC,UAAMA,EAAEtB,YAEjDmB,EAAOI,OAAOC,KAAKhB,GAChBiB,QACC,SAACC,UACCN,EAAcO,QAAQD,IAAQ,IACO,IAArCE,EAAKd,cAAca,QAAQD,MAE9BL,KAAI,SAACK,UAAQE,EAAKnB,SAASoB,MAAK,SAAClB,UAAWA,EAAOX,QAAU0B,QAC7DD,QAAO,SAACK,WAEJ,YAAaA,GACZ,YAAaA,EAAKC,UACO,IAAzBD,EAAKC,QAAQC,SACA,OAAfF,EAAKhC,OACU,KAAfgC,EAAKhC,UAMRmC,MAAK,SAACC,EAAGC,UACJD,EAAEpC,MAAQqC,EAAErC,MACP,EACEoC,EAAEpC,MAAQqC,EAAErC,OACb,EAED,KAGVuB,KAAI,SAACS,OACAM,EAAQ5B,EAAIsB,EAAK9B,QAAU,SAGZ,qBAAf8B,EAAK9B,UAELoC,EAAQC,KAAKC,MAAMF,GACnBA,EAAQG,EAAKH,GAAOI,KAAK,MACzB,MAAOC,WAEPL,EAAMM,OAAS,MACjBN,EAAQA,EAAMO,UAAU,EAAG,KAC3BP,GAAS,OAEJlB,EAAS0B,EAAT1B,CAA8B,CACnC2B,YAAa,uBACbC,YAAa,GACbC,KAAMjB,EAAKhC,MACXsC,MAAOA,OAGVI,KAAK,IAEJ3B,KAAKD,YAAY8B,OAAS,EAAG,CAC/BvB,GAAQD,EAAS0B,EAAT1B,CAA8B,CACpC2B,YAAa,eACbC,YAAa,eACbC,KAAM,SACNX,MAAOvB,KAAKD,YAAY,GAAGd,gBAGzBkD,GAAc,EAEZC,EAASjC,EAAMH,KAAKD,YAAa,SAASS,KAAI,SAACK,OAC7CU,EAAQC,KAAKC,MAAM9B,EAAIkB,IAAQ,UAEjB,IAAhBsB,EACFA,EAAaZ,EAAMM,eAEfN,EAAMM,SAAWM,QACb,IAAIE,MAAM,sBAIbd,KAGAd,EAAI,EAAGA,EAAI0B,EAAY1B,IAAK,KAC7B6B,EAASF,EAAO,GAAG3B,GACrBc,EAAQa,EAAO,GAAG3B,GAIjBc,IACHA,EAAQ,OAGVjB,GAAQD,EAAS0B,EAAT1B,CAA8B,CACpC2B,YAAa,sBACbC,YAAa,sBACbC,KAAMI,EACNf,MAAOA,YAKbgB,SAASC,cAAc,2BAA2BpC,UAAYE,EACvDN"}