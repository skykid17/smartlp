{"version":3,"file":"Hook.js","sources":["../../../../../../../build-ui/js/utils/HelpLinkUtil.js","../../../../../../../build-ui/js/hooks/useFormData.jsx","../../../../../../../build-ui/js/utils/inputComponentsUtils.js","../../../../../../../build-ui/js/components/QueueInput.jsx","../../../../../../../build-ui/js/components/RulesInput.jsx","../../../../../../../build-ui/js/components/MultiQueueInput.jsx","../../../../../../../build-ui/js/components/RegionInput.jsx","../../../../../../../build-ui/js/components/SingleInputWrapper.jsx","../../../../../../../build-ui/js/components/CustomFormRows.jsx","../../../../../../../build-ui/js/utils/customFormRowsHelpers.js","../../../../../../../build-ui/js/components/FormRowsWrapper.jsx","../../../../../../../build-ui/js/utils/hookHelpers.js","../../../../../../../build-ui/js/utils/onChangeModifications.js","../../../../../../../build-ui/js/utils/defaultFieldValues.js","../../../../../../../build-ui/js/utils/validateServicesFormData.js","../../../../../../../build-ui/js/Hook.js"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nclass HelpLinkUtil {\n  getServiceLocationMap() {\n    return {\n      aws_config: \"aws.config\",\n      aws_config_rule: \"aws.configrules\",\n      aws_cloudwatch: \"aws.cloudwatch\",\n      aws_cloudwatch_logs: \"aws.cloudwatchlogs\",\n      aws_s3: \"aws.s3\",\n      splunk_ta_aws_logs: \"aws.incrementals3\",\n      aws_sqs_based_s3: \"aws.sqs_based_s3\",\n      aws_billing: \"aws.billing\",\n      aws_billing_cur: \"aws.billing.cur\",\n      aws_cloudtrail: \"aws.cloudtrail\",\n      aws_kinesis: \"aws.kinesis\",\n      aws_inspector: \"aws.inspector\",\n      aws_inspector_v2: \"aws.inspectorv2\",\n      splunk_ta_aws_sqs: \"aws.sqs\",\n      aws_metadata: \"aws.metadata\",\n    };\n  }\n\n  getAllLinks() {\n    return {\n      // aws.configure_aws.configure_sqs is hard coded in globalConfig.json\n      SQS_BASED_S3: \"aws.configure_aws.configure_sqs\",\n    };\n  }\n\n  buildInputLink(input) {\n    const link = getServiceLocationMap()[input];\n    const text = \"Learn more\";\n    const html = `<a data-test=\"link\" id=\"aws-learn-more-header-link\" target=\"_blank\" class=\"imDUvl\" href=\"/help?location=${encodeURIComponent(\n      \"[AddOns:released]\"\n    )}${link}\">${text}<svg focusable=\"false\" height=\"8px\" width=\"8px\" viewBox=\"0 0 1500 1499\" aria-hidden=\"false\" class=\"help-link-icon\"><path d=\"M1500 1125h-189.04v185.96H189.04V189.04H375V0H0v1500h1500v-375zm0-1125H723.288v190.068h469.52l-666.78 648.288 133.56 134.59 650.344-665.754v469.52l189.04 1.028L1500 0z\"></path></svg></a>`;\n    const linkElem = document.createElement(\"a\");\n    linkElem.innerHTML = html;\n    return linkElem;\n  }\n}\n\nexport const { buildInputLink, getAllLinks, getServiceLocationMap } =\n  new HelpLinkUtil();\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const FormDataContext = createContext({\n  regions: [],\n  setRegions: () => {},\n  queues: [],\n  setQueues: () => {},\n  effectiveState: {},\n  setEffectiveState: () => {},\n});\n\nexport const FormDataContextProvider = ({ hookProps, children }) => {\n  const { initFormRows, setFormState, serviceName, initAccount, initAwsIamRole } = hookProps;\n  const [account, setAccount] = useState(initAccount);\n  const [awsIamRole, setAwsIamRole] = useState(initAwsIamRole)\n  const [effectiveFormRows, setEffectiveFormRows] = useState(initFormRows);\n\n  const [regions, setRegions] = useState({});\n  const [queues, setQueues] = useState({});\n  const [rules, setRules] = useState({});\n\n  return (\n    <FormDataContext.Provider\n      value={{\n        setFormState, // to set values for region and queue in UCC form\n        serviceName, // input name\n        account, // selected account name\n        setAccount, // will be later attached to window object to provide hook data binding\n        awsIamRole,\n        setAwsIamRole,\n        effectiveFormRows, // maintains selected values of form rows\n        setEffectiveFormRows, // to set values of form rows\n        // rest are used for managing state of individual form row components\n        regions,\n        setRegions,\n        queues,\n        setQueues,\n        rules,\n        setRules,\n      }}\n    >\n      {children}\n    </FormDataContext.Provider>\n  );\n};\n\nFormDataContextProvider.propTypes = {\n  hookProps: PropTypes.object.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport const useFormData = () => useContext(FormDataContext);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport { CSRFToken } from \"@splunk/splunk-utils/config\";\nimport { createRESTURL } from \"@splunk/splunk-utils/url\";\n\nconst ERROR_REGEX = /REST Error \\[([0-9]+)\\]: (.*)\\\\\".  See/;\n\nexport const loadInputData = (url) => {\n  const headers = {\n    \"X-Splunk-Form-Key\": CSRFToken,\n    \"X-Requested-With\": \"XMLHttpRequest\",\n    \"Content-Type\": \"application/json\",\n  };\n\n  /* Check if checkpoint for the entered Input Name exists of not. */\n  return fetch(url, {\n    method: \"GET\",\n    headers,\n  }).then((response) => {\n    if (!response.ok) {\n      return Promise.reject(response);\n    } else {\n      return response.json();\n    }\n  });\n};\n/**\n * @param {string} baseMessage Base error message to construct final message\n * @param {object|string} error Caught error object\n * @param {Function} setFormState setter for form data, used to update error state\n * @param {Function | undefined} specialSetFormUpdate special setter used instead of setFormState,\n * when error.text is function, if undefined setFormState is used\n */\nexport const handleFetchError = (\n  baseMessage,\n  error,\n  setFormState,\n  specialSetFormUpdate\n) => {\n  if (typeof error.text === \"function\") {\n    error.text().then((responseText) => {\n      const matches = responseText.match(ERROR_REGEX);\n\n      const additionalMessage =\n        matches && matches.length === 3\n          ? `[${matches[1]}] ${matches[2]}`\n          : responseText;\n      if (typeof specialSetFormUpdate === \"function\") {\n        // required for Rules Input, additional logic is checked\n        // before setting up error\n        setFormState((prevState) =>\n          specialSetFormUpdate(prevState, `${baseMessage}${additionalMessage}`)\n        );\n      } else {\n        setFormState((prevState) => {\n          const newState = { ...prevState };\n          newState.errorMsg = `${baseMessage}${additionalMessage}`;\n          return newState;\n        });\n      }\n    });\n  } else {\n    setFormState((prevState) => {\n      const newState = { ...prevState };\n      newState.errorMsg = `${baseMessage}${error}`;\n      return newState;\n    });\n  }\n};\n\nexport const getUrlForAwsSqsQueueNames = (\n  account,\n  effectiveRegion,\n  awsIamRole\n) => {\n  const url = new URL(\n    createRESTURL(\"splunk_ta_aws/splunk_ta_aws_sqs_queue_names\"),\n    location\n  );\n\n  const searchParams = new URLSearchParams({\n    aws_account: account,\n    aws_region: effectiveRegion,\n    output_mode: \"json\",\n    count: \"0\",\n  });\n\n  if (awsIamRole) {\n    searchParams.set(\"aws_iam_role\", awsIamRole);\n  }\n\n  url.search = searchParams.toString();\n  return url;\n};\n\nexport const getUrlForAwsRegion = (account, serviceName) => {\n  const url = new URL(\n    createRESTURL(\"splunk_ta_aws/splunk_ta_aws_regions\"),\n    location\n  );\n\n  const searchParams = new URLSearchParams({\n    aws_service: serviceName,\n    aws_account: account,\n    output_mode: \"json\",\n    count: \"0\",\n  });\n\n  url.search = searchParams.toString();\n  return url;\n};\n\nexport const getUrlForRules = (account, effectiveRegion, awsIamRole) => {\n  const url = new URL(\n    createRESTURL(\"splunk_ta_aws/splunk_ta_aws_config_rules\"),\n    location\n  );\n\n  const searchParams = new URLSearchParams({\n    aws_account: account,\n    aws_region: effectiveRegion,\n    output_mode: \"json\",\n    count: \"0\",\n  });\n\n  if (awsIamRole) {\n    searchParams.set(\"aws_iam_role\", awsIamRole);\n  }\n\n  url.search = searchParams.toString();\n  return url;\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Select from \"@splunk/react-ui/Select\";\n\nimport { useFormData } from \"../hooks/useFormData\";\nimport {\n  loadInputData,\n  getUrlForAwsSqsQueueNames,\n  handleFetchError,\n} from \"../utils/inputComponentsUtils\";\n\nconst valueStyle = {\n  flex: \"1 0 0\",\n  borderColor: \"rgb(195, 203, 212)\",\n};\n\nfunction QueueInput({\n  initValue,\n  effectiveRegion,\n  index,\n  handleFormStateUpdate,\n}) {\n  const { queues, setQueues, account, setFormState } = useFormData();\n  const [value, setValue] = useState(initValue);\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [oldAwsRegion, setOldAwsRegion] = useState(effectiveRegion);\n\n  const handleChange = (e, { value }) => {\n    handleFormStateUpdate(index, effectiveRegion, value);\n    setValue(value);\n  };\n\n  const resetValues = (updateForm) => {\n    if (updateForm) {\n      handleFormStateUpdate(index, effectiveRegion, null);\n    }\n    setValue();\n    setOptions([]);\n    setLoading(false);\n  };\n\n  const generateOptions = (items) => {\n    return items.map((x) => <Select.Option label={x.label} value={x.value} />);\n  };\n\n  useEffect(() => {\n    if (!account) {\n      // if account is reset then the `RegionInput` removes the key from form state\n      resetValues(false);\n    }\n    if (typeof queues[account]?.[effectiveRegion] !== \"undefined\") {\n      setOptions(generateOptions(queues[account][effectiveRegion]));\n      // reset values in case dependent singleselect value is changed\n      if (effectiveRegion !== oldAwsRegion) {\n        setOldAwsRegion(effectiveRegion);\n        handleFormStateUpdate(index, effectiveRegion, null);\n        setValue();\n      }\n      setLoading(false);\n    }\n  }, [account, effectiveRegion, queues]);\n\n  useEffect(() => {\n    if (\n      account &&\n      effectiveRegion &&\n      typeof queues[account]?.[effectiveRegion] === \"undefined\"\n    ) {\n      setLoading(true);\n\n      loadInputData(getUrlForAwsSqsQueueNames(account, effectiveRegion))\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newQueues = { ...queues };\n          newQueues[account] = newQueues[account] || {};\n          newQueues[account][effectiveRegion] = entries.map((x) => ({\n            label: x.name,\n            value: x.name,\n          }));\n          setQueues(newQueues);\n        })\n        .catch((error) => {\n          resetValues(true);\n          const baseErrorMessage = `Failed to get SQS Queues for Region ${effectiveRegion}. `;\n          handleFetchError(baseErrorMessage, error);\n        });\n    }\n  }, [account, effectiveRegion]);\n\n  return (\n    <Select\n      value={value}\n      onChange={handleChange}\n      disabled={loading}\n      placeholder={\n        loading ? \"Loading...\" : \"Select an account and a region first\"\n      }\n      style={valueStyle}\n      filter\n      inline\n    >\n      {options}\n    </Select>\n  );\n}\n\nexport default memo(QueueInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Multiselect from \"@splunk/react-ui/Multiselect\";\nimport { CSRFToken } from \"@splunk/splunk-utils/config\";\nimport { createRESTURL } from \"@splunk/splunk-utils/url\";\n\nimport { useFormData } from \"../hooks/useFormData\";\nimport {\n  loadInputData,\n  getUrlForRules,\n  handleFetchError,\n} from \"../utils/inputComponentsUtils\";\n\nconst valueStyle = {\n  flex: \"1 0 0\",\n  borderColor: \"rgb(195, 203, 212)\",\n};\n\nfunction RulesInput({\n  initValue,\n  effectiveRegion,\n  index,\n  handleFormStateUpdate,\n}) {\n  const { rules, setRules, account, awsIamRole, setFormState } = useFormData();\n  const [values, setValues] = useState(initValue);\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [oldAwsRegion, setOldAwsRegion] = useState(effectiveRegion);\n\n  const handleChange = (e, { values }) => {\n    handleFormStateUpdate(index, effectiveRegion, values);\n    setValues(values);\n  };\n\n  const resetValues = (updateForm) => {\n    if (updateForm) {\n      handleFormStateUpdate(index, effectiveRegion, []);\n    }\n    setValues([]);\n    setOptions([]);\n    setLoading(false);\n  };\n\n  const generateOptions = (items) => {\n    return items.map((x) => (\n      <Multiselect.Option label={x.label} value={x.value} />\n    ));\n  };\n\n  useEffect(() => {\n    if (!account) {\n      // if account is reset then the `RegionInput` removes the key from form state\n      resetValues(false);\n    }\n    if (typeof rules[account]?.[effectiveRegion] !== \"undefined\") {\n      setOptions(generateOptions(rules[account][effectiveRegion]));\n      // reset values in case dependent singleselect value is changed\n      if (effectiveRegion !== oldAwsRegion) {\n        setOldAwsRegion(effectiveRegion);\n        handleFormStateUpdate(index, effectiveRegion, []);\n        setValues([]);\n      }\n      setLoading(false);\n    }\n  }, [account, effectiveRegion, rules]);\n\n  useEffect(() => {\n    if (\n      account &&\n      effectiveRegion &&\n      typeof rules[account]?.[effectiveRegion] === \"undefined\"\n    ) {\n      setLoading(true);\n      loadInputData(getUrlForRules(account, effectiveRegion, awsIamRole))\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newRules = { ...rules };\n          newRules[account] =\n            typeof newRules[account] === \"undefined\" ? {} : newRules[account];\n          newRules[account][effectiveRegion] = entries.map((x) => ({\n            label: x.name,\n            value: x.name,\n          }));\n          setRules(newRules);\n        })\n        .catch((error) => {\n          const baseMessage = `Failed to get Config Rules for Region ${effectiveRegion}. `;\n\n          const specialSetFormUpdate = (prevState, errorMsg) => {\n            const newState = { ...prevState };\n            const regions = newState.data.region.value;\n            if (regions.includes(effectiveRegion)) {\n              resetValues(true);\n              handleFormStateUpdate(index, effectiveRegion, null, baseMessage);\n              newState.errorMsg = errorMsg;\n            }\n            return newState;\n          };\n\n          handleFetchError(message, error, setFormState, specialSetFormUpdate);\n        });\n    }\n  }, [account, effectiveRegion]);\n\n  return (\n    <Multiselect\n      values={values}\n      onChange={handleChange}\n      disabled={loading}\n      placeholder={\n        loading\n          ? \"Loading...\"\n          : \"Leave blank to select all rules in this region\"\n      }\n      style={valueStyle}\n      inline\n    >\n      {options}\n    </Multiselect>\n  );\n}\n\nexport default memo(RulesInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Multiselect from \"@splunk/react-ui/Multiselect\";\n\nimport { useFormData } from \"../hooks/useFormData\";\nimport {\n  loadInputData,\n  getUrlForAwsSqsQueueNames,\n  handleFetchError,\n} from \"../utils/inputComponentsUtils\";\n\nconst valueStyle = {\n  flex: \"1 0 0\",\n  borderColor: \"rgb(195, 203, 212)\",\n};\n\nfunction MultiQueueInput({\n  initValue,\n  effectiveRegion,\n  index,\n  handleFormStateUpdate,\n}) {\n  const { queues, setQueues, account, awsIamRole, setFormState } =\n    useFormData();\n  const [values, setValues] = useState(initValue);\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [oldAwsRegion, setOldAwsRegion] = useState(effectiveRegion);\n\n  const handleChange = (e, { values }) => {\n    handleFormStateUpdate(index, effectiveRegion, values);\n    setValues(values);\n  };\n\n  const resetValues = (updateForm) => {\n    if (updateForm) {\n      handleFormStateUpdate(index, effectiveRegion, []);\n    }\n    setValues([]);\n    setOptions([]);\n    setLoading(false);\n  };\n\n  const generateOptions = (items) => {\n    return items.map((x) => (\n      <Multiselect.Option label={x.label} value={x.value} />\n    ));\n  };\n\n  useEffect(() => {\n    if (!account) {\n      // if account is reset then the `RegionInput` removes the key from form state\n      resetValues(false);\n    }\n    if (typeof queues[account]?.[effectiveRegion] !== \"undefined\") {\n      setOptions(generateOptions(queues[account][effectiveRegion]));\n      // reset values in case dependent singleselect value is changed\n      if (effectiveRegion !== oldAwsRegion) {\n        setOldAwsRegion(effectiveRegion);\n        handleFormStateUpdate(index, effectiveRegion, []);\n        setValues([]);\n      }\n      setLoading(false);\n    }\n  }, [account, effectiveRegion, queues]);\n\n  useEffect(() => {\n    if (\n      account &&\n      effectiveRegion &&\n      typeof queues[account]?.[effectiveRegion] === \"undefined\"\n    ) {\n      setLoading(true);\n\n      loadInputData(\n        getUrlForAwsSqsQueueNames(account, effectiveRegion, awsIamRole)\n      )\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newQueues = { ...queues };\n          newQueues[account] = newQueues[account] || {};\n          newQueues[account][effectiveRegion] = entries.map((x) => ({\n            label: x.name,\n            value: x.name,\n          }));\n          setQueues(newQueues);\n        })\n        .catch((error) => {\n          resetValues(true);\n          const baseErrorMessage = `Failed to get SQS Queues for Region ${effectiveRegion}. `;\n          handleFetchError(baseErrorMessage, error, setFormState);\n        });\n    }\n  }, [account, effectiveRegion]);\n\n  return (\n    <Multiselect\n      values={values}\n      onChange={handleChange}\n      disabled={loading}\n      placeholder={\n        loading ? \"Loading...\" : \"Select an account and a region first\"\n      }\n      style={valueStyle}\n      inline\n    >\n      {options}\n    </Multiselect>\n  );\n}\n\nexport default memo(MultiQueueInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Select from \"@splunk/react-ui/Select\";\n\nimport { useFormData } from \"../hooks/useFormData\";\nimport {\n  getUrlForAwsRegion,\n  loadInputData,\n  handleFetchError,\n} from \"../utils/inputComponentsUtils\";\n\nconst keyStyle = {\n  flex: \"0 0 150px\",\n  display: \"flex\",\n  alignItems: \"center\",\n};\n\nfunction RegionInput({\n  initValue,\n  handleChangeRegion,\n  index,\n  handleFormStateUpdate,\n  handleFormStateDelete,\n}) {\n  const { regions, setRegions, serviceName, account, setFormState } =\n    useFormData();\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState(initValue);\n\n  const handleChange = (e, { value }) => {\n    setValue(value);\n    handleChangeRegion(value);\n    if (\n      serviceName === \"aws_config_rule\" ||\n      serviceName === \"splunk_ta_aws_sqs\"\n    ) {\n      handleFormStateUpdate(index, value, []);\n    } else {\n      handleFormStateUpdate(index, value, null);\n    }\n    // reset error message of rest requests on filter change\n    setFormState((prevState) => {\n      const newState = { ...prevState };\n      newState.errorMsg = \"\";\n      return newState;\n    });\n  };\n\n  const resetValues = () => {\n    handleFormStateDelete(index);\n    setValue();\n    setOptions([]);\n    setLoading(false);\n  };\n\n  const generateOptions = (items) => {\n    const list = items.map((x) => (\n      <Select.Option label={x.label} value={x.value} />\n    ));\n    return list;\n  };\n\n  useEffect(() => {\n    if (!account) {\n      resetValues();\n    }\n    if (typeof regions[account] !== \"undefined\") {\n      setOptions(generateOptions(regions[account]));\n      setLoading(false);\n    }\n  }, [account, regions]);\n\n  useEffect(() => {\n    if (account && typeof regions[account] === \"undefined\") {\n      setLoading(true);\n\n      loadInputData(getUrlForAwsRegion(account, serviceName))\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newRegions = { ...regions };\n          newRegions[account] = entries.map((x) => ({\n            label: x.content.label,\n            value: x.name,\n          }));\n          setRegions(newRegions);\n        })\n        .catch((error) => {\n          resetValues();\n          const baseMessage = `Failed to get Region for Account ${account}. `;\n          handleFetchError(baseMessage, error, setFormState);\n        });\n    }\n  }, [account]);\n\n  return (\n    <div style={keyStyle}>\n      <Select\n        value={value}\n        onChange={handleChange}\n        disabled={loading}\n        placeholder={loading ? \"Loading...\" : \"Select...\"}\n        style={{\n          width: \"150px\",\n          minWidth: \"100%\",\n          borderColor: \"rgb(195, 203, 212)\",\n        }}\n        filter\n        inline\n      >\n        {options}\n      </Select>\n    </div>\n  );\n}\n\nexport default memo(RegionInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, memo, useEffect } from \"react\";\n\nimport QueueInput from \"./QueueInput\";\nimport RulesInput from \"./RulesInput\";\nimport MultiQueueInput from \"./MultiQueueInput\";\nimport { useFormData } from \"../hooks/useFormData\";\nimport RegionInput from \"./RegionInput\";\n\nconst spanStyle = {\n  display: \"inline-flex\",\n  lineHeight: \"32px\",\n  flex: \"0 0 30px\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nfunction SingleInputWrapper({\n  initValue,\n  index,\n  handleFormStateUpdate,\n  handleFormStateDelete,\n}) {\n  const [effectiveRegion, setEffectiveRegion] = useState(initValue?.region);\n  const { serviceName } = useFormData();\n  const [secondInput, setSecondInput] = useState(null);\n  const sharedProps = { effectiveRegion, index, handleFormStateUpdate };\n\n  useEffect(() => {\n    switch (serviceName) {\n      case \"splunk_ta_aws_sqs\":\n        setSecondInput(\n          <MultiQueueInput initValue={initValue?.queues} {...sharedProps} />\n        );\n        break;\n      case \"aws_config\":\n        setSecondInput(\n          <QueueInput initValue={initValue?.queues} {...sharedProps} />\n        );\n        break;\n      default:\n        setSecondInput(\n          <RulesInput initValue={initValue?.rules} {...sharedProps} />\n        );\n        break;\n    }\n\n    // remove item from effectiveFormState on component unmount\n    return () => {\n      handleFormStateDelete(index);\n    };\n  }, [effectiveRegion, serviceName]);\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <RegionInput\n        initValue={initValue?.region}\n        handleChangeRegion={setEffectiveRegion}\n        handleFormStateDelete={handleFormStateDelete}\n        {...sharedProps}\n      />\n      <span style={spanStyle}></span>\n      {secondInput}\n    </div>\n  );\n}\n\nexport default memo(SingleInputWrapper);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\n\nimport { createDOMID } from \"@splunk/ui-utils/id\";\nimport FormRows from \"@splunk/react-ui/FormRows\";\nimport { useFormData } from \"../hooks/useFormData\";\nimport SingleInputWrapper from \"./SingleInputWrapper\";\nimport {\n  getUpdatedStateAwsConfigRuleService,\n  getUpdatedStateSplunkTaAwsSqsService,\n  getUpdatedStateWithAwsRegionAndSqsQueue,\n} from \"../utils/customFormRowsHelpers\";\n\nfunction CustomFormRows() {\n  const [items, setItems] = useState([]);\n  const [title, setTitle] = useState(\"Config Rules\");\n  const {\n    setAccount,\n    setAwsIamRole,\n    serviceName,\n    setFormState,\n    effectiveFormRows,\n    setEffectiveFormRows,\n  } = useFormData();\n\n  // data binding for account state var -> custom hook onChange\n  useEffect(() => {\n    window.setAccount = (value) => {\n      setAccount(value);\n    };\n\n    window.setAwsIamRole = (value) => {\n      setAwsIamRole(value);\n    };\n\n    if (serviceName === \"splunk_ta_aws_sqs\") {\n      setTitle(\"SQS Queues\");\n    } else if (serviceName === \"aws_config\") {\n      setTitle(\"SQS Queue\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (Object.entries(effectiveFormRows).length > 0) {\n      setItems(\n        Object.entries(effectiveFormRows).map(([k, v], idx) => {\n          return getRowElement(idx, k, v);\n        })\n      );\n    } else {\n      setItems([\n        getRowElement(\n          0,\n          Date.now().toString(36) + Math.random().toString(36).substring(2)\n        ),\n      ]);\n    }\n  }, []);\n\n  useEffect(() => {\n    // update form state to submit updated data on form save\n    const regions = [];\n    const queues = [];\n    const rules = [];\n    const errors = [];\n    Object.entries(effectiveFormRows).forEach(([_, v]) => {\n      regions.push(v.region);\n      if (serviceName === \"aws_config_rule\") {\n        rules.push(v.rules && v.rules.join(\",\"));\n        errors.push(v.error);\n      } else if (serviceName === \"splunk_ta_aws_sqs\") {\n        queues.push(v.queues && v.queues.join(\",\"));\n      } else {\n        queues.push(v.queues);\n      }\n    });\n    setFormState((prevState) => {\n      const newState = { ...prevState };\n      if (serviceName === \"aws_config_rule\") {\n        return getUpdatedStateAwsConfigRuleService(\n          newState,\n          regions,\n          rules,\n          errors\n        );\n      }\n\n      if (serviceName === \"splunk_ta_aws_sqs\") {\n        return getUpdatedStateSplunkTaAwsSqsService(newState, regions, queues);\n      }\n\n      return getUpdatedStateWithAwsRegionAndSqsQueue(newState, regions, queues);\n    });\n  }, [effectiveFormRows]);\n\n  const handleFormStateUpdate = (index, region, value, error = null) => {\n    setEffectiveFormRows((oldFormRows) => {\n      const newFormRows = { ...oldFormRows };\n      if (serviceName === \"aws_config_rule\") {\n        newFormRows[index] = { region, rules: value, error: error };\n      } else if (serviceName === \"splunk_ta_aws_sqs\") {\n        newFormRows[index] = { region, queues: value };\n      } else {\n        newFormRows[index] = { region, queues: value };\n      }\n\n      return newFormRows;\n    });\n  };\n\n  const getRowElement = (rowIndex, singleInputWrapperIndex, initValue) => (\n    <FormRows.Row\n      index={rowIndex}\n      key={createDOMID()}\n      onRequestRemove={handleRequestRemove}\n    >\n      <SingleInputWrapper\n        index={singleInputWrapperIndex}\n        initValue={initValue}\n        handleFormStateUpdate={handleFormStateUpdate}\n        handleFormStateDelete={handleFormStateDelete}\n      />\n    </FormRows.Row>\n  );\n\n  const handleFormStateDelete = (index) => {\n    setEffectiveFormRows((oldFormRows) => {\n      const newFormRows = { ...oldFormRows };\n      delete newFormRows[index];\n      return newFormRows;\n    });\n  };\n\n  const handleRequestRemove = (e, { index }) => {\n    setItems((oldItems) => {\n      if (oldItems.length === 1) {\n        return oldItems;\n      }\n      return FormRows.removeRow(index, oldItems);\n    });\n  };\n\n  const handleRequestAdd = () => {\n    setItems((oldItems) => {\n      const index =\n        Date.now().toString(36) + Math.random().toString(36).substring(2);\n      setEffectiveFormRows((oldFormRows) => {\n        const newFormRows = { ...oldFormRows };\n        newFormRows[index] = {};\n        return newFormRows;\n      });\n      return FormRows.addRow(getRowElement(oldItems.length, index), oldItems);\n    });\n  };\n\n  const header = (\n    <div>\n      <span\n        style={{\n          display: \"inline-block\",\n          width: 180,\n        }}\n        id=\"header-key\"\n      >\n        Region\n      </span>\n      <span style={{ display: \"inline-block\" }} id=\"header-value\">\n        {title}\n      </span>\n    </div>\n  );\n\n  return (\n    <FormRows\n      addLabel=\"Add Another\"\n      header={header}\n      onRequestAdd={handleRequestAdd}\n      style={{ width: 500 }}\n    >\n      {items}\n    </FormRows>\n  );\n}\n\nexport default memo(CustomFormRows);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nexport const getUpdatedStateAwsConfigRuleService = (\n  state,\n  regions,\n  rules,\n  errors,\n  _queues\n) => {\n  state.data.region.value = JSON.stringify(\n    regions.length === 0 ? [\"\"] : regions\n  );\n  state.data.rule_names.value = JSON.stringify(\n    rules.length === 0 ? [\"\"] : rules\n  );\n  state.data.rule_names.custom_errors = JSON.stringify(\n    errors.length === 0 ? [\"\"] : errors\n  );\n  return state;\n};\n\nexport const getUpdatedStateSplunkTaAwsSqsService = (\n  state,\n  regions,\n  queues\n) => {\n  state.data.aws_region.value = JSON.stringify(\n    regions.length === 0 ? [\"\"] : regions\n  );\n  state.data.sqs_queues.value = JSON.stringify(\n    queues.length === 0 ? [\"\"] : queues\n  );\n  return state;\n};\n\nexport const getUpdatedStateWithAwsRegionAndSqsQueue = (\n  state,\n  regions,\n  queues\n) => {\n  state.data.aws_region.value = JSON.stringify(\n    regions.length === 0 ? [\"\"] : regions\n  );\n  // \"sqs_queue\" insteda of \"sqs_queues\" is on purpose\n  state.data.sqs_queue.value = JSON.stringify(\n    queues.length === 0 ? [\"\"] : queues\n  );\n  return state;\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React from \"react\";\n\nimport { SplunkThemeProvider } from \"@splunk/themes\";\n\nimport { ThemeProviderSettings } from \"../styles/Theme\";\nimport { FormDataContextProvider } from \"../hooks/useFormData\";\nimport CustomFormRows from \"./CustomFormRows\";\n\nfunction FormRowsWrapper({ hookProps }) {\n  return (\n    <SplunkThemeProvider {...ThemeProviderSettings}>\n      <FormDataContextProvider hookProps={hookProps}>\n        <CustomFormRows />\n      </FormDataContextProvider>\n    </SplunkThemeProvider>\n  );\n}\n\nexport default FormRowsWrapper;\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { CSRFToken } from \"@splunk/splunk-utils/config\";\nimport { createRESTURL } from \"@splunk/splunk-utils/url\";\nimport { detectSource, getMapData } from \"../configs/SourceInput\";\nimport { buildInputLink } from \"./HelpLinkUtil\";\nimport FormRowsWrapper from \"../components/FormRowsWrapper\";\nimport {\n  APP_NAME,\n  DLQ_REQUIRED_ERROR,\n  VISIBILITY_TIMEOUT_WARNING,\n  QUEUE_NOT_FOUND_ERROR,\n} from \"../consts\";\n\n/**\n * @param {string} key field key\n */\nexport const dataToHideField = (key) => ({\n  key: key,\n  prop: \"display\",\n  value: false,\n});\n\n/**\n * @param {string} key field key\n */\nexport const dataToShowField = (key) => ({\n  key: key,\n  prop: \"display\",\n  value: true,\n});\n\n/**\n * @param {string} key field key\n */\nexport const dataToDisableField = (key) => ({\n  key: key,\n  prop: \"disabled\",\n  value: true,\n});\n\nexport const getNormalizeData = (stateData) => {\n  const data = {};\n  const dataKeys = Object.keys(stateData);\n  dataKeys.forEach((key) => {\n    data[key] = stateData[key].value;\n  });\n  return data;\n};\n\n/**\n * removing all params from url and editing window history\n */\nexport const removeExtraParamsFromURL = () => {\n  const pathname = window.location.pathname;\n  // async removal to delete all params, if sync input stays\n  setTimeout(() => window.history.pushState({}, \"\", pathname));\n};\n\nconst extractQueryParams = () => {\n  // ADDON-17149. On IE, the URL location is different, so we need to use hash.\n  const search = document.location.search || document.location.hash;\n\n  const params = {};\n  // slice(1) removes ? or # from string\n  const newUrl = new URLSearchParams(search.slice(1));\n\n  for (const [key, value] of newUrl.entries()) {\n    params[key] = value;\n  }\n\n  return params;\n};\n\n/**\n *\n * @param {string} mode form mode\n * @param {object} stateData data from state of form\n * @param {string} serviceName name of service\n * @returns input and service of current form\n */\nexport const getInputService = (mode, stateData, serviceName) => {\n  const params = extractQueryParams();\n  let { input, service } = params;\n\n  if (!input || mode === \"edit\" || mode === \"clone\") {\n    const normalizedData = getNormalizeData(stateData);\n    input = detectSource(normalizedData, serviceName);\n  }\n\n  return {\n    input,\n    service,\n  };\n};\n\nexport const validateSQSqueue = async (dataDict, setErrorFieldMsg) => {\n  let restURI = `splunk_ta_aws/splunk_ta_aws_sqs_queue_attributes?aws_account=${dataDict.aws_account}&aws_region=${dataDict.sqs_queue_region}&sqs_queue_url=${dataDict.sqs_queue_url}&private_endpoint_enabled=${dataDict.private_endpoint_enabled}&sts_private_endpoint_url=${dataDict.sts_private_endpoint_url}&sqs_private_endpoint_url=${dataDict.sqs_private_endpoint_url}&output_mode=json`;\n  const iamRole = dataDict.aws_iam_role;\n\n  if (iamRole) {\n    restURI += `&aws_iam_role=${iamRole}`;\n  }\n\n  const url = createRESTURL(restURI, {\n    app: APP_NAME,\n    sharing: \"app\",\n  });\n\n  const usingDLQ = dataDict.using_dlq;\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"X-Splunk-Form-Key\": CSRFToken,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (response.status === 200) {\n      const data = await response.json();\n      const queueAttributes = data.entry[0].content;\n      const visibilityTimeout = queueAttributes.VisibilityTimeout;\n      const redrivePolicy = queueAttributes.RedrivePolicy;\n\n      // check redrivePolicy & visibilityTimeout if it is DLQ (only if using_dlq is checked)\n      // using non-strict inequality here (==) because usingDLQ can be a integer or string type\n      if (usingDLQ != 0 && !redrivePolicy) {\n        setErrorFieldMsg(\"sqs_queue_url\", DLQ_REQUIRED_ERROR);\n        return false;\n      } else if (usingDLQ !== 0 && visibilityTimeout < 300) {\n        setErrorFieldMsg(\"sqs_queue_url\", VISIBILITY_TIMEOUT_WARNING);\n        return false;\n      }\n    } else {\n      setErrorFieldMsg(\"sqs_queue_url\", QUEUE_NOT_FOUND_ERROR);\n      return false;\n    }\n  } catch (err) {\n    setErrorFieldMsg(\n      \"sqs_queue_url\",\n      `validation of selected SQS queue failed. ERROR : ${err}`\n    );\n    return false;\n  }\n  return true;\n};\n/**\n *\n * @param {string} service name of service\n */\nexport const addLinkToFormLabel = (service) => {\n  const label = document.querySelector(\"form > div > div > span\");\n\n  if (label) {\n    const html = buildInputLink(service);\n    label.append(html);\n  }\n};\n\nconst waitForElementToDisplay = (\n  selector,\n  callback,\n  checkFrequencyInMs,\n  timeoutInMs\n) => {\n  const startTimeInMs = Date.now();\n  const loopSearch = () => {\n    if (document.querySelector(selector)) {\n      callback();\n    } else {\n      setTimeout(() => {\n        if (Date.now() - startTimeInMs > timeoutInMs) return;\n        loopSearch();\n      }, checkFrequencyInMs);\n    }\n  };\n  loopSearch();\n};\n\n/**\n *\n * @param {string} mode form mode\n * @param {string} input input name of current form\n * @param {string} service service name of current form\n *\n * Edits url and window history to align with form\n */\nexport const alignUrlAndFixHistory = (mode, input, service) => {\n  if (mode === \"edit\" || mode === \"clone\") {\n    const val = window.location.toString().split(\"?\");\n    const newUrl = new URL(val[0]);\n    newUrl.searchParams.set(\"service\", service);\n    newUrl.searchParams.set(\"input\", input);\n    newUrl.searchParams.set(\"action\", mode);\n    // using replace as current url is not needed in history\n    window.history.replaceState({}, \"\", newUrl);\n  }\n};\n\nexport const parseRulesAndRegionsAwsConfigRule = (state) => {\n  const result = [];\n  const awsRegions = JSON.parse(state.data.region.value);\n  const ruleNames = JSON.parse(state.data.rule_names.value).map((x) =>\n    x.split(\",\")\n  );\n  awsRegions.forEach((region, idx) => {\n    // key for `initFormRows` needs to be unique instead of being index\n    result[Date.now().toString(36) + Math.random().toString(36).substring(2)] =\n      {\n        region,\n        rules: ruleNames[idx],\n      };\n  });\n  return result;\n};\n\nexport const parseRegionsAndQueuesAwsConfigAndSqs = (state, serviceName) => {\n  const result = [];\n  const awsRegions = JSON.parse(state.data.aws_region.value);\n  let sqsQueues = null;\n  if (serviceName === \"splunk_ta_aws_sqs\") {\n    sqsQueues = JSON.parse(state.data.sqs_queues.value).map((x) =>\n      x.split(\",\")\n    );\n  } else {\n    sqsQueues = JSON.parse(state.data.sqs_queue.value);\n  }\n  awsRegions.forEach((region, idx) => {\n    // key for `initFormRows` needs to be unique instead of being index\n    result[Date.now().toString(36) + Math.random().toString(36).substr(2)] = {\n      region,\n      queues: sqsQueues[idx],\n    };\n  });\n\n  return result;\n};\n\nconst getInitialFormData = (mode, state, serviceName) => {\n  if (mode === \"edit\" || mode === \"clone\") {\n    if (serviceName === \"aws_config_rule\") {\n      return parseRulesAndRegionsAwsConfigRule(state);\n    }\n\n    return parseRegionsAndQueuesAwsConfigAndSqs(state, serviceName);\n  }\n\n  return {};\n};\n\n/**\n *\n * @param {string} service service name\n * @param {string} itemInput input name\n * @returns static data for current service needed in form\n */\nexport const getInitialDataForServiceInput = (service, itemInput) => {\n  const dataForServiceInput = [];\n  const mapData = getMapData();\n  const serviceData = mapData.find((item) => {\n    return item.service === service && item.input === itemInput;\n  });\n\n  if (serviceData) {\n    const { service, input, ...models } = serviceData;\n    Object.keys(models).forEach((key) => {\n      dataForServiceInput.push({ key, prop: \"value\", value: models[key] });\n    });\n  }\n  return dataForServiceInput;\n};\n\n/**\n *\n * @param {Object} state form state\n * @param {string} serviceName service name\n * @param {Function} setFormState hook to update form state\n * @param {stirng} mode form mode (one of 'create','edit','clone','config')\n */\nexport const renderCustomInputForService = (\n  state,\n  serviceName,\n  setFormState,\n  mode\n) => {\n  const accountValue =\n    state.data?.account?.value || state.data?.aws_account?.value;\n\n  const AwsIamRoleValue = state.data?.aws_iam_role?.value;\n\n  const initFormRows = getInitialFormData(mode, state, serviceName);\n\n  waitForElementToDisplay(\n    \"#group_selection\",\n    () => {\n      ReactDOM.render(\n        <FormRowsWrapper\n          hookProps={{\n            initFormRows,\n            setFormState,\n            serviceName,\n            initAccount: accountValue,\n            initAwsIamRole: AwsIamRoleValue,\n          }}\n        />,\n        document.getElementById(\"group_selection\")\n      );\n    },\n    500,\n    9000\n  );\n};\n\nexport const fetchConflictFields = (service, state) => {\n  const contextURL = createRESTURL(`splunk_ta_aws_${service}`, {\n    app: APP_NAME,\n    sharing: \"app\",\n  });\n\n  return fetch(`${contextURL}?output_mode=json`) /* global fetch:false */\n    .then((response) => response.json())\n    .then((data) => {\n      if (Array.isArray(data.entry) && data.entry.length) {\n        const currentEntry = data.entry.find(\n          (entry) =>\n            entry.name === state.data.name.value &&\n            entry?.content?._conflict_fields\n        );\n\n        if (currentEntry) {\n          return JSON.parse(currentEntry.content._conflict_fields);\n        }\n      }\n      return {};\n    });\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport { LOG_NAME_FORMAT_POSTFIX, SQS_BASED_S3_SOURCETYPES } from \"../consts\";\nimport { dataToShowField, dataToHideField } from \"./hookHelpers\";\n\nexport const handleS3FileDecoder = (value, setValue) => {\n  const sourceType = SQS_BASED_S3_SOURCETYPES[value];\n  setValue(\"sourcetype\", sourceType);\n  if (value === \"AmazonSecurityLake\") {\n    setValue(\"sqs_sns_validation\", 0);\n  }\n};\n\nexport const handleDistriburionID = (value, setValue) => {\n  const logNameFormat = value + LOG_NAME_FORMAT_POSTFIX;\n  setValue(\"log_name_format\", logNameFormat);\n};\n\nexport const handleMetricIndexFlag = (value, setValue) => {\n  if (value === \"1\") {\n    setValue(\"sourcetype\", SQS_BASED_S3_SOURCETYPES[\"VPCFlowLogsMetric\"]);\n  } else {\n    setValue(\"sourcetype\", SQS_BASED_S3_SOURCETYPES[\"VPCFlowLogs\"]);\n  }\n};\n\nexport const FIELD_HANDLERS_MAP = {\n  distribution_id: handleDistriburionID,\n  s3_file_decoder: handleS3FileDecoder,\n  metric_index_flag: handleMetricIndexFlag,\n};\n\nconst handleAwsAccount = (dataDict) => {\n  window.setAccount(dataDict.data.aws_account.value);\n};\n\nconst handleAwsIamRole = (dataDict) => {\n  window.setAwsIamRole(dataDict.data.aws_iam_role.value);\n};\n\nconst handleAccountForAwsConfigRule = (dataDict) => {\n  window.setAccount(dataDict.data.account.value);\n};\n\nconst setRegionValueForAwsKinesis = (setValue, state) => {\n  setValue(\"region\", state.data[\"region\"].value);\n};\n\nconst setStreamValueForAwsKinesis = (setValue, state) => {\n  setValue(\"stream_names\", state.data[\"stream_names\"].value);\n};\n\nexport const handleAwsKinessisChange = (\n  _value,\n  _dataDict,\n  setValue,\n  state,\n  field\n) => {\n  if (field === \"account\") {\n    setRegionValueForAwsKinesis(setValue, state);\n  }\n  if (\n    [\n      // fields that should trigger steam value update\n      \"account\",\n      \"aws_iam_role\",\n      \"region\",\n      \"private_endpoint_enabled\",\n      \"sts_private_endpoint_url\",\n      \"kinesis_private_endpoint_url\",\n    ].includes(field)\n  ) {\n    setStreamValueForAwsKinesis(setValue, state);\n  }\n};\n\nexport const handleAwsConfigRuleService = (\n  _value,\n  dataDict,\n  _setValue,\n  _state,\n  field\n) => {\n  if (field === \"account\") {\n    handleAccountForAwsConfigRule(dataDict);\n  }\n  if (field === \"aws_iam_role\") {\n    handleAwsIamRole(dataDict);\n  }\n};\n\nexport const handleAwsSplunkTaAwsSqs = (\n  _value,\n  dataDict,\n  _setValue,\n  _state,\n  field\n) => {\n  if (field === \"aws_account\") {\n    handleAwsAccount(dataDict);\n  }\n  if (field === \"aws_iam_role\") {\n    handleAwsIamRole(dataDict);\n  }\n};\n\nexport const handleAWSConfig = (_value, dataDict, _setValue, _state, field) => {\n  if (field === \"aws_account\") {\n    handleAwsAccount(dataDict);\n  }\n};\n\n/**\n *\n * @param {string} value value of changed field\n * @param {object} _dataDict not used\n * @param {Function} _setValue not used\n * @param {object} state form state\n * @param {string} field field name\n * @param {(changes: Array<{key:string,prop:string,value: string|boolean|number}>) => void} updateState handler to apply many state changes\n */\nexport const handleAwsConfigtrailLake = (\n  value,\n  _dataDict,\n  _setValue,\n  state,\n  field,\n  updateState\n) => {\n  const dataToUpdateState = [];\n\n  if (field === \"aws_account\") {\n    dataToUpdateState.push({\n      key: \"aws_region\",\n      value: state.data[\"aws_region\"].value,\n      prop: \"value\",\n    });\n  }\n\n  if (\n    field === \"aws_account\" ||\n    field === \"aws_iam_role\" ||\n    field === \"aws_region\" ||\n    field === \"private_endpoint_enabled\" ||\n    field === \"sts_private_endpoint_url\" ||\n    field === \"cloudtrail_private_endpoint_url\"\n  ) {\n    dataToUpdateState.push({\n      key: \"event_data_store\",\n      value: state.data[\"event_data_store\"].value,\n      prop: \"value\",\n    });\n  }\n\n  if (field === \"input_mode\") {\n    if (value === \"index_once\") {\n      dataToUpdateState.push(dataToShowField(\"end_date_time\"));\n      dataToUpdateState.push(dataToHideField(\"delay_throttle\"));\n      dataToUpdateState.push(dataToHideField(\"interval\"));\n    } else {\n      dataToUpdateState.push(dataToHideField(\"end_date_time\"));\n      dataToUpdateState.push(dataToShowField(\"delay_throttle\"));\n      dataToUpdateState.push(dataToShowField(\"interval\"));\n    }\n  } else if (field === \"private_endpoint_enabled\") {\n    const showOrHideHandler = value ? dataToShowField : dataToHideField;\n\n    [\"sts_private_endpoint_url\", \"cloudtrail_private_endpoint_url\"].forEach(\n      (key) => dataToUpdateState.push(showOrHideHandler(key))\n    );\n  }\n\n  updateState(dataToUpdateState);\n};\n\nexport const SERVICE_HANDLERS_MAP = {\n  aws_config: handleAWSConfig,\n  splunk_ta_aws_sqs: handleAwsSplunkTaAwsSqs,\n  aws_config_rule: handleAwsConfigRuleService,\n  aws_kinesis: handleAwsKinessisChange,\n  aws_cloudtrail_lake: handleAwsConfigtrailLake,\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport moment from \"moment\";\n\nimport {\n  SPLUNK_TA_AWS_LOGS_SOURCETYPES,\n  SQS_BASED_S3_SOURCETYPES,\n  LOG_NAME_FORMAT_POSTFIX,\n} from \"../consts\";\n\nimport {\n  dataToShowField,\n  dataToHideField,\n  dataToDisableField,\n} from \"../utils/hookHelpers\";\n\nexport const getAwsBillingInitialDateScan = () => {\n  const defaultValue =\n    moment()\n      .utc()\n      .subtract(3, \"months\")\n      .startOf(\"month\")\n      .format(\"YYYY-MM-DDTHH:mm:ss\") + \"Z\";\n\n  return {\n    key: \"initial_scan_datetime\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsBillingCurrInitialDateScan = () => {\n  const defaultValue = moment()\n    .utc()\n    .subtract(3, \"months\")\n    .startOf(\"month\")\n    .format(\"YYYY-MM\");\n\n  return {\n    key: \"start_date\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsS3ParseDelimiter = () => {\n  const defaultValue = \",\";\n  return {\n    key: \"parse_csv_with_delimiter\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsS3ParseWithHeader = () => {\n  const defaultValue = 0;\n  return {\n    key: \"parse_csv_with_header\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsS3InitialScanDate = () => {\n  const defaultValue = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss\") + \"Z\";\n  return {\n    key: \"initial_scan_datetime\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsSqsBasedS3SourceType = (state) => {\n  const sourceType = SQS_BASED_S3_SOURCETYPES[state.data.s3_file_decoder.value];\n  return {\n    key: \"sourcetype\",\n    prop: \"value\",\n    value: sourceType,\n  };\n};\n\nexport const getSourcetypeForVPC = (state) => {\n  let sourceType = SQS_BASED_S3_SOURCETYPES[\"VPCFlowLogs\"];\n  if (state.data.metric_index_flag.value === \"1\") {\n    sourceType = SQS_BASED_S3_SOURCETYPES[\"VPCFlowLogsMetric\"];\n  }\n  return {\n    key: \"sourcetype\",\n    prop: \"value\",\n    value: sourceType,\n  };\n};\n\nexport const getMetricIndexFlagVpc = () => {\n  const defaultValue = \"0\";\n  return {\n    key: \"metric_index_flag\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getCloudWatchLogsQueryWindowSize = () => {\n  const defaultValue = 10;\n  return {\n    key: \"query_window_size\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsSqsBasedS3ParseDemilimter = () => {\n  const defaultValue = \",\";\n  return {\n    key: \"parse_csv_with_delimiter\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsSqsBasedS3ParseHeader = () => {\n  const defaultValue = 0;\n  return {\n    key: \"parse_csv_with_header\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsSqsBasedS3PrivateEnpointEnabled = () => {\n  const defaultValue = 0;\n  return {\n    key: \"private_endpoint_enabled\",\n    prop: \"value\",\n    value: defaultValue,\n  };\n};\n\nexport const getAwsLogsSourceType = (state) => {\n  const sourceType = SPLUNK_TA_AWS_LOGS_SOURCETYPES[state.data.log_type.value];\n  return {\n    key: \"sourcetype\",\n    prop: \"value\",\n    value: sourceType,\n  };\n};\n\nexport const getAwsLogsLogStartDate = () => {\n  const sevenDaysAgo = moment().utc().subtract(7, \"days\").format(\"YYYY-MM-DD\");\n  return {\n    key: \"log_start_date\",\n    prop: \"value\",\n    value: sevenDaysAgo,\n  };\n};\n\nexport const getAwsLogsDistributionId = (state) => {\n  let distributionID = state.data.log_name_format.value;\n  if (distributionID.indexOf(LOG_NAME_FORMAT_POSTFIX) !== -1) {\n    distributionID = distributionID.substring(\n      0,\n      distributionID.length - LOG_NAME_FORMAT_POSTFIX.length\n    );\n  }\n\n  return {\n    key: \"distribution_id\",\n    prop: \"value\",\n    value: distributionID,\n  };\n};\n\nconst getDefaultCloudtrailLakeStartDate = () => {\n  const defaultDate = new Date();\n  defaultDate.setDate(defaultDate.getDate() - 7);\n  return defaultDate.toISOString().substring(0, 19);\n};\n\nconst handleDefaultDataAwsBilling = (state) => {\n  if (!state.data.initial_scan_datetime.value) {\n    return [getAwsBillingInitialDateScan()];\n  }\n  return [];\n};\n\nconst handleDefaultDataAwsBillingCur = (state) => {\n  if (!state.data.start_date.value) {\n    return [getAwsBillingCurrInitialDateScan()];\n  }\n  return [];\n};\n\nconst handleDefaultDataAwsS3 = (state, input) => {\n  const data = [];\n  if (!state.data.parse_csv_with_delimiter.value) {\n    data.push(getAwsS3ParseDelimiter());\n  }\n\n  if (!state.data.parse_csv_with_header.value) {\n    data.push(getAwsS3ParseWithHeader());\n  }\n\n  if (!state.data.initial_scan_datetime.value) {\n    data.push(getAwsS3InitialScanDate());\n  }\n\n  if (input !== \"aws_cloudtrail\") {\n    data.push(dataToHideField(\"ct_blacklist\"));\n  }\n\n  if (input !== \"others\") {\n    [\"whitelist\", \"blacklist\"].forEach((key) =>\n      data.push(dataToHideField(key))\n    );\n    data.push(dataToDisableField(\"sourcetype\"));\n  }\n\n  return data;\n};\n\nconst handleDefaultDataAwsSqsBasedS3 = (state, input, mode) => {\n  const data = [];\n  if (input === \"vpc_flow_logs\") {\n    data.push(dataToShowField(\"metric_index_flag\"));\n    if (mode === \"edit\") {\n      data.push(dataToDisableField(\"metric_index_flag\"));\n    }\n  }\n  if (!state.data.metric_index_flag.value) {\n    data.push(getMetricIndexFlagVpc());\n  }\n  if (!state.data.sourcetype.value) {\n    data.push(getAwsSqsBasedS3SourceType(state));\n  }\n  if (!state.data.parse_csv_with_delimiter.value) {\n    data.push(getAwsSqsBasedS3ParseDemilimter());\n  }\n  if (!state.data.parse_csv_with_header.value) {\n    data.push(getAwsSqsBasedS3ParseHeader());\n  }\n  if (!state.data.private_endpoint_enabled.value) {\n    data.push(getAwsSqsBasedS3PrivateEnpointEnabled());\n  }\n\n  if (input === \"aws_asl\" || input !== \"others\") {\n    [\"s3_file_decoder\", \"sourcetype\"].forEach((key) =>\n      data.push(dataToDisableField(key))\n    );\n  }\n\n  return data;\n};\n\nconst handleDefaultDataSplunkTaAwsLogs = (state, input, mode) => {\n  const data = [];\n\n  if (input === \"cloudfront_access_logs\") {\n    data.push(dataToShowField(\"distribution_id\"));\n    if (mode !== \"create\") {\n      data.push(getAwsLogsDistributionId(state));\n      if (mode === \"edit\") {\n        data.push(dataToDisableField(\"distribution_id\"));\n      }\n    }\n  }\n  if (input === \"aws_cloudtrail\") {\n    data.push(dataToShowField(\"log_path_format\"));\n    if (mode === \"edit\") {\n      data.push(dataToDisableField(\"log_path_format\"));\n    }\n  }\n  data.push(getAwsLogsSourceType(state));\n  data.push(getAwsLogsLogStartDate(state));\n\n  [\"log_type\", \"sourcetype\"].forEach((key) =>\n    data.push(dataToDisableField(key))\n  );\n\n  return data;\n};\n\nconst handleDefaultDataAwsKinesis = (state, input, mode) => {\n  const data = [];\n\n  if (input === \"vpc_flow_logs\") {\n    [\"format\", \"encoding\", \"sourcetype\"].forEach((key) =>\n      data.push(dataToDisableField(key))\n    );\n    data.push(dataToShowField(\"metric_index_flag\"));\n    if (mode === \"edit\") {\n      data.push(dataToDisableField(\"metric_index_flag\"));\n    }\n    if (Array.isArray(state.data.sourcetype.value)) {\n      data.push(getSourcetypeForVPC(state));\n    }\n  }\n  if (!state.data.metric_index_flag.value) {\n    data.push(getMetricIndexFlagVpc());\n  }\n\n  return data;\n};\n\nconst handleDefaultDataAwsCloudwatchLogs = (state, input, mode) => {\n  const data = [];\n\n  if (input === \"vpc_flow_logs\") {\n    data.push(dataToShowField(\"metric_index_flag\"));\n    if (mode === \"edit\") {\n      data.push(dataToDisableField(\"metric_index_flag\"));\n    }\n    if (Array.isArray(state.data.sourcetype.value)) {\n      data.push(getSourcetypeForVPC(state));\n    }\n  }\n  if (!state.data.metric_index_flag.value) {\n    data.push(getMetricIndexFlagVpc());\n  }\n  if (!state.data.query_window_size.value) {\n    data.push(getCloudWatchLogsQueryWindowSize());\n  }\n\n  return data;\n};\n\nconst handleDefaultAwsCloudtrailLake = (state, input, mode) => {\n  const data = [];\n\n  const private_endpoint_checkbox_value = parseInt(\n    state.data.private_endpoint_enabled.value\n  );\n\n  const showOrHideHandler = private_endpoint_checkbox_value\n    ? dataToShowField\n    : dataToHideField;\n\n  [\"cloudtrail_private_endpoint_url\", \"sts_private_endpoint_url\"].forEach(\n    (key) => data.push(showOrHideHandler(key))\n  );\n\n  if (state.data.input_mode.value === \"index_once\") {\n    data.push(dataToShowField(\"end_date_time\"));\n    data.push(dataToHideField(\"delay_throttle\"));\n    data.push(dataToHideField(\"interval\"));\n    data.push({ key: \"interval\", value: 3600, prop: \"value\" });\n  } else {\n    data.push(dataToHideField(\"end_date_time\"));\n    data.push(dataToShowField(\"delay_throttle\"));\n  }\n  if (mode === \"create\") {\n    data.push({\n      key: \"start_date_time\",\n      value: getDefaultCloudtrailLakeStartDate(),\n      prop: \"value\",\n    });\n  }\n\n  return data;\n};\n\nexport const DEFAULT_DATA_FOR_SERVICE_MAP = {\n  aws_billing: handleDefaultDataAwsBilling,\n  aws_billing_cur: handleDefaultDataAwsBillingCur,\n  aws_s3: handleDefaultDataAwsS3,\n  aws_sqs_based_s3: handleDefaultDataAwsSqsBasedS3,\n  splunk_ta_aws_logs: handleDefaultDataSplunkTaAwsLogs,\n  aws_kinesis: handleDefaultDataAwsKinesis,\n  aws_cloudtrail_lake: handleDefaultAwsCloudtrailLake,\n  aws_cloudwatch_logs: handleDefaultDataAwsCloudwatchLogs,\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport moment from \"moment\";\nimport { MAX_TIME } from \"../consts\";\nimport { validateSQSqueue } from \"./hookHelpers\";\n\nconst isValidSplunkTaAwsLogs = (dataDict, util, setValue) => {\n  if (dataDict.log_type === \"cloudfront:accesslogs\") {\n    if (dataDict.log_name_format == null) {\n      util.setErrorFieldMsg(\n        \"distribution_id\",\n        \"Field Distribution ID is required.\"\n      );\n      return false;\n    } else {\n      setValue(\"distribution_id\", null);\n    }\n  }\n  return true;\n};\n\nconst isValidAwsCloudwatch = (dataDict, util) => {\n  if (dataDict?.period && dataDict?.polling_interval) {\n    const times = dataDict.polling_interval / dataDict.period;\n\n    if (Math.floor(times) !== times) {\n      util.setErrorMsg(\n        'The number of \"Polling Interval\" field should be a multiple of \"Granularity\".'\n      );\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isValidAwsS3 = (dataDict, util) => {\n  if (dataDict?.terminal_scan_datetime) {\n    try {\n      const dateFromInput = moment(dataDict.terminal_scan_datetime);\n\n      if (dateFromInput > moment(MAX_TIME)) {\n        util.setErrorFieldMsg(\n          \"terminal_scan_datetime\",\n          \"The max supported timestamp is 2038-01-19T03:14:07Z due to Year 2038 problem\"\n        );\n        return false;\n      } else {\n        util.clearAllErrorMsg();\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isValidAwsSqsBasedS3 = async (dataDict, util) => {\n  if (\n    dataDict.aws_account &&\n    dataDict.sqs_queue_region &&\n    dataDict.sqs_queue_url\n  ) {\n    return await validateSQSqueue(dataDict, util.setErrorFieldMsg);\n  }\n  return true;\n};\n\nconst isValidAwsConfigRule = (_dataDict, util, _setValue, state) => {\n  const ruleErrors = JSON.parse(state.data.rule_names.custom_errors);\n  for (const error_m of ruleErrors.values()) {\n    if (error_m !== null && error_m !== \"\") {\n      util.setErrorMsg(error_m);\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * validates if AWS metadata contains at least one API select\n * @param { {apis: string} } dataDict object with data\n * @param { {setErrorMsg: (message: string) => void}} util\n */\nconst isValidAwsMetadata = (dataDict, util) => {\n  if (\"apis\" in dataDict && !dataDict.apis.length) {\n    return util.setErrorMsg(\"Atleast one API must be selected.\");\n  }\n  return true;\n};\n\nconst isValidAwsCloudTrailLake = (dataDict, util) => {\n  if (dataDict.input_mode === \"index_once\") {\n    if (!dataDict.end_date_time) {\n      util.setErrorFieldMsg(\n        \"end_date_time\",\n        \"Field End date/time is required if the selected Input Mode is Index Once.\"\n      );\n      return false;\n    }\n  } else {\n    if (dataDict.interval < 1) {\n      util.setErrorFieldMsg(\n        \"interval\",\n        \"Interval should be greater than 1 if the selected Input Mode is Continuously Monitor.\"\n      );\n      return false;\n    }\n    if (!dataDict.delay_throttle) {\n      util.setErrorFieldMsg(\n        \"delay_throttle\",\n        \"Field Delay Throttle (minutes) is required if the selected Input Mode is Continuously Monitor.\"\n      );\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Collection of validators for services. Maps service name into function that validates form correctness\n */\nexport const VALIDATION_SERVICE_MAP = {\n  splunk_ta_aws_logs: isValidSplunkTaAwsLogs,\n  aws_cloudwatch: isValidAwsCloudwatch,\n  aws_s3: isValidAwsS3,\n  aws_sqs_based_s3: isValidAwsSqsBasedS3,\n  aws_config_rule: isValidAwsConfigRule,\n  aws_metadata: isValidAwsMetadata,\n  aws_cloudtrail_lake: isValidAwsCloudTrailLake,\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport \"../stylesheets/Hook.css\";\nimport { getComponent } from \"./utils/GlobalConfigUtil\";\nimport {\n  removeExtraParamsFromURL,\n  getInputService,\n  addLinkToFormLabel,\n  alignUrlAndFixHistory,\n  getInitialDataForServiceInput,\n  renderCustomInputForService,\n  fetchConflictFields,\n} from \"./utils/hookHelpers\";\nimport {\n  SERVICES_WITH_CONFLICT_FIELDS,\n  SERVICES_WITH_GROUP_SELECTION,\n} from \"./consts\";\nimport {\n  SERVICE_HANDLERS_MAP,\n  FIELD_HANDLERS_MAP,\n} from \"./utils/onChangeModifications\";\nimport { DEFAULT_DATA_FOR_SERVICE_MAP } from \"./utils/defaultFieldValues\";\nimport { VALIDATION_SERVICE_MAP } from \"./utils/validateServicesFormData\";\n\nclass Hook {\n  /**\n   * Form hook\n   * @constructor\n   * @param {Object} globalConfig - Global configuration.\n   * @param {string} serviceName - name of service currently opened\n   * @param {object} state - object with state of the components on the service/page\n   * @param {string} mode - edit,create or clone\n   * @param {object} util - the utility object\n   */\n  constructor(globalConfig, serviceName, state, mode, util) {\n    this.globalConfig = globalConfig;\n    this.serviceName = serviceName;\n    this.state = state;\n    this.mode = mode;\n    this.util = util;\n    this.context = getComponent(globalConfig, serviceName);\n\n    this.onEditLoad = this.onEditLoad.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this._setValue = this._setValue.bind(this);\n  }\n\n  onCreate() {\n    const cancelButton = document.querySelector(\"button[label='Cancel']\");\n    // On click of Cancel button, URL is not getting updated properly - queryparams are not completely removed from URL\n    if (cancelButton) {\n      cancelButton.addEventListener(\"click\", removeExtraParamsFromURL);\n    }\n  }\n\n  onChange(field, value, dataDict) {\n    const fieldChangeHandler = FIELD_HANDLERS_MAP[field];\n    if (typeof fieldChangeHandler === \"function\") {\n      fieldChangeHandler(value, this._setValue);\n    }\n    const serviceChangeHandler = SERVICE_HANDLERS_MAP[this.serviceName];\n    if (typeof serviceChangeHandler === \"function\") {\n      serviceChangeHandler(\n        value,\n        dataDict,\n        this._setValue,\n        this.state,\n        field,\n        this.updateState\n      );\n    }\n  }\n\n  onRender() {\n    const { input, service } = getInputService(\n      this.mode,\n      this.state.data,\n      this.serviceName\n    );\n    alignUrlAndFixHistory(this.mode, input, service);\n    addLinkToFormLabel(service);\n\n    // rendering custom element\n    if (SERVICES_WITH_GROUP_SELECTION.includes(this.serviceName)) {\n      renderCustomInputForService(\n        this.state,\n        this.serviceName,\n        this.util.setState,\n        this.mode\n      );\n    }\n\n    const toUpdateState = getInitialDataForServiceInput(service, input);\n\n    // handle default state for service, specific input and mode\n    if (DEFAULT_DATA_FOR_SERVICE_MAP[this.serviceName]) {\n      const stateWithChanges = { ...this.state };\n      if (toUpdateState.length) {\n        for (const { key, prop, value } of toUpdateState) {\n          stateWithChanges.data[key][prop] = value;\n        }\n      }\n      toUpdateState.push(\n        ...DEFAULT_DATA_FOR_SERVICE_MAP[this.serviceName]?.(\n          stateWithChanges,\n          input,\n          this.mode\n        )\n      );\n    }\n\n    this.updateState(toUpdateState);\n  }\n\n  async onSave(dataDict) {\n    const formValidator = await VALIDATION_SERVICE_MAP[this.serviceName];\n\n    if (formValidator) {\n      const isValid = formValidator?.(\n        dataDict,\n        this.util,\n        this._setValue,\n        this.state\n      );\n      return isValid;\n    }\n\n    return true;\n  }\n\n  onSaveSuccess() {\n    removeExtraParamsFromURL();\n  }\n\n  onSaveFail() {\n    if (\n      this.serviceName === \"splunk_ta_aws_logs\" &&\n      this.state.data.log_type.value === \"cloudfront:accesslogs\"\n    ) {\n      const logNameFormat = this.state.data.log_name_format.value;\n      if (logNameFormat !== null) {\n        const distributionId = logNameFormat.split(\".\")[0];\n        this._setValue(\"distribution_id\", distributionId);\n      }\n    }\n  }\n\n  async onEditLoad() {\n    if (SERVICES_WITH_CONFLICT_FIELDS.includes(this.serviceName)) {\n      const conflictFields = await fetchConflictFields(\n        this.serviceName,\n        this.state\n      );\n      const conflictEntities = Object.keys(conflictFields);\n      if (conflictEntities.length) {\n        const entity = this.context.entity;\n        const conflictFieldsToString = conflictEntities\n          .map((key) => {\n            if (key !== \"disabled\") {\n              this.util.setErrorFieldMsg(key, \"\");\n            }\n\n            const globalConfigField = entity.find((el) => el.field === key);\n            const label = globalConfigField ? globalConfigField.label : key;\n\n            return `${label} = [${conflictFields[key].join(\", \")}]`;\n          })\n          .join(\", \");\n        const msg = `The following fields have conflict. ${conflictFieldsToString}. Please resolve the conflict in conf file first.`;\n\n        this.util.setErrorMsg(msg);\n      }\n    }\n  }\n\n  /**\n   * @param {string} key key of field that will be update\n   * @param {string|number|boolean} value new value of field\n   *\n   * Updating state and making component/form rerender\n   */\n  _setValue(key, value) {\n    this.util.setState((prevState) => {\n      const data = { ...prevState.data };\n      data[key].value = value;\n      return { data };\n    });\n  }\n\n  /**\n   * @param {Array<{\n   * key: string,\n   * prop: string,\n   * value: string|number|boolean\n   * }>}keyValuePairs Array of {key, prop, value} objects,data[key][prop] = value;\n   *\n   * Updates state with many objects at once (only one component/form rerender)\n   */\n  updateState(keyValuePairs) {\n    if (keyValuePairs.length) {\n      this.util.setState((prevState) => {\n        const data = { ...prevState.data };\n        for (const { key, prop, value } of keyValuePairs) {\n          data[key][prop] = value;\n        }\n        return { data };\n      });\n    }\n  }\n}\n\nexport default Hook;\n"],"names":["aws_config","aws_config_rule","aws_cloudwatch","aws_cloudwatch_logs","aws_s3","splunk_ta_aws_logs","aws_sqs_based_s3","aws_billing","aws_billing_cur","aws_cloudtrail","aws_kinesis","aws_inspector","aws_inspector_v2","splunk_ta_aws_sqs","aws_metadata","SQS_BASED_S3","input","link","getServiceLocationMap","html","encodeURIComponent","linkElem","document","createElement","innerHTML","buildInputLink","getAllLinks","FormDataContext","createContext","regions","setRegions","queues","setQueues","effectiveState","setEffectiveState","FormDataContextProvider","hookProps","children","initFormRows","setFormState","serviceName","initAccount","initAwsIamRole","useState","account","setAccount","awsIamRole","setAwsIamRole","effectiveFormRows","setEffectiveFormRows","rules","setRules","React","Provider","value","propTypes","PropTypes","object","isRequired","oneOfType","arrayOf","node","useFormData","useContext","ERROR_REGEX","loadInputData","url","fetch","method","headers","CSRFToken","then","response","ok","json","Promise","reject","handleFetchError","baseMessage","error","specialSetFormUpdate","text","responseText","matches","match","additionalMessage","length","prevState","newState","errorMsg","getUrlForAwsSqsQueueNames","effectiveRegion","URL","createRESTURL","location","searchParams","URLSearchParams","aws_account","aws_region","output_mode","count","set","search","toString","valueStyle","flex","borderColor","QueueInput","initValue","index","handleFormStateUpdate","setValue","options","setOptions","loading","setLoading","oldAwsRegion","setOldAwsRegion","resetValues","updateForm","useEffect","_queues$account","map","x","Select","Option","label","_queues$account2","content","entries","entry","newQueues","name","baseErrorMessage","onChange","e","disabled","placeholder","style","filter","inline","memo","RulesInput","values","setValues","_rules$account","Multiselect","_rules$account2","getUrlForRules","newRules","message","data","region","includes","MultiQueueInput","keyStyle","display","alignItems","RegionInput","handleChangeRegion","handleFormStateDelete","aws_service","getUrlForAwsRegion","newRegions","width","minWidth","spanStyle","lineHeight","justifyContent","SingleInputWrapper","setEffectiveRegion","secondInput","setSecondInput","sharedProps","CustomFormRows","items","setItems","title","setTitle","window","Object","idx","k","v","getRowElement","Date","now","Math","random","substring","errors","forEach","push","join","state","_queues","JSON","stringify","rule_names","custom_errors","getUpdatedStateAwsConfigRuleService","sqs_queues","getUpdatedStateSplunkTaAwsSqsService","sqs_queue","getUpdatedStateWithAwsRegionAndSqsQueue","oldFormRows","newFormRows","rowIndex","singleInputWrapperIndex","FormRows","Row","key","createDOMID","onRequestRemove","handleRequestRemove","oldItems","removeRow","header","id","addLabel","onRequestAdd","addRow","FormRowsWrapper","SplunkThemeProvider","ThemeProviderSettings","dataToHideField","prop","dataToShowField","dataToDisableField","removeExtraParamsFromURL","pathname","setTimeout","history","pushState","getInputService","mode","stateData","params","hash","newUrl","slice","extractQueryParams","service","normalizedData","keys","getNormalizeData","detectSource","validateSQSqueue","dataDict","setErrorFieldMsg","restURI","sqs_queue_region","sqs_queue_url","private_endpoint_enabled","sts_private_endpoint_url","sqs_private_endpoint_url","iamRole","aws_iam_role","app","APP_NAME","sharing","usingDLQ","using_dlq","status","queueAttributes","visibilityTimeout","VisibilityTimeout","redrivePolicy","RedrivePolicy","DLQ_REQUIRED_ERROR","VISIBILITY_TIMEOUT_WARNING","QUEUE_NOT_FOUND_ERROR","getInitialFormData","result","awsRegions","parse","ruleNames","split","parseRulesAndRegionsAwsConfigRule","sqsQueues","substr","parseRegionsAndQueuesAwsConfigAndSqs","renderCustomInputForService","selector","callback","checkFrequencyInMs","timeoutInMs","startTimeInMs","accountValue","_state$data2","_state$data2$aws_acco","AwsIamRoleValue","_state$data3","_state$data3$aws_iam_","ReactDOM","render","getElementById","loopSearch","querySelector","fetchConflictFields","contextURL","Array","isArray","currentEntry","find","_entry$content","_conflict_fields","FIELD_HANDLERS_MAP","distribution_id","LOG_NAME_FORMAT_POSTFIX","s3_file_decoder","SQS_BASED_S3_SOURCETYPES","metric_index_flag","handleAwsAccount","handleAwsIamRole","SERVICE_HANDLERS_MAP","_value","_setValue","_state","field","handleAccountForAwsConfigRule","_dataDict","setRegionValueForAwsKinesis","setStreamValueForAwsKinesis","aws_cloudtrail_lake","updateState","dataToUpdateState","showOrHideHandler","getSourcetypeForVPC","sourceType","DEFAULT_DATA_FOR_SERVICE_MAP","initial_scan_datetime","moment","utc","subtract","startOf","format","start_date","parse_csv_with_delimiter","parse_csv_with_header","sourcetype","getAwsSqsBasedS3SourceType","distributionID","log_name_format","indexOf","getAwsLogsDistributionId","SPLUNK_TA_AWS_LOGS_SOURCETYPES","log_type","getAwsLogsSourceType","defaultDate","parseInt","input_mode","setDate","getDate","toISOString","query_window_size","VALIDATION_SERVICE_MAP","util","period","polling_interval","times","floor","setErrorMsg","terminal_scan_datetime","MAX_TIME","clearAllErrorMsg","err","ruleErrors","error_m","apis","end_date_time","interval","delay_throttle","Hook","globalConfig","context","getComponent","onEditLoad","this","bind","cancelButton","addEventListener","fieldChangeHandler","serviceChangeHandler","val","replaceState","alignUrlAndFixHistory","append","addLinkToFormLabel","SERVICES_WITH_GROUP_SELECTION","setState","toUpdateState","itemInput","dataForServiceInput","serviceData","getMapData","item","models","getInitialDataForServiceInput","stateWithChanges","_DEFAULT_DATA_FOR_SER","formValidator","isValid","logNameFormat","distributionId","SERVICES_WITH_CONFLICT_FIELDS","conflictFields","conflictEntities","entity","conflictFieldsToString","_this","globalConfigField","el","msg","keyValuePairs"],"mappings":"6qBA+CE,qFAxCA,iBACS,CACLA,WAAY,aACZC,gBAAiB,kBACjBC,eAAgB,iBAChBC,oBAAqB,qBACrBC,OAAQ,SACRC,mBAAoB,oBACpBC,iBAAkB,mBAClBC,YAAa,cACbC,gBAAiB,kBACjBC,eAAgB,iBAChBC,YAAa,cACbC,cAAe,gBACfC,iBAAkB,kBAClBC,kBAAmB,UACnBC,aAAc,2CAIlB,iBACS,CAELC,aAAc,iEAIlB,SAAeC,OACPC,EAAOC,IAAwBF,GAE/BG,oHAAkHC,mBACtH,6BACEH,eAHS,uUAIPI,EAAWC,SAASC,cAAc,YACxCF,EAASG,UAAYL,EACdE,YAIII,IAAAA,iBAAgBC,gBAAaR,IAAAA,sBCrC/BS,EAAkBC,wBAAc,CAC3CC,QAAS,GACTC,WAAY,aACZC,OAAQ,GACRC,UAAW,aACXC,eAAgB,GAChBC,kBAAmB,eAGRC,EAA0B,gBAAGC,IAAAA,UAAWC,IAAAA,SAC3CC,EAAyEF,EAAzEE,aAAcC,EAA2DH,EAA3DG,aAAcC,EAA6CJ,EAA7CI,YAAaC,EAAgCL,EAAhCK,YAAaC,EAAmBN,EAAnBM,iBAChCC,mBAASF,YAAhCG,OAASC,SACoBF,mBAASD,YAAtCI,OAAYC,SAC+BJ,mBAASL,YAApDU,OAAmBC,SAEIN,mBAAS,aAAhCd,OAASC,SACYa,mBAAS,aAA9BZ,OAAQC,SACWW,mBAAS,aAA5BO,OAAOC,cAGZC,gBAACzB,EAAgB0B,UACfC,MAAO,CACLf,aAAAA,EACAC,YAAAA,EACAI,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,kBAAAA,EACAC,qBAAAA,EAEApB,QAAAA,EACAC,WAAAA,EACAC,OAAAA,EACAC,UAAAA,EACAkB,MAAAA,EACAC,SAAAA,wMAGDd,EAGN,EAEDF,EAAwBoB,UAAY,CAClCnB,UAAWoB,EAAUC,OAAOC,WAC5BrB,SAAUmB,EAAUG,UAAU,CAC5BH,EAAUI,QAAQJ,EAAUK,MAC5BL,EAAUK,OACTH,YAGE,IAAMI,EAAc,kBAAMC,qBAAWpC,EAAjB,ECpDrBqC,EAAc,yCAEPC,EAAgB,SAACC,UAQrBC,MAAMD,EAAK,CAChBE,OAAQ,MACRC,QATc,qBACOC,qBACD,gCACJ,sBAOfC,MAAK,SAACC,UACFA,EAASC,GAGLD,EAASE,OAFTC,QAAQC,OAAOJ,KAK3B,EAQYK,EAAmB,SAC9BC,EACAC,EACAxC,EACAyC,GAE0B,mBAAfD,EAAME,KACfF,EAAME,OAAOV,MAAK,SAACW,OACXC,EAAUD,EAAaE,MAAMpB,GAE7BqB,EACJF,GAA8B,IAAnBA,EAAQG,kBACXH,EAAQ,gBAAOA,EAAQ,IAC3BD,EAIJ3C,EAHkC,mBAAzByC,EAGI,SAACO,UACZP,EAAqBO,YAAcT,UAAcO,KAGtC,SAACE,OACNC,OAAgBD,UACtBC,EAASC,mBAAcX,UAAcO,GAC9BG,OAKbjD,GAAa,SAACgD,OACNC,OAAgBD,UACtBC,EAASC,mBAAcX,UAAcC,GAC9BS,IAGZ,EAEYE,EAA4B,SACvC9C,EACA+C,EACA7C,OAEMoB,EAAM,IAAI0B,IACdC,EAAc,+CACdC,UAGIC,EAAe,IAAIC,gBAAgB,CACvCC,YAAarD,EACbsD,WAAYP,EACZQ,YAAa,OACbC,MAAO,aAGLtD,GACFiD,EAAaM,IAAI,eAAgBvD,GAGnCoB,EAAIoC,OAASP,EAAaQ,WACnBrC,CACR,0ICjFKsC,EAAa,CACjBC,KAAM,QACNC,YAAa,sBAGf,SAASC,gBACPC,IAAAA,UACAjB,IAAAA,gBACAkB,IAAAA,MACAC,IAAAA,wBAEqDhD,IAA7C/B,IAAAA,OAAQC,IAAAA,UAAWY,IAAAA,UAASL,mBACVI,mBAASiE,YAA5BtD,OAAOyD,SACgBpE,mBAAS,aAAhCqE,OAASC,SACctE,oBAAS,YAAhCuE,OAASC,SACwBxE,mBAASgD,YAA1CyB,OAAcC,OAOfC,EAAc,SAACC,GACfA,GACFT,EAAsBD,EAAOlB,EAAiB,MAEhDoB,IACAE,EAAW,IACXE,GAAW,WAObK,qBAAU,iBACH5E,GAEH0E,GAAY,QAEoC,eAAvCvF,EAAOa,uBAAP6E,EAAkB9B,MAC3BsB,EAA2BlF,EAAOa,GAAS+C,GAThC+B,KAAI,SAACC,UAAMvE,gBAACwE,EAAOC,QAAOC,MAAOH,EAAEG,MAAOxE,MAAOqE,EAAErE,yEAW1DqC,IAAoByB,IACtBC,EAAgB1B,GAChBmB,EAAsBD,EAAOlB,EAAiB,MAC9CoB,KAEFI,GAAW,MAEZ,CAACvE,EAAS+C,EAAiB5D,IAE9ByF,qBAAU,iBAEN5E,GACA+C,QAC8C,eAAvC5D,EAAOa,uBAAPmF,EAAkBpC,MAEzBwB,GAAW,GAEXlD,EAAcyB,EAA0B9C,EAAS+C,IAC9CpB,MAAK,SAACyD,OACCC,GAAUD,eAAAA,EAASE,QAAS,GAC5BC,OAAiBpG,GACvBoG,EAAUvF,GAAWuF,EAAUvF,IAAY,GAC3CuF,EAAUvF,GAAS+C,GAAmBsC,EAAQP,KAAI,SAACC,SAAO,CACxDG,MAAOH,EAAES,KACT9E,MAAOqE,EAAES,SAEXpG,EAAUmG,aAEL,SAACpD,GACNuC,GAAY,OACNe,gDAA0D1C,QAChEd,EAAiBwD,EAAkBtD,SAGxC,CAACnC,EAAS+C,IAGXvC,gBAACwE,GACCtE,MAAOA,EACPgF,SAjEiB,SAACC,SAAKjF,IAAAA,MACzBwD,EAAsBD,EAAOlB,EAAiBrC,GAC9CyD,EAASzD,IAgEPkF,SAAUtB,EACVuB,YACEvB,EAAU,aAAe,uCAE3BwB,MAAOlC,EACPmC,UACAC,0EAEC5B,EAGN,CAED,MAAe6B,eAAKlC,2IC9FdH,EAAa,CACjBC,KAAM,QACNC,YAAa,sBAGf,SAASoC,gBACPlC,IAAAA,UACAjB,IAAAA,gBACAkB,IAAAA,MACAC,IAAAA,wBAE+DhD,IAAvDZ,IAAAA,MAAOC,IAAAA,SAAUP,IAAAA,QAASE,IAAAA,WAAYP,IAAAA,eAClBI,mBAASiE,YAA9BmC,OAAQC,SACerG,mBAAS,aAAhCqE,OAASC,SACctE,oBAAS,YAAhCuE,OAASC,SACwBxE,mBAASgD,YAA1CyB,OAAcC,OAOfC,EAAc,SAACC,GACfA,GACFT,EAAsBD,EAAOlB,EAAiB,IAEhDqD,EAAU,IACV/B,EAAW,IACXE,GAAW,WASbK,qBAAU,iBACH5E,GAEH0E,GAAY,QAEmC,eAAtCpE,EAAMN,uBAANqG,EAAiBtD,MAC1BsB,EAA2B/D,EAAMN,GAAS+C,GAX/B+B,KAAI,SAACC,UAChBvE,gBAAC8F,EAAYrB,QAAOC,MAAOH,EAAEG,MAAOxE,MAAOqE,EAAErE,wEAYzCqC,IAAoByB,IACtBC,EAAgB1B,GAChBmB,EAAsBD,EAAOlB,EAAiB,IAC9CqD,EAAU,KAEZ7B,GAAW,MAEZ,CAACvE,EAAS+C,EAAiBzC,IAE9BsE,qBAAU,iBAEN5E,GACA+C,QAC6C,eAAtCzC,EAAMN,uBAANuG,EAAiBxD,MAExBwB,GAAW,GACXlD,EFqCwB,SAACrB,EAAS+C,EAAiB7C,OACjDoB,EAAM,IAAI0B,IACdC,EAAc,4CACdC,UAGIC,EAAe,IAAIC,gBAAgB,CACvCC,YAAarD,EACbsD,WAAYP,EACZQ,YAAa,OACbC,MAAO,aAGLtD,GACFiD,EAAaM,IAAI,eAAgBvD,GAGnCoB,EAAIoC,OAASP,EAAaQ,WACnBrC,CACR,CExDmBkF,CAAexG,EAAS+C,EAAiB7C,IACpDyB,MAAK,SAACyD,OACCC,GAAUD,eAAAA,EAASE,QAAS,GAC5BmB,OAAgBnG,GACtBmG,EAASzG,QACsB,IAAtByG,EAASzG,GAA2B,GAAKyG,EAASzG,GAC3DyG,EAASzG,GAAS+C,GAAmBsC,EAAQP,KAAI,SAACC,SAAO,CACvDG,MAAOH,EAAES,KACT9E,MAAOqE,EAAES,SAEXjF,EAASkG,aAEJ,SAACtE,OACAD,kDAAuDa,QAa7Dd,EAAiByE,QAASvE,EAAOxC,GAXJ,SAACgD,EAAWE,OACjCD,OAAgBD,UACNC,EAAS+D,KAAKC,OAAOlG,MACzBmG,SAAS9D,KACnB2B,GAAY,GACZR,EAAsBD,EAAOlB,EAAiB,KAAMb,GACpDU,EAASC,SAAWA,GAEfD,WAMd,CAAC5C,EAAS+C,IAGXvC,gBAAC8F,GACCH,OAAQA,EACRT,SA9EiB,SAACC,SAAKQ,IAAAA,OACzBjC,EAAsBD,EAAOlB,EAAiBoD,GAC9CC,EAAUD,IA6ERP,SAAUtB,EACVuB,YACEvB,EACI,aACA,iDAENwB,MAAOlC,EACPoC,2EAEC5B,EAGN,CAED,MAAe6B,eAAKC,gJChHdtC,GAAa,CACjBC,KAAM,QACNC,YAAa,sBAGf,SAASgD,iBACP9C,IAAAA,UACAjB,IAAAA,gBACAkB,IAAAA,MACAC,IAAAA,wBAGEhD,IADM/B,IAAAA,OAAQC,IAAAA,UAAWY,IAAAA,QAASE,IAAAA,WAAYP,IAAAA,eAEpBI,mBAASiE,YAA9BmC,OAAQC,SACerG,mBAAS,aAAhCqE,OAASC,SACctE,oBAAS,YAAhCuE,OAASC,SACwBxE,mBAASgD,YAA1CyB,OAAcC,OAOfC,EAAc,SAACC,GACfA,GACFT,EAAsBD,EAAOlB,EAAiB,IAEhDqD,EAAU,IACV/B,EAAW,IACXE,GAAW,WASbK,qBAAU,iBACH5E,GAEH0E,GAAY,QAEoC,eAAvCvF,EAAOa,uBAAP6E,EAAkB9B,MAC3BsB,EAA2BlF,EAAOa,GAAS+C,GAXhC+B,KAAI,SAACC,UAChBvE,gBAAC8F,EAAYrB,QAAOC,MAAOH,EAAEG,MAAOxE,MAAOqE,EAAErE,wEAYzCqC,IAAoByB,IACtBC,EAAgB1B,GAChBmB,EAAsBD,EAAOlB,EAAiB,IAC9CqD,EAAU,KAEZ7B,GAAW,MAEZ,CAACvE,EAAS+C,EAAiB5D,IAE9ByF,qBAAU,iBAEN5E,GACA+C,QAC8C,eAAvC5D,EAAOa,uBAAPmF,EAAkBpC,MAEzBwB,GAAW,GAEXlD,EACEyB,EAA0B9C,EAAS+C,EAAiB7C,IAEnDyB,MAAK,SAACyD,OACCC,GAAUD,eAAAA,EAASE,QAAS,GAC5BC,OAAiBpG,GACvBoG,EAAUvF,GAAWuF,EAAUvF,IAAY,GAC3CuF,EAAUvF,GAAS+C,GAAmBsC,EAAQP,KAAI,SAACC,SAAO,CACxDG,MAAOH,EAAES,KACT9E,MAAOqE,EAAES,SAEXpG,EAAUmG,aAEL,SAACpD,GACNuC,GAAY,OACNe,gDAA0D1C,QAChEd,EAAiBwD,EAAkBtD,EAAOxC,SAG/C,CAACK,EAAS+C,IAGXvC,gBAAC8F,GACCH,OAAQA,EACRT,SArEiB,SAACC,SAAKQ,IAAAA,OACzBjC,EAAsBD,EAAOlB,EAAiBoD,GAC9CC,EAAUD,IAoERP,SAAUtB,EACVuB,YACEvB,EAAU,aAAe,uCAE3BwB,MAAOlC,GACPoC,2EAEC5B,EAGN,CAED,OAAe6B,eAAKa,8ICpGdC,GAAW,CACflD,KAAM,YACNmD,QAAS,OACTC,WAAY,UAGd,SAASC,iBACPlD,IAAAA,UACAmD,IAAAA,mBACAlD,IAAAA,MACAC,IAAAA,sBACAkD,IAAAA,wBAGElG,IADMjC,IAAAA,QAASC,IAAAA,WAAYU,IAAAA,YAAaI,IAAAA,QAASL,IAAAA,eAErBI,mBAAS,aAAhCqE,OAASC,SACctE,oBAAS,YAAhCuE,OAASC,SACUxE,mBAASiE,YAA5BtD,OAAOyD,OAqBRO,EAAc,WAClB0C,EAAsBnD,GACtBE,IACAE,EAAW,IACXE,GAAW,WAUbK,qBAAU,WACH5E,GACH0E,SAE8B,IAArBzF,EAAQe,KACjBqE,EAA2BpF,EAAQe,GAXlB8E,KAAI,SAACC,UACtBvE,gBAACwE,EAAOC,QAAOC,MAAOH,EAAEG,MAAOxE,MAAOqE,EAAErE,yEAWxC6D,GAAW,MAEZ,CAACvE,EAASf,IAEb2F,qBAAU,WACJ5E,QAAuC,IAArBf,EAAQe,KAC5BuE,GAAW,GAEXlD,EJiB4B,SAACrB,EAASJ,OACpC0B,EAAM,IAAI0B,IACdC,EAAc,uCACdC,UAGIC,EAAe,IAAIC,gBAAgB,CACvCiE,YAAazH,EACbyD,YAAarD,EACbuD,YAAa,OACbC,MAAO,aAGTlC,EAAIoC,OAASP,EAAaQ,WACnBrC,CACR,CIhCmBgG,CAAmBtH,EAASJ,IACvC+B,MAAK,SAACyD,OACCC,GAAUD,eAAAA,EAASE,QAAS,GAC5BiC,OAAkBtI,GACxBsI,EAAWvH,GAAWqF,EAAQP,KAAI,SAACC,SAAO,CACxCG,MAAOH,EAAEK,QAAQF,MACjBxE,MAAOqE,EAAES,SAEXtG,EAAWqI,aAEN,SAACpF,GACNuC,QACMxC,6CAAkDlC,QACxDiC,EAAiBC,EAAaC,EAAOxC,SAG1C,CAACK,IAGFQ,uBAAKsF,MAAOiB,qEACVvG,gBAACwE,GACCtE,MAAOA,EACPgF,SArEe,SAACC,SAAKjF,IAAAA,MACzByD,EAASzD,GACTyG,EAAmBzG,GAKjBwD,EAAsBD,EAAOvD,EAHb,oBAAhBd,GACgB,sBAAhBA,EAEoC,GAEA,MAGtCD,GAAa,SAACgD,OACNC,OAAgBD,UACtBC,EAASC,SAAW,GACbD,MAuDLgD,SAAUtB,EACVuB,YAAavB,EAAU,aAAe,YACtCwB,MAAO,CACL0B,MAAO,QACPC,SAAU,OACV3D,YAAa,sBAEfiC,UACAC,4EAEC5B,GAIR,CAED,OAAe6B,eAAKiB,qJC3GdQ,GAAY,CAChBV,QAAS,cACTW,WAAY,OACZ9D,KAAM,WACN+D,eAAgB,SAChBX,WAAY,UAGd,SAASY,iBACP7D,IAAAA,UACAC,IAAAA,MACAC,IAAAA,sBACAkD,IAAAA,wBAE8CrH,mBAASiE,eAAAA,EAAW4C,iBAA3D7D,OAAiB+E,OAChBlI,EAAgBsB,IAAhBtB,cAC8BG,mBAAS,eAAxCgI,OAAaC,OACdC,EAAc,CAAElF,gBAAAA,EAAiBkB,MAAAA,EAAOC,sBAAAA,UAE9CU,qBAAU,kBACAhF,OACD,oBACHoI,EACExH,gBAACsG,MAAgB9C,UAAWA,eAAAA,EAAW7E,QAAY8I,+EAGlD,aACHD,EACExH,gBAACuD,KAAWC,UAAWA,eAAAA,EAAW7E,QAAY8I,mFAIhDD,EACExH,gBAAC0F,KAAWlC,UAAWA,eAAAA,EAAW1D,OAAW2H,4EAM5C,WACLb,EAAsBnD,MAEvB,CAAClB,EAAiBnD,IAGnBY,uBAAKsF,MAAO,CAAEkB,QAAS,yEACrBxG,gBAAC0G,MACClD,UAAWA,eAAAA,EAAW4C,OACtBO,mBAAoBW,EACpBV,sBAAuBA,GACnBa,sEAENzH,wBAAMsF,MAAO4B,qEACZK,EAGN,CAED,OAAe9B,eAAK4B,iJCtDpB,SAASK,kBACmBnI,mBAAS,aAA5BoI,OAAOC,SACYrI,mBAAS,yBAA5BsI,OAAOC,SAQVpH,IANFjB,IAAAA,WACAE,IAAAA,cACAP,IAAAA,YACAD,IAAAA,aACAS,IAAAA,kBACAC,IAAAA,qBAIFuE,qBAAU,WACR2D,OAAOtI,WAAa,SAACS,GACnBT,EAAWS,IAGb6H,OAAOpI,cAAgB,SAACO,GACtBP,EAAcO,IAGI,sBAAhBd,EACF0I,EAAS,cACgB,eAAhB1I,GACT0I,EAAS,eAEV,IAEH1D,qBAAU,WACJ4D,OAAOnD,QAAQjF,GAAmBsC,OAAS,EAC7C0F,EACEI,OAAOnD,QAAQjF,GAAmB0E,KAAI,WAAS2D,gBAAPC,OAAGC,cAClCC,EAAcH,EAAKC,EAAGC,OAIjCP,EAAS,CACPQ,EACE,EACAC,KAAKC,MAAMnF,SAAS,IAAMoF,KAAKC,SAASrF,SAAS,IAAIsF,UAAU,QAIpE,IAEHrE,qBAAU,eAEF3F,EAAU,GACVE,EAAS,GACTmB,EAAQ,GACR4I,EAAS,GACfV,OAAOnD,QAAQjF,GAAmB+I,SAAQ,kCAAKR,OAC7C1J,EAAQmK,KAAKT,EAAE/B,QACK,oBAAhBhH,GACFU,EAAM8I,KAAKT,EAAErI,OAASqI,EAAErI,MAAM+I,KAAK,MACnCH,EAAOE,KAAKT,EAAExG,QACW,sBAAhBvC,EACTT,EAAOiK,KAAKT,EAAExJ,QAAUwJ,EAAExJ,OAAOkK,KAAK,MAEtClK,EAAOiK,KAAKT,EAAExJ,WAGlBQ,GAAa,SAACgD,OACNC,OAAgBD,SACF,oBAAhB/C,EC7EyC,SACjD0J,EACArK,EACAqB,EACA4I,EACAK,UAEAD,EAAM3C,KAAKC,OAAOlG,MAAQ8I,KAAKC,UACV,IAAnBxK,EAAQyD,OAAe,CAAC,IAAMzD,GAEhCqK,EAAM3C,KAAK+C,WAAWhJ,MAAQ8I,KAAKC,UAChB,IAAjBnJ,EAAMoC,OAAe,CAAC,IAAMpC,GAE9BgJ,EAAM3C,KAAK+C,WAAWC,cAAgBH,KAAKC,UACvB,IAAlBP,EAAOxG,OAAe,CAAC,IAAMwG,GAExBI,CACR,CD6DcM,CACLhH,EACA3D,EACAqB,EACA4I,GAIgB,sBAAhBtJ,ECnE0C,SAClD0J,EACArK,EACAE,UAEAmK,EAAM3C,KAAKrD,WAAW5C,MAAQ8I,KAAKC,UACd,IAAnBxK,EAAQyD,OAAe,CAAC,IAAMzD,GAEhCqK,EAAM3C,KAAKkD,WAAWnJ,MAAQ8I,KAAKC,UACf,IAAlBtK,EAAOuD,OAAe,CAAC,IAAMvD,GAExBmK,CACR,CDwDcQ,CAAqClH,EAAU3D,EAASE,GCtDhB,SACrDmK,EACArK,EACAE,UAEAmK,EAAM3C,KAAKrD,WAAW5C,MAAQ8I,KAAKC,UACd,IAAnBxK,EAAQyD,OAAe,CAAC,IAAMzD,GAGhCqK,EAAM3C,KAAKoD,UAAUrJ,MAAQ8I,KAAKC,UACd,IAAlBtK,EAAOuD,OAAe,CAAC,IAAMvD,GAExBmK,CACR,CD4CYU,CAAwCpH,EAAU3D,EAASE,QAEnE,CAACiB,QAEE8D,EAAwB,SAACD,EAAO2C,EAAQlG,OAAOyB,yDAAQ,KAC3D9B,GAAqB,SAAC4J,OACdC,OAAmBD,UAEvBC,EAAYjG,GADM,oBAAhBrE,EACmB,CAAEgH,OAAAA,EAAQtG,MAAOI,EAAOyB,MAAOA,GAE/B,CAAEyE,OAAAA,EAAQzH,OAAQuB,GAKlCwJ,MAILtB,EAAgB,SAACuB,EAAUC,EAAyBpG,UACxDxD,gBAAC6J,EAASC,KACRrG,MAAOkG,EACPI,IAAKC,IACLC,gBAAiBC,iEAEjBlK,gBAACqH,IACC5D,MAAOmG,EACPpG,UAAWA,EACXE,sBAAuBA,EACvBkD,sBAAuBA,oEAKvBA,EAAwB,SAACnD,GAC7B5D,GAAqB,SAAC4J,OACdC,OAAmBD,iBAClBC,EAAYjG,GACZiG,MAILQ,EAAsB,SAAC/E,SAAK1B,IAAAA,MAChCmE,GAAS,SAACuC,UACgB,IAApBA,EAASjI,OACJiI,EAEFN,EAASO,UAAU3G,EAAO0G,OAiB/BE,EACJrK,yFACEA,wBACEsF,MAAO,CACLkB,QAAS,eACTQ,MAAO,KAETsD,GAAG,yFAILtK,wBAAMsF,MAAO,CAAEkB,QAAS,gBAAkB8D,GAAG,iFAC1CzC,WAML7H,gBAAC6J,GACCU,SAAS,cACTF,OAAQA,EACRG,aAlCqB,WACvB5C,GAAS,SAACuC,OACF1G,EACJ4E,KAAKC,MAAMnF,SAAS,IAAMoF,KAAKC,SAASrF,SAAS,IAAIsF,UAAU,UACjE5I,GAAqB,SAAC4J,OACdC,OAAmBD,UACzBC,EAAYjG,GAAS,GACdiG,KAEFG,EAASY,OAAOrC,EAAc+B,EAASjI,OAAQuB,GAAQ0G,OA0B9D7E,MAAO,CAAE0B,MAAO,uEAEfW,EAGN,CAED,OAAelC,eAAKiC,kJE/KpB,SAASgD,UAAkB1L,IAAAA,iBAEvBgB,gBAAC2K,2BAAwBC,qEACvB5K,gBAACjB,GAAwBC,UAAWA,mEAClCgB,gBAAC0H,uEAIR,4BCCYmD,GAAkB,SAACd,SAAS,CACvCA,IAAKA,EACLe,KAAM,UACN5K,OAAO,EAHsB,EASlB6K,GAAkB,SAAChB,SAAS,CACvCA,IAAKA,EACLe,KAAM,UACN5K,OAAO,EAHsB,EASlB8K,GAAqB,SAACjB,SAAS,CAC1CA,IAAKA,EACLe,KAAM,WACN5K,OAAO,EAHyB,EAkBrB+K,GAA2B,eAChCC,EAAWnD,OAAOrF,SAASwI,SAEjCC,YAAW,kBAAMpD,OAAOqD,QAAQC,UAAU,GAAI,GAAIH,KACnD,EAwBYI,GAAkB,SAACC,EAAMC,EAAWpM,OACzCqM,EAvBmB,iBAEnBvI,EAAShF,SAASwE,SAASQ,QAAUhF,SAASwE,SAASgJ,KAEvDD,EAAS,GAETE,EAAS,IAAI/I,gBAAgBM,EAAO0I,MAAM,QAErBD,EAAO9G,0CAAW,oBAAjCkF,OAAK7J,OACfuL,EAAO1B,GAAO7J,wCAGTuL,CACR,CAUgBI,GACTjO,EAAmB6N,EAAnB7N,MAAOkO,EAAYL,EAAZK,YAERlO,GAAkB,SAAT2N,GAA4B,UAATA,EAAkB,KAC3CQ,EA7CsB,SAACP,OACzBrF,EAAO,UACI6B,OAAOgE,KAAKR,GACpB7C,SAAQ,SAACoB,GAChB5D,EAAK4D,GAAOyB,EAAUzB,GAAK7J,SAEtBiG,CACR,CAsC0B8F,CAAiBT,GACxC5N,EAAQsO,EAAaH,EAAgB3M,SAGhC,CACLxB,MAAAA,EACAkO,QAAAA,EAEH,EAEYK,+CAAmB,WAAOC,EAAUC,gHAC3CC,yEAA0EF,EAASvJ,mCAA0BuJ,EAASG,2CAAkCH,EAASI,mDAA0CJ,EAASK,8DAAqDL,EAASM,8DAAqDN,EAASO,+CAC9UC,EAAUR,EAASS,gBAGvBP,2BAA4BM,IAGxB9L,EAAM2B,EAAc6J,EAAS,CACjCQ,IAAKC,EACLC,QAAS,QAGLC,EAAWb,EAASc,4BAEDnM,MAAMD,EAAK,CAChCE,OAAQ,MACRC,QAAS,qBACcC,qBACD,gCACJ,gCAGI,OARlBE,UAQO+L,yCACQ/L,EAASE,kBAAtB6E,SACAiH,EAAkBjH,EAAKrB,MAAM,GAAGF,QAChCyI,EAAoBD,EAAgBE,kBACpCC,EAAgBH,EAAgBI,cAItB,GAAZP,GAAkBM,0BACpBlB,EAAiB,gBAAiBoB,sBAC3B,gBACe,IAAbR,GAAkBI,EAAoB,6BAC/ChB,EAAiB,gBAAiBqB,sBAC3B,0CAGTrB,EAAiB,gBAAiBsB,sBAC3B,oEAGTtB,EACE,qGAGK,qCAEF,iHAjDoB,IA+IvBuB,GAAqB,SAACrC,EAAMzC,EAAO1J,SAC1B,SAATmM,GAA4B,UAATA,EACD,oBAAhBnM,EAzCyC,SAAC0J,OAC1C+E,EAAS,GACTC,EAAa9E,KAAK+E,MAAMjF,EAAM3C,KAAKC,OAAOlG,OAC1C8N,EAAYhF,KAAK+E,MAAMjF,EAAM3C,KAAK+C,WAAWhJ,OAAOoE,KAAI,SAACC,UAC7DA,EAAE0J,MAAM,eAEVH,EAAWnF,SAAQ,SAACvC,EAAQ6B,GAE1B4F,EAAOxF,KAAKC,MAAMnF,SAAS,IAAMoF,KAAKC,SAASrF,SAAS,IAAIsF,UAAU,IACpE,CACErC,OAAAA,EACAtG,MAAOkO,EAAU/F,OAGhB4F,CACR,CA2BYK,CAAkCpF,GAzBK,SAACA,EAAO1J,OACpDyO,EAAS,GACTC,EAAa9E,KAAK+E,MAAMjF,EAAM3C,KAAKrD,WAAW5C,OAChDiO,EAAY,YAEdA,EADkB,sBAAhB/O,EACU4J,KAAK+E,MAAMjF,EAAM3C,KAAKkD,WAAWnJ,OAAOoE,KAAI,SAACC,UACvDA,EAAE0J,MAAM,QAGEjF,KAAK+E,MAAMjF,EAAM3C,KAAKoD,UAAUrJ,OAE9C4N,EAAWnF,SAAQ,SAACvC,EAAQ6B,GAE1B4F,EAAOxF,KAAKC,MAAMnF,SAAS,IAAMoF,KAAKC,SAASrF,SAAS,IAAIiL,OAAO,IAAM,CACvEhI,OAAAA,EACAzH,OAAQwP,EAAUlG,OAIf4F,CACR,CAQUQ,CAAqCvF,EAAO1J,GAG9C,EACR,EA+BYkP,GAA8B,SACzCxF,EACA1J,EACAD,EACAoM,mBA3HAgD,EACAC,EACAC,EACAC,EAEMC,EAwHAC,aACJ9F,EAAM3C,+BAAM3G,8BAASU,mBAAS4I,EAAM3C,6BAAN0I,EAAYhM,gCAAZiM,EAAyB5O,OAEnD6O,YAAkBjG,EAAM3C,6BAAN6I,EAAYnC,iCAAZoC,EAA0B/O,MAE5ChB,EAAe0O,GAAmBrC,EAAMzC,EAAO1J,GAlIrDmP,EAqIE,mBApIFC,EAqIE,WACEU,EAASC,OACPnP,gBAAC0K,IACC1L,UAAW,CACTE,aAAAA,EACAC,aAAAA,EACAC,YAAAA,EACAC,YAAauP,EACbtP,eAAgByP,sMAGpB7Q,SAASkR,eAAe,qBA/I9BX,EAkJE,IAjJFC,EAkJE,IAhJIC,EAAgBtG,KAAKC,MACR,SAAb+G,IACAnR,SAASoR,cAAcf,GACzBC,IAEArD,YAAW,WACL9C,KAAKC,MAAQqG,EAAgBD,GACjCW,MACCZ,GAGPY,EAuID,EAEYE,GAAsB,SAACzD,EAAShD,OACrC0G,EAAa/M,0BAA+BqJ,GAAW,CAC3DgB,IAAKC,EACLC,QAAS,eAGJjM,gBAASyO,wBACbrO,MAAK,SAACC,UAAaA,EAASE,UAC5BH,MAAK,SAACgF,MACDsJ,MAAMC,QAAQvJ,EAAKrB,QAAUqB,EAAKrB,MAAM5C,OAAQ,KAC5CyN,EAAexJ,EAAKrB,MAAM8K,MAC9B,SAAC9K,gBACCA,EAAME,OAAS8D,EAAM3C,KAAKnB,KAAK9E,QAC/B4E,mBAAAA,EAAOF,4BAAPiL,EAAgBC,wBAGhBH,SACK3G,KAAK+E,MAAM4B,EAAa/K,QAAQkL,wBAGpC,KAEZ,ECxTYC,GAAqB,CAChCC,gBAdkC,SAAC9P,EAAOyD,GAE1CA,EAAS,kBADazD,EAAQ+P,EAE/B,EAYCC,gBAvBiC,SAAChQ,EAAOyD,GAEzCA,EAAS,aADUwM,EAAyBjQ,IAE9B,uBAAVA,GACFyD,EAAS,qBAAsB,EAElC,EAkBCyM,kBAXmC,SAAClQ,EAAOyD,GAEzCA,EAAS,aADG,MAAVzD,EACqBiQ,EAAwB,kBAExBA,EAAwB,YAElD,GAQKE,GAAmB,SAACjE,GACxBrE,OAAOtI,WAAW2M,EAASjG,KAAKtD,YAAY3C,MAC7C,EAEKoQ,GAAmB,SAAClE,GACxBrE,OAAOpI,cAAcyM,EAASjG,KAAK0G,aAAa3M,MACjD,EA0IYqQ,GAAuB,CAClC3T,WAtE6B,SAAC4T,EAAQpE,EAAUqE,EAAWC,EAAQC,GACrD,gBAAVA,GACFN,GAAiBjE,EAEpB,EAmEC3O,kBAtFqC,SACrC+S,EACApE,EACAqE,EACAC,EACAC,GAEc,gBAAVA,GACFN,GAAiBjE,GAEL,iBAAVuE,GACFL,GAAiBlE,EAEpB,EA0ECvP,gBAtGwC,SACxC2T,EACApE,EACAqE,EACAC,EACAC,GAEc,YAAVA,GA5CgC,SAACvE,GACrCrE,OAAOtI,WAAW2M,EAASjG,KAAK3G,QAAQU,MACzC,CA2CG0Q,CAA8BxE,GAElB,iBAAVuE,GACFL,GAAiBlE,EAEpB,EA0FC9O,YAhIqC,SACrCkT,EACAK,EACAlN,EACAmF,EACA6H,GAEc,YAAVA,GAf8B,SAAChN,EAAUmF,GAC7CnF,EAAS,SAAUmF,EAAM3C,KAAN,OAAqBjG,MACzC,CAcG4Q,CAA4BnN,EAAUmF,GAGtC,WAGE,eACA,SACA,2BACA,2BACA,gCACAzC,SAASsK,IAvBqB,SAAChN,EAAUmF,GAC7CnF,EAAS,eAAgBmF,EAAM3C,KAAN,aAA2BjG,MACrD,CAuBG6Q,CAA4BpN,EAAUmF,EAEzC,EA0GCkI,oBA3DsC,SACtC9Q,EACA2Q,EACAJ,EACA3H,EACA6H,EACAM,OAEMC,EAAoB,MAEZ,gBAAVP,GACFO,EAAkBtI,KAAK,CACrBmB,IAAK,aACL7J,MAAO4I,EAAM3C,KAAN,WAAyBjG,MAChC4K,KAAM,UAKE,gBAAV6F,GACU,iBAAVA,GACU,eAAVA,GACU,6BAAVA,GACU,6BAAVA,GACU,oCAAVA,GAEAO,EAAkBtI,KAAK,CACrBmB,IAAK,mBACL7J,MAAO4I,EAAM3C,KAAN,iBAA+BjG,MACtC4K,KAAM,UAII,eAAV6F,EACY,eAAVzQ,GACFgR,EAAkBtI,KAAKmC,GAAgB,kBACvCmG,EAAkBtI,KAAKiC,GAAgB,mBACvCqG,EAAkBtI,KAAKiC,GAAgB,eAEvCqG,EAAkBtI,KAAKiC,GAAgB,kBACvCqG,EAAkBtI,KAAKmC,GAAgB,mBACvCmG,EAAkBtI,KAAKmC,GAAgB,mBAEpC,GAAc,6BAAV4F,EAAsC,KACzCQ,EAAoBjR,EAAQ6K,GAAkBF,IAEnD,2BAA4B,mCAAmClC,SAC9D,SAACoB,UAAQmH,EAAkBtI,KAAKuI,EAAkBpH,OAItDkH,EAAYC,EACb,GC7FYE,GAAsB,SAACtI,OAC9BuI,EAAalB,EAAwB,kBACE,MAAvCrH,EAAM3C,KAAKiK,kBAAkBlQ,QAC/BmR,EAAalB,EAAwB,mBAEhC,CACLpG,IAAK,aACLe,KAAM,QACN5K,MAAOmR,EAEV,EA6QYC,GAA+B,CAC1CnU,YAvLkC,SAAC2L,UAC9BA,EAAM3C,KAAKoL,sBAAsBrR,MAG/B,GAFE,CA5JF,CACL6J,IAAK,wBACLe,KAAM,QACN5K,MATAsR,IACGC,MACAC,SAAS,EAAG,UACZC,QAAQ,SACRC,OAAO,uBAAyB,KAiKtC,EAmLCxU,gBAjLqC,SAAC0L,UACjCA,EAAM3C,KAAK0L,WAAW3R,MAGpB,GAFE,CArJF,CACL6J,IAAK,aACLe,KAAM,QACN5K,MATmBsR,IAClBC,MACAC,SAAS,EAAG,UACZC,QAAQ,SACRC,OAAO,YA0JX,EA6KC5U,OA3K6B,SAAC8L,EAAOlL,OAC/BuI,EAAO,UACR2C,EAAM3C,KAAK2L,yBAAyB5R,OACvCiG,EAAKyC,KApJA,CACLmB,IAAK,2BACLe,KAAM,QACN5K,MAJmB,MAwJhB4I,EAAM3C,KAAK4L,sBAAsB7R,OACpCiG,EAAKyC,KA/IA,CACLmB,IAAK,wBACLe,KAAM,QACN5K,MAJmB,IAmJhB4I,EAAM3C,KAAKoL,sBAAsBrR,OACpCiG,EAAKyC,KA1IA,CACLmB,IAAK,wBACLe,KAAM,QACN5K,MAJmBsR,IAASC,MAAMG,OAAO,uBAAyB,MA8ItD,mBAAVhU,GACFuI,EAAKyC,KAAKiC,GAAgB,iBAGd,WAAVjN,KACD,YAAa,aAAa+K,SAAQ,SAACoB,UAClC5D,EAAKyC,KAAKiC,GAAgBd,OAE5B5D,EAAKyC,KAAKoC,GAAmB,gBAGxB7E,CACR,EAkJCjJ,iBAhJqC,SAAC4L,EAAOlL,EAAO2N,OAC9CpF,EAAO,SACC,kBAAVvI,IACFuI,EAAKyC,KAAKmC,GAAgB,sBACb,SAATQ,GACFpF,EAAKyC,KAAKoC,GAAmB,uBAG5BlC,EAAM3C,KAAKiK,kBAAkBlQ,OAChCiG,EAAKyC,KAtIA,CACLmB,IAAK,oBACLe,KAAM,QACN5K,MAJmB,MAyIhB4I,EAAM3C,KAAK6L,WAAW9R,OACzBiG,EAAKyC,KAhKiC,SAACE,SAElC,CACLiB,IAAK,aACLe,KAAM,QACN5K,MAJiBiQ,EAAyBrH,EAAM3C,KAAK+J,gBAAgBhQ,OAMxE,CAyJa+R,CAA2BnJ,IAElCA,EAAM3C,KAAK2L,yBAAyB5R,OACvCiG,EAAKyC,KA1HA,CACLmB,IAAK,2BACLe,KAAM,QACN5K,MAJmB,MA6HhB4I,EAAM3C,KAAK4L,sBAAsB7R,OACpCiG,EAAKyC,KApHA,CACLmB,IAAK,wBACLe,KAAM,QACN5K,MAJmB,IAuHhB4I,EAAM3C,KAAKsG,yBAAyBvM,OACvCiG,EAAKyC,KA9GA,CACLmB,IAAK,2BACLe,KAAM,QACN5K,MAJmB,IAkHP,YAAVtC,GAAiC,WAAVA,IACxB,kBAAmB,cAAc+K,SAAQ,SAACoB,UACzC5D,EAAKyC,KAAKoC,GAAmBjB,OAI1B5D,CACR,EAkHClJ,mBAhHuC,SAAC6L,EAAOlL,EAAO2N,OAChDpF,EAAO,SAEC,2BAAVvI,IACFuI,EAAKyC,KAAKmC,GAAgB,oBACb,WAATQ,IACFpF,EAAKyC,KAvG6B,SAACE,OACnCoJ,EAAiBpJ,EAAM3C,KAAKgM,gBAAgBjS,aACS,IAArDgS,EAAeE,QAAQnC,KACzBiC,EAAiBA,EAAezJ,UAC9B,EACAyJ,EAAehQ,OAAS+N,EAAwB/N,SAI7C,CACL6H,IAAK,kBACLe,KAAM,QACN5K,MAAOgS,EAEV,CAyFeG,CAAyBvJ,IACtB,SAATyC,GACFpF,EAAKyC,KAAKoC,GAAmB,sBAIrB,mBAAVpN,IACFuI,EAAKyC,KAAKmC,GAAgB,oBACb,SAATQ,GACFpF,EAAKyC,KAAKoC,GAAmB,qBAGjC7E,EAAKyC,KArI6B,SAACE,SAE5B,CACLiB,IAAK,aACLe,KAAM,QACN5K,MAJiBoS,EAA+BxJ,EAAM3C,KAAKoM,SAASrS,OAMvE,CA8HWsS,CAAqB1J,IAC/B3C,EAAKyC,KA3HE,CACLmB,IAAK,iBACLe,KAAM,QACN5K,MAJmBsR,IAASC,MAAMC,SAAS,EAAG,QAAQE,OAAO,iBA8H9D,WAAY,cAAcjJ,SAAQ,SAACoB,UAClC5D,EAAKyC,KAAKoC,GAAmBjB,OAGxB5D,CACR,EAuFC7I,YArFkC,SAACwL,EAAOlL,EAAO2N,OAC3CpF,EAAO,SAEC,kBAAVvI,KACD,SAAU,WAAY,cAAc+K,SAAQ,SAACoB,UAC5C5D,EAAKyC,KAAKoC,GAAmBjB,OAE/B5D,EAAKyC,KAAKmC,GAAgB,sBACb,SAATQ,GACFpF,EAAKyC,KAAKoC,GAAmB,sBAE3ByE,MAAMC,QAAQ5G,EAAM3C,KAAK6L,WAAW9R,QACtCiG,EAAKyC,KAAKwI,GAAoBtI,KAG7BA,EAAM3C,KAAKiK,kBAAkBlQ,OAChCiG,EAAKyC,KA1MA,CACLmB,IAAK,oBACLe,KAAM,QACN5K,MAJmB,MA8MdiG,CACR,EAkEC6K,oBA1CqC,SAAClI,EAAOlL,EAAO2N,OAxJ9CkH,EAyJAtM,EAAO,GAMPgL,EAJkCuB,SACtC5J,EAAM3C,KAAKsG,yBAAyBvM,OAIlC6K,GACAF,UAEH,kCAAmC,4BAA4BlC,SAC9D,SAACoB,UAAQ5D,EAAKyC,KAAKuI,EAAkBpH,OAGH,eAAhCjB,EAAM3C,KAAKwM,WAAWzS,OACxBiG,EAAKyC,KAAKmC,GAAgB,kBAC1B5E,EAAKyC,KAAKiC,GAAgB,mBAC1B1E,EAAKyC,KAAKiC,GAAgB,aAC1B1E,EAAKyC,KAAK,CAAEmB,IAAK,WAAY7J,MAAO,KAAM4K,KAAM,YAEhD3E,EAAKyC,KAAKiC,GAAgB,kBAC1B1E,EAAKyC,KAAKmC,GAAgB,oBAEf,WAATQ,GACFpF,EAAKyC,KAAK,CACRmB,IAAK,kBACL7J,OAnLEuS,EAAc,IAAIpK,KACxBoK,EAAYG,QAAQH,EAAYI,UAAY,GACrCJ,EAAYK,cAAcrK,UAAU,EAAG,KAkL1CqC,KAAM,UAIH3E,CACR,EAUCpJ,oBAjEyC,SAAC+L,EAAOlL,EAAO2N,OAClDpF,EAAO,SAEC,kBAAVvI,IACFuI,EAAKyC,KAAKmC,GAAgB,sBACb,SAATQ,GACFpF,EAAKyC,KAAKoC,GAAmB,sBAE3ByE,MAAMC,QAAQ5G,EAAM3C,KAAK6L,WAAW9R,QACtCiG,EAAKyC,KAAKwI,GAAoBtI,KAG7BA,EAAM3C,KAAKiK,kBAAkBlQ,OAChCiG,EAAKyC,KA7NA,CACLmB,IAAK,oBACLe,KAAM,QACN5K,MAJmB,MAgOhB4I,EAAM3C,KAAK4M,kBAAkB7S,OAChCiG,EAAKyC,KAvNA,CACLmB,IAAK,oBACLe,KAAM,QACN5K,MAJmB,KA2NdiG,CACR,GC1MY6M,GAAyB,CACpC/V,mBApH6B,SAACmP,EAAU6G,EAAMtP,MACpB,0BAAtByI,EAASmG,SAAsC,IACjB,MAA5BnG,EAAS+F,uBACXc,EAAK5G,iBACH,kBACA,uCAEK,EAEP1I,EAAS,kBAAmB,aAGzB,CACR,EAwGC7G,eAtG2B,SAACsP,EAAU6G,MAClC7G,SAAAA,EAAU8G,QAAV9G,MAAoBA,GAAAA,EAAU+G,iBAAkB,KAC5CC,EAAQhH,EAAS+G,iBAAmB/G,EAAS8G,UAE/C3K,KAAK8K,MAAMD,KAAWA,SACxBH,EAAKK,YACH,kFAEK,SAGJ,CACR,EA2FCtW,OAzFmB,SAACoP,EAAU6G,MAC1B7G,SAAAA,EAAUmH,8BAEY/B,EAAOpF,EAASmH,wBAElB/B,EAAOgC,UACzBP,EAAK5G,iBACH,yBACA,iFAEK,EAEP4G,EAAKQ,mBAEP,MAAOC,UACA,SAGJ,CACR,EAuECxW,6DArE2B,WAAOkP,EAAU6G,wFAE1C7G,EAASvJ,aACTuJ,EAASG,kBACTH,EAASI,+CAEIL,GAAiBC,EAAU6G,EAAK5G,2FAExC,kGARiB,IAsExBxP,gBA3D2B,SAACgU,EAAWoC,EAAMxC,EAAW3H,SAClD6K,EAAa3K,KAAK+E,MAAMjF,EAAM3C,KAAK+C,WAAWC,mBAC9BwK,EAAWhO,yCAAU,KAAhCiO,aACO,OAAZA,GAAgC,KAAZA,SACtBX,EAAKK,YAAYM,IACV,wCAGJ,CACR,EAmDClW,aA5CyB,SAAC0O,EAAU6G,WAChC,SAAU7G,IAAaA,EAASyH,KAAK3R,SAChC+Q,EAAKK,YAAY,oCAG3B,EAwCCtC,oBAtC+B,SAAC5E,EAAU6G,MACd,eAAxB7G,EAASuG,gBACNvG,EAAS0H,qBACZb,EAAK5G,iBACH,gBACA,8EAEK,MAEJ,IACDD,EAAS2H,SAAW,SACtBd,EAAK5G,iBACH,WACA,0FAEK,MAEJD,EAAS4H,sBACZf,EAAK5G,iBACH,iBACA,mGAEK,SAGJ,CACR,GC5FK4H,yBAUQC,EAAc9U,EAAa0J,EAAOyC,EAAM0H,kBAC7CiB,aAAeA,OACf9U,YAAcA,OACd0J,MAAQA,OACRyC,KAAOA,OACP0H,KAAOA,OACPkB,QAAUC,EAAaF,EAAc9U,QAErCiV,WAAaC,KAAKD,WAAWE,KAAKD,WAClCrD,YAAcqD,KAAKrD,YAAYsD,KAAKD,WACpC7D,UAAY6D,KAAK7D,UAAU8D,KAAKD,gDAGvC,eACQE,EAAetW,SAASoR,cAAc,0BAExCkF,GACFA,EAAaC,iBAAiB,QAASxJ,4BAI3C,SAAS0F,EAAOzQ,EAAOkM,OACfsI,EAAqB3E,GAAmBY,GACZ,mBAAvB+D,GACTA,EAAmBxU,EAAOoU,KAAK7D,eAE3BkE,EAAuBpE,GAAqB+D,KAAKlV,aACnB,mBAAzBuV,GACTA,EACEzU,EACAkM,EACAkI,KAAK7D,UACL6D,KAAKxL,MACL6H,EACA2D,KAAKrD,qCAKX,iBAC6B3F,GACzBgJ,KAAK/I,KACL+I,KAAKxL,MAAM3C,KACXmO,KAAKlV,aAHCxB,IAAAA,MAAOkO,IAAAA,SJoHkB,SAACP,EAAM3N,EAAOkO,MACpC,SAATP,GAA4B,UAATA,EAAkB,KACjCqJ,EAAM7M,OAAOrF,SAASS,WAAW8K,MAAM,KACvCtC,EAAS,IAAInJ,IAAIoS,EAAI,IAC3BjJ,EAAOhJ,aAAaM,IAAI,UAAW6I,GACnCH,EAAOhJ,aAAaM,IAAI,QAASrF,GACjC+N,EAAOhJ,aAAaM,IAAI,SAAUsI,GAElCxD,OAAOqD,QAAQyJ,aAAa,GAAI,GAAIlJ,GAEvC,CIzHGmJ,CAAsBR,KAAK/I,KAAM3N,EAAOkO,GJ0EV,SAACA,OAC3BpH,EAAQxG,SAASoR,cAAc,8BAEjC5K,EAAO,KACH3G,EAAOM,EAAeyN,GAC5BpH,EAAMqQ,OAAOhX,GAEhB,CIhFGiX,CAAmBlJ,GAGfmJ,EAA8B5O,SAASiO,KAAKlV,cAC9CkP,GACEgG,KAAKxL,MACLwL,KAAKlV,YACLkV,KAAKrB,KAAKiC,SACVZ,KAAK/I,UAIH4J,EJuKmC,SAACrJ,EAASsJ,OAC/CC,EAAsB,GAEtBC,EADUC,IACY3F,MAAK,SAAC4F,UACzBA,EAAK1J,UAAYA,GAAW0J,EAAK5X,QAAUwX,QAGhDE,EAAa,CACuBA,EAA9BxJ,QAA8BwJ,EAArB1X,UAAU6X,IAAWH,MACtCtN,OAAOgE,KAAKyJ,GAAQ9M,SAAQ,SAACoB,GAC3BsL,EAAoBzM,KAAK,CAAEmB,IAAAA,EAAKe,KAAM,QAAS5K,MAAOuV,EAAO1L,eAG1DsL,CACR,CIrLyBK,CAA8B5J,EAASlO,MAGzD0T,GAA6BgD,KAAKlV,aAAc,OAC5CuW,OAAwBrB,KAAKxL,UAC/BqM,EAAcjT,OAAQ,WACWiT,kCAAe,eAArCpL,IAAAA,IAAKe,IAAAA,KAAM5K,IAAAA,MACtByV,EAAiBxP,KAAK4D,GAAKe,GAAQ5K,kCAGvCiV,EAAcvM,WAAduM,cACK7D,GAA6BgD,KAAKlV,iCAAlCwW,OAAAtE,GACDqE,EACA/X,EACA0W,KAAK/I,aAKN0F,YAAYkE,uDAGnB,WAAa/I,2GACiB4G,GAAuBsB,KAAKlV,yBAAlDyW,iCAGEC,EAAUD,eAAAA,EACdzJ,EACAkI,KAAKrB,KACLqB,KAAK7D,UACL6D,KAAKxL,yBAEAgN,oCAGF,4HAGT,WACE7K,+BAGF,cAEyB,uBAArBqJ,KAAKlV,aAC8B,0BAAnCkV,KAAKxL,MAAM3C,KAAKoM,SAASrS,MACzB,KACM6V,EAAgBzB,KAAKxL,MAAM3C,KAAKgM,gBAAgBjS,SAChC,OAAlB6V,EAAwB,KACpBC,EAAiBD,EAAc9H,MAAM,KAAK,QAC3CwC,UAAU,kBAAmBuF,6DAKxC,sHACMC,EAA8B5P,SAASiO,KAAKlV,6CACjBmQ,GAC3B+E,KAAKlV,YACLkV,KAAKxL,cAFDoN,UAIAC,EAAmBnO,OAAOgE,KAAKkK,IAChBhU,SACbkU,EAAS9B,KAAKH,QAAQiC,OACtBC,EAAyBF,EAC5B7R,KAAI,SAACyF,GACQ,aAARA,GACFuM,EAAKrD,KAAK5G,iBAAiBtC,EAAK,QAG5BwM,EAAoBH,EAAOxG,MAAK,SAAC4G,UAAOA,EAAG7F,QAAU5G,KACrDrF,EAAQ6R,EAAoBA,EAAkB7R,MAAQqF,kBAElDrF,iBAAYwR,EAAenM,GAAKlB,KAAK,cAEhDA,KAAK,MACF4N,gDAA6CJ,4DAE9CpD,KAAKK,YAAYmD,wHAW5B,SAAU1M,EAAK7J,QACR+S,KAAKiC,UAAS,SAAC/S,OACZgE,OAAYhE,EAAUgE,aAC5BA,EAAK4D,GAAK7J,MAAQA,EACX,CAAEiG,KAAAA,iCAab,SAAYuQ,GACNA,EAAcxU,aACX+Q,KAAKiC,UAAS,SAAC/S,SACZgE,OAAYhE,EAAUgE,UACOuQ,kCAAe,eAArC3M,IAAAA,IAAKe,IAAAA,KAAM5K,IAAAA,MACtBiG,EAAK4D,GAAKe,GAAQ5K,uCAEb,CAAEiG,KAAAA"}