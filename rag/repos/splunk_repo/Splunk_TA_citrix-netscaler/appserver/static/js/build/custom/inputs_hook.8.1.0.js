var t={2411:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.extractAppName=p,e.versionLabel=e.username=e.splunkdPath=e.serverTimezoneInfo=e.rootPath=e.portNumber=e.locale=e.config=e.buildPushNumber=e.buildNumber=e.appBuild=e.app=e.isAvailable=e.CSRFToken=void 0;var n,o=(n=r(2281))&&n.__esModule?n:{default:n},a=r(9327),i="undefined"==typeof window?r.g:window;function c(t){return(0,o.default)(i,["$C",t])}var u=(0,a.getEntry)("splunkweb_csrf_token_".concat(c("MRSPARKLE_PORT_NUMBER")));e.CSRFToken=u;var s=!!c("SPLUNKD_PATH");function p(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:(0,o.default)(i,["document","location","pathname"],"")).match(/\w\w.\w\w\/(app|manager)\/([^/]+)/);return t?t[2]:void 0}e.isAvailable=s;var l=p();e.app=l;var f=c("APP_BUILD");e.appBuild=f;var v=c("BUILD_NUMBER");e.buildNumber=v;var d=c("BUILD_PUSH_NUMBER");e.buildPushNumber=d;var y=(0,o.default)(i,"$C");e.config=y;var h=c("LOCALE");e.locale=h;var b=c("MRSPARKLE_PORT_NUMBER");e.portNumber=b;var _=c("MRSPARKLE_ROOT_PATH");e.rootPath=_;var m=c("SERVER_ZONEINFO");e.serverTimezoneInfo=m;var g=c("SPLUNKD_PATH");e.splunkdPath=g;var O=c("USERNAME");e.username=O;var j=c("VERSION_LABEL");e.versionLabel=j},7212:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}e.Ng=void 0;var o=r(7735);function a(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return a=function(){return t},t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){u(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function u(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(t){var e=t.appBuild,r=t.buildNumber,n=t.buildPushNumber,a=t.locale,i=t.rootPath,u=t.splunkdPath;function s(t){var o=c({appBuild:e,buildPushNumber:n,buildNumber:r},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}),a=t.match(/(^|\w\w-\w\w\/)static\//);if(!a)return t;var i=a.index+a[0].length-1,u=t.match(/(^|\w\w-\w\w|)static\/app/)?":".concat(o.appBuild||0):"",s=o.buildPushNumber?".".concat(o.buildPushNumber):"",p="/@".concat(o.buildNumber).concat(s).concat(u),l=t.substr(0,i),f=t.substr(i);return"".concat(l).concat(p).concat(f)}function p(t,u){var p=c({appBuild:e,buildPushNumber:n,buildNumber:r,rootPath:i,locale:a},arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}),l=t||"/",f=u?"?".concat((0,o.stringify)(u)):"";return"/"!==l.charAt(0)&&(l="/".concat(l)),s(l="".concat(p.rootPath||"","/").concat(p.locale).concat(l).concat(f),p)}function l(t,e){return p("/help",t,e)}return{createAppDocsURL:function(t,e,r){var n=e.appName,o=e.appVersion;return l({location:"[".concat(n,":").concat(o,"]").concat(t)},r)},createDocsURL:function(t,e){return l({location:t},e)},createRESTURL:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(/^http[s]?:\/\//.test(t))return t;var n,o,a=r.splunkdPath||u||"";return/^\/.*/.test(t)?/^\/services/.test(t)?"".concat(a).concat(t):t:e.app||e.owner?(n=e.sharing?"nobody":e.owner?encodeURIComponent(e.owner):"-",o="system"===e.sharing?"system":e.app?encodeURIComponent(e.app):"-","".concat(a,"/servicesNS/").concat(n,"/").concat(o,"/").concat(t)):"".concat(a,"/services/").concat(t)},createStaticURL:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return p.apply(void 0,["static/".concat(t)].concat(r))},createURL:p,insertCacheBuster:s}}(function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var e=a();if(e&&e.has(t))return e.get(t);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var c=o?Object.getOwnPropertyDescriptor(t,i):null;c&&(c.get||c.set)?Object.defineProperty(r,i,c):r[i]=t[i]}return r.default=t,e&&e.set(t,r),r}(r(2411))),p=(s.createAppDocsURL,s.createDocsURL,s.createRESTURL);s.createStaticURL,s.createURL;s.insertCacheBuster,e.Ng=p},9327:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getEntry=function(t){if("undefined"==typeof document)return null;var e=new RegExp("(^|; ?)".concat(t,"=([^;]+)")),r=null;try{var n=document.cookie.match(e);r=n?n[2]:null}catch(t){}return r}},361:(t,e,r)=>{var n=r(2427),o=r(8003),a=r(7407),i=r(2536),c=r(9097);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=c,t.exports=u},259:(t,e,r)=>{var n=r(4958),o=r(7975),a=r(5139),i=r(6774),c=r(7230);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=c,t.exports=u},6299:(t,e,r)=>{var n=r(3446)(r(6695),"Map");t.exports=n},3209:(t,e,r)=>{var n=r(6975),o=r(7899),a=r(8554),i=r(1029),c=r(6053);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=c,t.exports=u},4380:(t,e,r)=>{var n=r(6695).Symbol;t.exports=n},1743:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}},2112:(t,e,r)=>{var n=r(4904);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},435:(t,e,r)=>{var n=r(8637),o=r(2351);t.exports=function(t,e){for(var r=0,a=(e=n(e,t)).length;null!=t&&r<a;)t=t[o(e[r++])];return r&&r==a?t:void 0}},7486:(t,e,r)=>{var n=r(4380),o=r(9527),a=r(5736),i=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":i&&i in Object(t)?o(t):a(t)}},1326:(t,e,r)=>{var n=r(9657),o=r(5070),a=r(4538),i=r(6154),c=/^\[object .+?Constructor\]$/,u=Function.prototype,s=Object.prototype,p=u.toString,l=s.hasOwnProperty,f=RegExp("^"+p.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!a(t)||o(t))&&(n(t)?f:c).test(i(t))}},9968:(t,e,r)=>{var n=r(4380),o=r(1743),a=r(6753),i=r(9530),c=n?n.prototype:void 0,u=c?c.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(a(e))return o(e,t)+"";if(i(e))return u?u.call(e):"";var r=e+"";return"0"==r&&1/e==-Infinity?"-0":r}},8637:(t,e,r)=>{var n=r(6753),o=r(3865),a=r(8960),i=r(708);t.exports=function(t,e){return n(t)?t:o(t,e)?[t]:a(i(t))}},8793:(t,e,r)=>{var n=r(6695)["__core-js_shared__"];t.exports=n},8552:(t,e,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;t.exports=n},8561:(t,e,r)=>{var n=r(3766);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},3446:(t,e,r)=>{var n=r(1326),o=r(7983);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},9527:(t,e,r)=>{var n=r(4380),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,c=n?n.toStringTag:void 0;t.exports=function(t){var e=a.call(t,c),r=t[c];try{t[c]=void 0;var n=!0}catch(t){}var o=i.call(t);return n&&(e?t[c]=r:delete t[c]),o}},7983:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},2427:(t,e,r)=>{var n=r(1027);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},8003:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7407:(t,e,r)=>{var n=r(1027),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},2536:(t,e,r)=>{var n=r(1027),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},9097:(t,e,r)=>{var n=r(1027);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},3865:(t,e,r)=>{var n=r(6753),o=r(9530),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;t.exports=function(t,e){if(n(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!o(t))||i.test(t)||!a.test(t)||null!=e&&t in Object(e)}},3766:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5070:(t,e,r)=>{var n,o=r(8793),a=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!a&&a in t}},4958:t=>{t.exports=function(){this.__data__=[],this.size=0}},7975:(t,e,r)=>{var n=r(2112),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0||(r==e.length-1?e.pop():o.call(e,r,1),--this.size,0))}},5139:(t,e,r)=>{var n=r(2112);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},6774:(t,e,r)=>{var n=r(2112);t.exports=function(t){return n(this.__data__,t)>-1}},7230:(t,e,r)=>{var n=r(2112);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},6975:(t,e,r)=>{var n=r(361),o=r(259),a=r(6299);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(a||o),string:new n}}},7899:(t,e,r)=>{var n=r(8561);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},8554:(t,e,r)=>{var n=r(8561);t.exports=function(t){return n(this,t).get(t)}},1029:(t,e,r)=>{var n=r(8561);t.exports=function(t){return n(this,t).has(t)}},6053:(t,e,r)=>{var n=r(8561);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},704:(t,e,r)=>{var n=r(9776);t.exports=function(t){var e=n(t,(function(t){return 500===r.size&&r.clear(),t})),r=e.cache;return e}},1027:(t,e,r)=>{var n=r(3446)(Object,"create");t.exports=n},5736:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},6695:(t,e,r)=>{var n=r(8552),o="object"==typeof self&&self&&self.Object===Object&&self,a=n||o||Function("return this")();t.exports=a},8960:(t,e,r)=>{var n=r(704),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=n((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(o,(function(t,r,n,o){e.push(n?o.replace(a,"$1"):r||t)})),e}));t.exports=i},2351:(t,e,r)=>{var n=r(9530);t.exports=function(t){if("string"==typeof t||n(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},6154:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},4904:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},2281:(t,e,r)=>{var n=r(435);t.exports=function(t,e,r){var o=null==t?void 0:n(t,e);return void 0===o?r:o}},6753:t=>{var e=Array.isArray;t.exports=e},9657:(t,e,r)=>{var n=r(7486),o=r(4538);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},4538:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7101:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},9530:(t,e,r)=>{var n=r(7486),o=r(7101);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==n(t)}},9776:(t,e,r)=>{var n=r(3209),o="Expected a function";function a(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(o);var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],a=r.cache;if(a.has(o))return a.get(o);var i=t.apply(this,n);return r.cache=a.set(o,i)||a,i};return r.cache=new(a.Cache||n),r}a.Cache=n,t.exports=a},708:(t,e,r)=>{var n=r(9968);t.exports=function(t){return null==t?"":n(t)}},9335:t=>{function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,n,o,a){n=n||"&",o=o||"=";var i={};if("string"!=typeof t||0===t.length)return i;var c=/\+/g;t=t.split(n);var u=1e3;a&&"number"==typeof a.maxKeys&&(u=a.maxKeys);var s=t.length;u>0&&s>u&&(s=u);for(var p=0;p<s;++p){var l,f,v,d,y=t[p].replace(c,"%20"),h=y.indexOf(o);h>=0?(l=y.substr(0,h),f=y.substr(h+1)):(l=y,f=""),v=decodeURIComponent(l),d=decodeURIComponent(f),e(i,v)?r(i[v])?i[v].push(d):i[v]=[i[v],d]:i[v]=d}return i};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},8795:t=>{var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,a,i,c){return a=a||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?n(o(t),(function(o){var c=encodeURIComponent(e(o))+i;return r(t[o])?n(t[o],(function(t){return c+encodeURIComponent(e(t))})).join(a):c+encodeURIComponent(e(t[o]))})).join(a):c?encodeURIComponent(e(c))+i+encodeURIComponent(e(t)):""};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function n(t,e){if(t.map)return t.map(e);for(var r=[],n=0;n<t.length;n++)r.push(e(t[n],n));return r}var o=Object.keys||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.push(r);return e}},7735:(t,e,r)=>{e.decode=e.parse=r(9335),e.encode=e.stringify=r(8795)}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};(()=>{r.d(n,{Z:()=>p});var t=r(2411),e=r(7212);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){c(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===o(e)?e:String(e)}const p=function(){function r(t,e,n,o,a){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),this.globalConfig=t,this.serviceName=e,this.state=n,this.mode=o,this.util=a,this.savedOnce=!1}var n,o;return n=r,(o=[{key:"onCreate",value:function(){}},{key:"onChange",value:function(t,e,r){"servers"!==t&&"templates"!==t||(this.savedOnce=!1)}},{key:"onRender",value:function(){}},{key:"onSave",value:function(r){var n={templates:r.templates,appliances:r.servers,input_name:r.name,output_mode:"json"},o=new URL((0,e.Ng)("Splunk_TA_citrix_netscaler_rh_validate_input_configuration"),location);if(o.search=new URLSearchParams(n).toString(),!this.savedOnce)try{var a=new XMLHttpRequest;if(a.open("GET",o,!1),a.setRequestHeader("X-Splunk-Form-Key",t.CSRFToken),a.setRequestHeader("X-Requested-With","XMLHttpRequest"),a.setRequestHeader("Content-Type","application/json"),a.send(),200===a.status){if(!1===JSON.parse(a.responseText).entry[0].content.isValid&&!this.savedOnce){this.savedOnce=!0;var c="Selected appliances and templates may cause data duplication. Find more details in 'ta_citrix_netscaler_data_duplication.log' file. To continue, click ",u="save.";return"create"===this.mode?u="add.":"edit"===this.mode&&(u="update."),c+=u,this.util.setState((function(t){return i(i({},t),{},{warningMsg:c})})),!1}}else console.error("validation of data duplication for selected appliances and templates failed with status code : ",a.status)}catch(t){console.error("validation of data duplication for selected appliances and templates failed. ERROR : ",t)}return!0}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}},{key:"onEditLoad",value:function(){}}])&&u(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),r}()})();var o=n.Z;export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,