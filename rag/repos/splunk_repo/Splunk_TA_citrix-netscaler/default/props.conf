##
## SPDX-FileCopyrightText: 2024 Splunk, Inc.
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##
[source::.../var/log/splunk/ta_citrix_netscaler*.log]
sourcetype=citrix:netscaler

[source::.../var/log/splunk/ta_util*.log]
sourcetype=ta:util

[citrix:netscaler:nitro]
DATETIME_CONFIG = CURRENT
EVAL-vendor = "Citrix Systems"
EVAL-vendor_product = "Citrix ADC"

[citrix:netscaler:syslog]
KV_MODE=none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true

TRANSFORMS-appfw_cef_syslog_sourcetype=netscaler_appfw_syslog_sourcetype,netscaler_appfw_cef_syslog_sourcetype
REPORT-citrix_netscaler_syslog = citrix_netscaler_syslog,netscaler_syslog_fields
EXTRACT-1-syslog_event_name = \s+[\d\/]{10}(:\d{2}){3}\s+\w{3}\s+\S+\s+\S+\s+:([^:]+)?\s+\w+\s+(?<citrix_netscaler_event_name>\w+)\s+\d+\s+0\s+:\s+.+
REPORT-syslog_subscriber_session_event_session_failure = syslog_subscriber_session_event_session_failure

EVAL-delink_time = ltrim(Delink, "Time ")
EVAL-start_time = ltrim(Start, "Time ")
EVAL-end_time = ltrim(End, "Time ")
EVAL-bytes = Total_bytes_recv+Total_bytes_send
EVAL-dest_ip = case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(:?[0-9a-fA-F:]{0,4}:[0-9a-fA-F:]*[.\d]*)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":"))

EVAL-dest_port = if(isnotnull(Destination_port), Destination_port, mvindex(split(Destination,":"),1))
EVAL-src_ip = case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvjoin(if(match(Vserver,"]"),mvindex(split(Vserver,":"),0,-2),mvindex(split(Vserver,":"),0,-1)),":") ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":"))
EVAL-src_port = if(isnotnull(Source_port), Source_port, mvindex(split(Source,":"),1))
EVAL-vendor = "Citrix Systems"
FIELDALIAS-cim_builder = Total_bytes_recv AS bytes_in Total_bytes_send AS bytes_out ns_name AS dvc Type AS icmp_type HitRule AS rule Failure_reason AS reason
EVAL-dest = case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT", ns_name)), true(), mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":"))
EVAL-dest_host = case((event_source!="SSLVPN" and match(event_name,"^LOG(IN|OUT).*")) or event_source=="EVENT", ns_name)
EVAL-duration = strptime(Duration,"%H:%M:%S")-strptime("00:00:00","%H:%M:%S")
EVAL-src = case(event_source=="AAATM" and event_name=="LOGIN" and match(User, "@"), trim(mvindex(split(User,"@"),1)), event_source=="AAATM" and event_name=="LOGIN" and match(SessionId,"User") and match(trim(mvindex(split(SessionId,"User"),1)),"@"), trim(mvindex(split(mvindex(split(SessionId,"User"),1),"@"),1)), event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvjoin(if(match(Vserver,"]"),mvindex(split(Vserver,":"),0,-2),mvindex(split(Vserver,":"),0,-1)),":") ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(),mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":"))
FIELDALIAS-device_serial_number_chassis = device_serial_number AS chassis
EVAL-action = case(event_source=="EVENT" and event_name=="STARTSYS", "started", match(event_source, "EVENT|AAATM") and match(event_name, "STOPSYS|LOGOUT"), "stopped", match(event_name,".*CONNSTAT$") or Action=="ALLOW" or match(Response_code,"(2|3)\d\d"), "allowed", Action=="BLOCK" or (event_source=="SSLVPN" and event_name=="LOGOUT") or match(Response_code,"4\d\d"), "blocked", match(Response_code,"5\d\d"), "teardown", event_source=="SSLVPN" and event_name=="LOGIN", "added", match(event_name,"^LOG(IN|OUT)$"), "success", match(event_name,"LOGIN_FAILED"), "failure", true(), action)

EVAL-change_type = case(match(event_name,"^(START|STOP)SYS$"), "system", event_source=="AAATM" and event_name=="LOGOUT", "AAA")
EVAL-object_category = case(match(event_name,"^(START|STOP)SYS$"), "OS", event_source=="AAATM" and event_name=="LOGOUT", "user")
EVAL-object_attrs = case(match(event_name,"^(START|STOP)SYS$"), "OS", event_source=="AAATM" and event_name=="LOGOUT", "login session")
EVAL-user = if(isnotnull(User), trim(mvindex(split(User,"@"),0)), trim(mvindex(split(mvindex(split(SessionId,"User"),1),"@"),0)))
EVAL-object = case(match(event_name,"^(START|STOP)SYS$"), "NetScaler system", event_source=="AAATM" and event_name=="LOGOUT", if(isnotnull(User), User, trim(mvindex(split(SessionId,"User"),1))))
EVAL-protocol = case(event_name=="ALG_SIP_INFO_PACKET_EVENT", "ip", isnotnull(Protocol), lower(Protocol), true(), lower(Transport))
EVAL-protocol_version = if(isnotnull(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip,isnotnull(Destination_IP), Destination_IP, isnull(Destination),if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":"))), if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":")),"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"),"ipv4",if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":")), "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)"), "ipv6", null())),if(isnotnull(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvindex(split(Vserver,":"),0) ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":"))), if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvindex(split(Vserver,":"),0) ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":")), "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"),"ipv4", if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvindex(split(Vserver,":"),0) ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":")),"^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)"), "ipv6", null())),null()))
EVAL-transport = if(isnotnull(Transport), lower(Transport), lower(Protocol))
EVAL-status = case((event_source=="AAATM" and event_name=="LOGOUT") or match(event_name,"^(START|STOP)SYS$"), "success")
EVAL-command = case(event_name=="STOPSYS", "shutdown", event_name=="STARTSYS", "start", event_source=="AAATM" and event_name=="LOGOUT", "UI")
EVAL-signature = case(event_source=="SSLVPN" and event_name=="LOGOUT", "SSLVPN LOGOUT", event_source=="SSLVPN" and event_name=="LOGIN", "SSLVPN LOGIN")
EVAL-SessionId = if(match(SessionId,"User"), mvindex(split(SessionId,"-"),0), SessionId)
EVAL-object_id = case(event_source=="AAATM" and event_name=="LOGOUT", if(isnotnull(User), User, trim(mvindex(split(SessionId,"User"),1))))
EVAL-app = if(event_source=="ACL", "icmp", event_source)
EVAL-src_translated_ip = case(event_name=="ALG_SIP_INFO_PACKET_EVENT", Natted_IP)
EVAL-src_translated_port = case(event_name=="ALG_SIP_INFO_PACKET_EVENT", Natted_port)
EVAL-user_agent = case(isnotnull(Browser_type), Browser_type, isnotnull(Browser), Browser)
EVAL-vendor_product = "Citrix ADC"
LOOKUP-citrix_icmp_code_lookup = citrix_icmp_code_lookup icmp_type OUTPUT icmp_code

[citrix:netscaler:ipfix]
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
LINE_BREAKER = ([\r\n]+)Sequence
DATETIME_CONFIG = NONE
# prepend '1' in the class name to execute the transform of 'appfw_cef_syslog_sourcetype' class at last
TRANSFORMS-1ipfix_syslog_sourcetype=netscaler_ipfix_syslog_sourcetype
TRANSFORMS-appfw_cef_syslog_sourcetype=netscaler_appfw_syslog_sourcetype,netscaler_appfw_cef_syslog_sourcetype

FIELDALIAS-dest = destinationIPv4Address AS dest destinationIPv4Address AS dest_ip destinationTransportPort as dest_port
EVAL-duration = (flowEndMicroseconds-flowStartMicroseconds)/1000
EVAL-http_user_agent_length = len(netscalerHttpReqUserAgent)
FIELDALIAS-src = sourceIPv4Address AS src sourceIPv4Address AS src_ip sourceTransportPort AS src_port
EVAL-url_length = len(netscalerHttpReqUrl)
EVAL-vendor = "Citrix Systems"
FIELDALIAS-cim_builder = netscalerHttpReqUserAgent AS http_user_agent netscalerHttpReqReferer AS http_referrer netscalerHttpContentType AS http_content_type netscalerAaaUsername AS user netscalerHttpRspLen AS bytes_in netscalerHttpRspStatus AS status netscalerHttpReqUrl AS url
EVAL-protocol_version = case(ipVersion == "4", "ipv4", ipVersion == "6", "ipv6", true(), null())
FIELDALIAS-netscalerRoundTripTime_rtt = netscalerRoundTripTime AS rtt
FIELDALIAS-netscalerHttpRspStatus_2_response_code = netscalerHttpRspStatus as response_code
FIELDALIAS-netscalerHttpReqUserAgent_2_client_type = netscalerHttpReqUserAgent as client_type
EVAL-http_method = if(netscalerHttpReqMethod=="", null, netscalerHttpReqMethod)
EVAL-vendor_product = "Citrix ADC"

[citrix:netscaler:ipfix:syslog]
KV_MODE=none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
REPORT-citrix_netscaler_ipfix_syslog = citrix_netscaler_ipfix_syslog,citrix_netscaler_ipfix_syslog_ns_syslog,citrix_netscaler_ipfix_syslog_event_name,netscaler_syslog_fields

EVAL-delink_time = ltrim(Delink, "Time ")
EVAL-start_time = ltrim(Start, "Time ")
EVAL-end_time = ltrim(End, "Time ")
EVAL-bytes = Total_bytes_recv+Total_bytes_send
EVAL-dest_ip = case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(:?[0-9a-fA-F:]{0,4}:[0-9a-fA-F:]*[.\d]*)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":"))

EVAL-dest_port = if(isnotnull(Destination_port), Destination_port, mvindex(split(Destination,":"),1))
EVAL-src_ip = case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvjoin(if(match(Vserver,"]"),mvindex(split(Vserver,":"),0,-2),mvindex(split(Vserver,":"),0,-1)),":") ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":"))
EVAL-src_port = if(isnotnull(Source_port), Source_port, mvindex(split(Source,":"),1))
EVAL-vendor = "Citrix Systems"
FIELDALIAS-cim_builder = Total_bytes_recv AS bytes_in Total_bytes_send AS bytes_out ns_name AS dvc Type AS icmp_type HitRule AS rule Failure_reason AS reason
EVAL-dest = case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT", ns_name)), true(), mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":"))
EVAL-dest_host = case((event_source!="SSLVPN" and match(event_name,"^LOG(IN|OUT).*")) or event_source=="EVENT", ns_name)
EVAL-duration = strptime(Duration,"%H:%M:%S")-strptime("00:00:00","%H:%M:%S")
EVAL-src = case(event_source=="AAATM" and event_name=="LOGIN" and match(User, "@"), trim(mvindex(split(User,"@"),1)), event_source=="AAATM" and event_name=="LOGIN" and match(SessionId,"User") and match(trim(mvindex(split(SessionId,"User"),1)),"@"), trim(mvindex(split(mvindex(split(SessionId,"User"),1),"@"),1)), event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvjoin(if(match(Vserver,"]"),mvindex(split(Vserver,":"),0,-2),mvindex(split(Vserver,":"),0,-1)),":") ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(),mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":"))
FIELDALIAS-device_serial_number_chassis = device_serial_number AS chassis
EVAL-action = case(event_source=="EVENT" and event_name=="STARTSYS", "started", match(event_source, "EVENT|AAATM") and match(event_name, "STOPSYS|LOGOUT"), "stopped", match(event_name,".*CONNSTAT$") or Action=="ALLOW" or match(Response_code,"(2|3)\d\d"), "allowed", Action=="BLOCK" or (event_source=="SSLVPN" and event_name=="LOGOUT") or match(Response_code,"4\d\d"), "blocked", match(Response_code,"5\d\d"), "teardown", event_source=="SSLVPN" and event_name=="LOGIN", "added", match(event_name,"^LOG(IN|OUT)$"), "success", match(event_name,"LOGIN_FAILED"), "failure", true(), action)

EVAL-change_type = case(match(event_name,"^(START|STOP)SYS$"), "system", event_source=="AAATM" and event_name=="LOGOUT", "AAA")
EVAL-object_category = case(match(event_name,"^(START|STOP)SYS$"), "OS", event_source=="AAATM" and event_name=="LOGOUT", "user")
EVAL-object_attrs = case(match(event_name,"^(START|STOP)SYS$"), "OS", event_source=="AAATM" and event_name=="LOGOUT", "login session")
EVAL-user = if(isnotnull(User), trim(mvindex(split(User,"@"),0)), trim(mvindex(split(mvindex(split(SessionId,"User"),1),"@"),0)))
EVAL-object = case(match(event_name,"^(START|STOP)SYS$"), "NetScaler system", event_source=="AAATM" and event_name=="LOGOUT", if(isnotnull(User), User, trim(mvindex(split(SessionId,"User"),1))))
EVAL-protocol = case(event_name=="ALG_SIP_INFO_PACKET_EVENT", "ip", isnotnull(Protocol), lower(Protocol), true(), lower(Transport))
EVAL-protocol_version = if(isnotnull(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip,isnotnull(Destination_IP), Destination_IP, isnull(Destination),if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":"))), if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":")),"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"),"ipv4",if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), Client_ip, isnotnull(Destination_IP), Destination_IP, isnull(Destination), if(match(event_name,".*CONNSTAT$"),Remote_ip,case(match(host, "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)|^(?:[\d+\.]+)") and (match(event_name,"^LOG(IN|OUT).*") or event_source=="EVENT"), host)), true(),mvjoin(if(match(Destination,"]"),mvindex(split(Destination,":"),0,-2),mvindex(split(Destination,":"),0,-1)),":")), "^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)"), "ipv6", null())),if(isnotnull(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvindex(split(Vserver,":"),0) ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":"))), if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvindex(split(Vserver,":"),0) ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":")), "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"),"ipv4", if(match(case(event_source=="SSLVPN" and match(event_name,"^LOG(IN|OUT)$"), mvindex(split(Vserver,":"),0) ,isnotnull(Source_IP), Source_IP, isnull(Source), Client_ip, true(), mvjoin(if(match(Source,"]"),mvindex(split(Source,":"),0,-2),mvindex(split(Source,":"),0,-1)),":")),"^(?:\[?[:0-9a-fA-F]{0,4}:[0-9a-fA-F:]*[.\d]*\]?)"), "ipv6", null())),null()))
EVAL-transport = if(isnotnull(Transport), lower(Transport), lower(Protocol))
EVAL-status = case((event_source=="AAATM" and event_name=="LOGOUT") or match(event_name,"^(START|STOP)SYS$"), "success")
EVAL-command = case(event_name=="STOPSYS", "shutdown", event_name=="STARTSYS", "start", event_source=="AAATM" and event_name=="LOGOUT", "UI")
EVAL-signature = case(event_source=="SSLVPN" and event_name=="LOGOUT", "SSLVPN LOGOUT", event_source=="SSLVPN" and event_name=="LOGIN", "SSLVPN LOGIN")
EVAL-SessionId = if(match(SessionId,"User"), mvindex(split(SessionId,"-"),0), SessionId)
EVAL-object_id = case(event_source=="AAATM" and event_name=="LOGOUT", if(isnotnull(User), User, trim(mvindex(split(SessionId,"User"),1))))
EVAL-app = if(event_source=="ACL", "icmp", event_source)
EVAL-src_translated_ip = case(event_name=="ALG_SIP_INFO_PACKET_EVENT", Natted_IP)
EVAL-src_translated_port = case(event_name=="ALG_SIP_INFO_PACKET_EVENT", Natted_port)
EVAL-user_agent = case(isnotnull(Browser_type), Browser_type, isnotnull(Browser), Browser)
EVAL-vendor_product = "Citrix ADC"
LOOKUP-citrix_icmp_code_lookup = citrix_icmp_code_lookup icmp_type OUTPUT icmp_code

[citrix:netscaler:appfw]
KV_MODE=none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
REPORT-citrix_netscaler_appfw_syslog = citrix_netscaler_syslog,netscaler_appfw_syslog_fields
EXTRACT-dest = (http|https):\/\/(?<dest>.*?)\/
EXTRACT-dest_ip = (http|https):\/\/(?<dest_ip>(\d{1,3}\.){3}\d{1,3}|([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|::([0-9a-fA-F]{1,4}:){1,6}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4})\/
EVAL-dvc = if(match(appfw_message, "\";"), ns_name, host)
FIELDALIAS-signature = event_name AS signature
FIELDALIAS-src_ip = src AS src_ip
EVAL-action = if(match(syslog_message, "<blocked>"), "blocked", "allowed")
EVAL-ids_type = "network"
EVAL-transport = "tcp"
EVAL-vendor = "Citrix Systems"
EVAL-vendor_product = "Citrix ADC"
LOOKUP-citrix_netscaler_appfw_category_severity_lookup = citrix_netscaler_appfw_category_severity_lookup signature OUTPUT category, severity

[citrix:netscaler:appfw:cef]
KV_MODE=none
SHOULD_LINEMERGE = false
# For Load Balancing on UF
EVENT_BREAKER_ENABLE = true
REPORT-cef_extract_field = cef_format_extract_field_1, cef_format_extract_field_2
EXTRACT-dest = request=(http|https):\/\/(?<dest>.*?)\/
EXTRACT-dest_ip = (http|https):\/\/(?<dest_ip>(\d{1,3}\.){3}\d{1,3}|([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|::([0-9a-fA-F]{1,4}:){1,6}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4})\/
EVAL-dvc = if(match(act, "\";"), ns_name, host)
FIELDALIAS-signature = event_name AS signature
FIELDALIAS-src_ip = src AS src_ip
FIELDALIAS-src_port = spt AS src_port
EVAL-action = if(match(trim(act), "^blocked*"), "blocked", "allowed")
EVAL-severity = case(match(lower(cs4), "debug|info"), "informational", match(lower(cs4), "notice"), "low", match(lower(cs4), "warn"), "medium", match(lower(cs4), "error|alert"), "high", match(lower(cs4), "crit|emer"), "critical")
EVAL-ids_type = "network"
EVAL-transport = "tcp"
EVAL-vendor = "Citrix Systems"
EVAL-vendor_product = "Citrix ADC"
LOOKUP-citrix_netscaler_appfw_category_severity_lookup = citrix_netscaler_appfw_category_severity_lookup signature OUTPUT category


[source::stat:system]
EVAL-storage = disk0size+disk1size
EVAL-storage_used_percent = max(disk0perusage, disk1perusage)
FIELDALIAS-cim_builder = source AS dest numcpus AS cpu_count
FIELDALIAS-cpuusagepcnt_cpu_load_percent = cpuusagepcnt AS cpu_load_percent
FIELDALIAS-memusagepcnt_mem_used_percent = memusagepcnt AS mem_used_percent

[source::stat:systemmemory]
FIELDALIAS-cim_builder = source AS dest
FIELDALIAS-memusagepcnt_mem_used_percent = memusagepcnt AS mem_used_percent

[source::config:nsversion]
EXTRACT-version_short = version=\"NetScaler\s+(?<version_short>NS[^:]{1,10}):
FIELDALIAS-version_full = version AS version_full version_short AS version

[source::config:Interface]
FIELDALIAS-interfaces = devicename AS interfaces

[source::config:nshardware]
FIELDALIAS-serialno_chassis = serialno AS chassis
FIELDALIAS-cpufrequncy_cpu_mhz = cpufrequncy AS cpu_mhz
FIELDALIAS-citrix_netscaler_description = hwdescription AS description
FIELDALIAS-citrix_netscaler_serial = serialno as serial


[source::stat:ns]
FIELDALIAS-numcpus_cpu_count = numcpus AS cpu_count
FIELDALIAS-cpuusagepcnt_cpu_load_percent = cpuusagepcnt AS cpu_load_percent
FIELDALIAS-memusagepcnt_mem_used_percent = memusagepcnt AS mem_used_percent
FIELDALIAS-tcpcurclientconn_interface_connections = tcpcurclientconn AS interface_connections
FIELDALIAS-tcpcurserverconn_vip_connections = tcpcurserverconn AS vip_connections
FIELDALIAS-ssltransactionsrate_ssl_tps = ssltransactionsrate AS ssl_tps
LOOKUP-citrix_netscaler_ha_states = citrix_netscaler_ha_states hacurstate OUTPUT failover_status_string, failover_status

[source::stat:protocolhttp]
FIELDALIAS-httperrserverbusyrate_5XX_codes = httperrserverbusyrate AS 5XX_codes

[source::stat:protocolip]
FIELDALIAS-iptotrxbytes_interface_throughput = iptottxbytes AS interface_throughput
FIELDALIAS-iptotrxbytes_vip_throughput = iptotrxbytes AS vip_throughput

[source::stat:ssl]
FIELDALIAS-ssltotsessions = ssltotsessions AS sessions

[source::stat:hanode]
LOOKUP-citrix_netscaler_ha_states = citrix_netscaler_ha_states hacurstate OUTPUT failover_status_string, failover_status

[source::stat:*]
REPORT-fields_for_citrix_netscaler_state = fields_for_citrix_netscaler_state
LOOKUP-citrix_netscaler_availability_status = citrix_netscaler_availability_status state as citrix_netscaler_state OUTPUT avl_status_string, avl_status, avl_status as citrix_netscaler_avl_status

[source::stat:service]
FIELDALIAS-name_2_node = name as node

[source::stat:servicegroup]
FIELDALIAS-servicegroupname_2_pool = servicegroupname as pool

[source::config:service]
FIELDALIAS-name_2_node = name as node

[source::config:servicegroup]
FIELDALIAS-servicegroupname_2_pool = servicegroupname as pool
