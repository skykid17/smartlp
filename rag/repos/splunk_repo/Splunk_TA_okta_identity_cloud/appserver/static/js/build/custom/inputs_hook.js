var e={d:(t,a)=>{for(var i in a)e.o(a,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:a[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,r=function(e,t){if("object"!==a(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var n=i.call(e,"string");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===a(r)?r:String(r)),n)}var r}e.d(t,{Z:()=>n});const n=function(){function e(t,a,i,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=a,this.state=i,this.mode=n,this.util=r,this.handleStartDateField=this.handleStartDateField.bind(this),this.handleMetricField=this.handleMetricField.bind(this)}var t,a;return t=e,(a=[{key:"handleEditModeOnRender",value:function(e){var t="apps"===e.metric.value;return e.use_existing_checkpoint.display=!t,e.start_date.display=!t,e.use_existing_checkpoint.value="yes",e.use_existing_checkpoint.markdownMessage={text:"A Checkpoint for this input already exists. Selecting `No` will reset the data collection.",color:"red",markdownType:"text"},e.metric.disabled=!0,e.start_date.disabled=!0,e.end_date.disabled=!0,e}},{key:"onRender",value:function(){var e=this;this.util.setState((function(t){var a=JSON.parse(JSON.stringify(t.data));"edit"===e.mode&&(a=e.handleEditModeOnRender(a));var i="logs"===a.metric.value,n="apps"===a.metric.value;"create"===e.mode&&(a.start_date.value=i?e._getDefaultStartDate():e._getDefaultStartDateAppsMetric(),i||delete a.end_date.value),a.start_date.display=!n;var r=i||n;return a.advanced_settings.display=!1,r&&(a.advanced_settings.display=!0,a.advanced_settings.value=0,n&&(a.interval.value=86400)),{data:a}}))}},{key:"handleAdvancedSettingsField",value:function(e,t,a){var i=a.data.metric.value,n=0===parseInt(t);return e.logs_delay.display=!n&&"logs"===i,e.query_window_size.display=!n&&"logs"===i,e.end_date.display=!n&&"logs"===i,e.collect_uris.display=!n&&"apps"===i,e}},{key:"handleMetricField",value:function(e,t){var a="apps"===t,i="logs"===t;e.start_date.value=i?this._getDefaultStartDate():this._getDefaultStartDateAppsMetric(),e.start_date.display=!a,e.logs_delay.display=!1,e.query_window_size.display=!1,e.collect_uris.display=!1,delete e.end_date.value,e.end_date.display=!1;var n=i||a;return e.advanced_settings.display=!1,n&&(e.advanced_settings.value=0,e.advanced_settings.display=!0,a&&(e.interval.value=86400)),e}},{key:"handleUseExistingCheckpointField",value:function(e){var t=!("no"===e.use_existing_checkpoint.value);return e.start_date.disabled=t,e.end_date.disabled=t,e}},{key:"handleStartDateField",value:function(e,t){return"edit"!==(null==this?void 0:this.mode)||this.state.data.start_date.value!==t&&(e.start_date.markdownMessage={text:"Changing this parameter may result in gaps or duplication in data collection",color:"red",markdownType:"text"}),e}},{key:"_getDefaultStartDateAppsMetric",value:function(){return"1970-01-01T00:00:00.000Z"}},{key:"_getDefaultStartDate",value:function(){var e=new Date;return e.setDate(e.getDate()-7),e.toISOString()}},{key:"onChange",value:function(e,t,a){var i={advanced_settings:this.handleAdvancedSettingsField,metric:this.handleMetricField,use_existing_checkpoint:this.handleUseExistingCheckpointField,start_date:this.handleStartDateField}[e];"function"==typeof i&&this.util.setState((function(e){var n=JSON.parse(JSON.stringify(e.data));return{data:i(n,t,a)}}))}}])&&i(t.prototype,a),Object.defineProperty(t,"prototype",{writable:!1}),e}();var r=t.Z;export{r as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,