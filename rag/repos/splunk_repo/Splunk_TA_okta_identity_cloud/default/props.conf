##
## SPDX-FileCopyrightText: 2024 Splunk, Inc.
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##

[OktaIM2:group]
KV_MODE = json
DATETIME_CONFIG = NONE
TZ = UTC
pulldown_type = 1

FIELDALIAS-group-group_id = id AS group_id
FIELDALIAS-dest = host AS dest
FIELDALIAS-id_as_serial = id AS serial
FIELDALIAS-profile_description_as_description = profile.description AS description
FIELDALIAS-profile_name_as_user = profile.name AS user

EVAL-vendor_product = "Okta"

LOOKUP-group2app_lookup = okta2_app_group_lookup group_id as id OUTPUT app_id as accessible_apps, app_name, app_label
LOOKUP-group2user_lookup = okta2_group_member_lookup group_id as id OUTPUT user_id as group_members, group_name, user_name

[OktaIM2:app]
KV_MODE = json
TIME_PREFIX = lastUpdated
TZ = UTC
pulldown_type = 1

FIELDALIAS-app-app_id = id AS app_id
FIELDALIAS-dest = host AS dest
FIELDALIAS-id_as_serial = id AS serial
FIELDALIAS-label_as_description = label AS description

EVAL-vendor_product = "Okta"

[OktaIM2:user]
KV_MODE = json
TIME_PREFIX = lastUpdated
TZ = UTC
pulldown_type = 1

FIELDALIAS-id_as_serial = id AS serial
FIELDALIAS-dest = host AS dest
FIELDALIAS-profile_login_as_user = profile.login AS user
FIELDALIAS-id_as_user_id = id AS user_id

EVAL-description = 'profile.firstName' . " " . 'profile.lastName'
EVAL-vendor_product = "Okta"

LOOKUP-user2group_lookup = okta2_group_member_lookup user_id as id OUTPUT group_id as memberof_groups, group_name, user_name
LOOKUP-user2app_lookup = okta2_app_user_lookup user_id as id OUTPUT app_id as accessible_apps, app_name, app_label


[OktaIM2:log]
KV_MODE = json
SHOULD_LINEMERGE = false
TIME_PREFIX = "published":\s*"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%3N%Z
MAX_TIMESTAMP_LOOKAHEAD = 25
TZ = UTC
pulldown_type = 1

REPORT-extract_target_fields = okta_extract_transaction_data,okta_extract_target_data,okta_extract_target_data_first_occurrence, okta_target_data_app_instance_attributes_transform,okta_target_data_app_user_attributes_transform,okta_target_data_user_attributes_transform,okta_target_data_access_token_attributes_transform,okta_target_data_active_directory_attributes_transform,okta_target_data_id_token_attributes_transform,okta_target_data_refresh_token_attributes_transform,okta_target_data_policy_rule_attributes_transform,okta_target_data_ad_agent_attributes_transform,okta_target_data_app_group_attributes_transform,okta_target_data_role_attributes_transform,okta_target_data_policy_entity_attributes_transform,okta_target_data_group_push_mapping_attributes_transform,okta_target_data_user_group_attributes_transform,okta_target_data_resource_set_attributes_transform,okta_target_data_resource_request_attributes_transform

FIELDALIAS-alert_id = transaction.id AS id
FIELDALIAS-client_ipAddress_as_src = client.ipAddress AS src
FIELDALIAS-client_ipAddress_as_src_ip = client.ipAddress AS src_ip
FIELDALIAS-command = eventType AS command
FIELDALIAS-dvc = host AS dvc
FIELDALIAS-host_as_dest = host AS dest
FIELDALIAS-signature = eventType AS signature
FIELDALIAS-src_user = actor.alternateId AS src_user
FIELDALIAS-src_user_id = actor.id AS src_user_id
FIELDALIAS-src_user_type = actor.type AS src_user_type
FIELDALIAS-src_user_name = actor.displayName AS src_user_name

EVAL-action = case(eventType IN ("security.request.blocked"), "blocked", eventType IN ("app.access_request.approver.deny", "app.access_request.deny"), "stopped", eventType == "policy.evaluate_sign_on" AND 'outcome.result' == "CHALLENGE", "pending", eventType == "policy.evaluate_sign_on" AND 'outcome.result' == "ALLOW", "success", eventType == "policy.evaluate_sign_on" AND 'outcome.result' == "DENY", "failure", eventType == "app.user_management" AND displayMessage == "Successfully deleted member of an app group", "deleted", eventType == "app.user_management" AND displayMessage == "Successfully imported new member to an app group", "created", eventType IN ("device.lifecycle.unsuspend", "application.configuration.reset_logo", "application.configuration.update_logo", "application.lifecycle.activate", "application.lifecycle.deactivate", "application.lifecycle.update", "application.provision.user.deactivate", "application.provision.user.deprovision", "application.provision.user.reactivate", "application.user_membership.add", "application.user_membership.change_password", "application.user_membership.change_username", "application.user_membership.remove", "application.user_membership.restore", "application.user_membership.restore_password", "application.user_membership.update", "device.lifecycle.activate", "device.lifecycle.deactivate", "device.lifecycle.suspend", "directory.app_user_profile.bootstrap", "directory.app_user_profile.update", "directory.mapping.update", "directory.user_profile.update", "group.application_assignment.add", "group.application_assignment.remove", "group.application_assignment.update", "group.user_membership.add", "group.user_membership.remove", "oauth2.as.updated", "policy.lifecycle.activate", "policy.lifecycle.deactivate", "policy.lifecycle.update", "policy.rule.deactivate", "policy.rule.update", "system.agent.ad.deactivate", "system.agent.ad.reactivate", "system.agent.ad.start", "system.agent.ad.update_user", "system.api_token.enable", "system.import.group.update", "system.import.user.update", "system.agent.ad.realtimesync", "app.oauth2.admin.consent.grant", "app.oauth2.as.consent.revoke.implicit.client", "app.realtimesync.import.details.update_user", "system.agent.ad.reset_user_password", "user.account.privilege.grant", "user.account.privilege.revoke", "user.account.reset_password", "user.account.unlock", "user.account.update_password", "user.account.update_profile", "user.account.update_secondary_email", "user.lifecycle.activate", "user.lifecycle.deactivate", "user.lifecycle.suspend", "user.lifecycle.unsuspend", "user.mfa.factor.activate", "user.mfa.factor.deactivate", "user.mfa.factor.reset_all", "user.mfa.factor.update", "user.mfa.factor.suspend", "user.mfa.factor.unsuspend", "app.approval_workflow .request_status_changed.APPROVED", "app.approval_workflow .request_status_changed.CREATED", "app.approval_workflow .request_status_changed.EXPIRED", "app.approval_workflowapprover_action.approved", "app.oauth2.as.key.rollover", "app.oauth2.as.token.revoke.implicit", "application.policy.sign_on.update", "application.provision.user.sync", "application.user_membership.show_password", "oauth2.resource.created", "group.user_membership.rule.trigger", "oauth2.resource.updated", "system.agent.ad.invoke_dir", "system.agent.ad.unlock_user_account", "system.agent.ad.write_ldap", "system.email.password_reset.sent_message", "system.import.download.start", "system.import.download.complete", "system.import.import_profile", "system.import.import_provisioning_info", "system.import.object_creation.start", "system.import.object_creation.complete", "system.import.roadblock", "system.import.start", "system.import.user.start", "user.session.clear", "app.oauth2.client.lifecycle.activate", "app.oauth2.client.lifecycle.deactivate", "app.oauth2.client.lifecycle.update", "app.oauth2.credentials.lifecycle.activate", "app.oauth2.credentials.lifecycle.deactivate", "application.configuration.disable_fed_broker_mode", "application.configuration.enable_fed_broker_mode", "system.log_stream.lifecycle.activate", "system.log_stream.lifecycle.deactivate", "system.log_stream.lifecycle.update", "security.authenticator.lifecycle.activate", "security.authenticator.lifecycle.update", "oauth2.as.deactivated", "oauth2.scope.updated", "system.api_token.update", "application.provision.field_mapping_rule.change", "application.provision.group_push.push_memberships", "directory.user_profile.bootstrap", "group.profile.update", "security.threat.configuration.update", "self_service.disabled", "self_service.enabled", "system.import.roadblock.updated", "system.mfa.factor.activate", "app.oauth2.as.token.grant", "app.oauth2.token.grant", "user.account.unlock_by_admin", "user.lifecycle.reactivate", "plugin.script_status","user.account.expire_password","security.behavior.settings.update", "system.idp.lifecycle.deactivate", "system.idp.lifecycle.activate"), "modified", eventType IN ("device.lifecycle.delete", "application.lifecycle.delete", "oauth2.claim.deleted", "policy.lifecycle.delete", "system.api_token.revoke", "system.import.group.delete", "system.import.user.delete", "app.oauth2.token.revoke", "system.import.implicit_deletion.complete", "system.import.implicit_deletion.start", "application.policy.sign_on.rule.delete", "policy.rule.delete", "app.oauth2.client.lifecycle.delete", "app.oauth2.credentials.lifecycle.delete", "group.lifecycle.delete", "system.log_stream.lifecycle.delete", "oauth2.scope.deleted", "app.oauth2.api_resource.delete", "oauth2.as.deleted", "app.user_management.user_group_import.delete_success", "application.provision.group_push.delete_appgroup", "app.oauth2.admin.consent.revoke", "app.oauth2.trusted_server.delete", "app.access_request.delete","device.user.remove", "system.idp.lifecycle.delete", "policy.rule.delete"), "deleted", eventType IN ("app.oauth2.token.grant.access_token", "app.oauth2.as.token.grant.access_token", "app.oauth2.token.grant.id_token", "app.oauth2.token.grant.refresh_token", "application.lifecycle.create", "application.policy.sign_on.rule.create", "application.provision.user.push", "application.provision.user.push_profile", "device.enrollment.create", "group.lifecycle.create", "oauth2.as.created", "oauth2.claim.created", "oauth2.scope.created", "policy.lifecycle.create", "policy.rule.activate", "policy.rule.add", "system.agent.ad.connect", "system.api_token.create", "system.import.custom_object.create", "system.import.group.create", "system.import.user.create", "app.user_management.push_new_user_success", "device.user.add", "user.lifecycle.create", "app.oauth2.client.lifecycle.create", "app.oauth2.credentials.lifecycle.create", "iam.role.create", "policy.mapping.create", "system.log_stream.lifecycle.create", "application.provision.group_push.mapping.created", "directory.linked_object.create", "directory.non_default_user_profile.create", "iam.resourceset.bindings.add", "iam.resourceset.create", "system.agent.ad.create", "system.agent.ad.import_user", "system.brand.create", "zone.create", "app.access_request.request", "app.access_request.approver.approve", "app.oauth2.trusted_server.add", "system.idp.lifecycle.create"), "created", eventType IN ("app.oauth2.as.authorize.implicit", "app.oauth2.authorize.implicit", "app.oauth2.token.revoke.implicit", "user.session.access_admin_app"), "success", eventType IN ("system.email.challenge_factor_redeemed", "system.import.complete", "system.import.complete_batch", "system.import.custom_object.complete", "system.import.group_membership.complete", "system.import.group.complete", "system.import.membership_processing.complete", "system.import.membership_processing.start", "system.import.user_matching.complete", "system.import.user_matching.start", "system.import.user.complete", "system.sms.send_account_unlock_message", "system.sms.send_factor_verify_message", "system.sms.send_okta_push_verify_message", "system.sms.send_password_reset_message", "system.sms.send_phone_verification_message", "system.agent.ad.read_ldap", "system.agent.ad.read_schema", "system.agent.ad.read_topology", "system.agent.ad.upload_log", "system.org.rate_limit.upcoming_warning", "system.org.rate_limit.violation", "system.org.rate_limit.warning", "system.push.send_factor_verify_push", "system.agent.ad.read_toplogy", "app.user_management.user_group_import.upsert_success"), "read", eventType IN ("application.provision.user.verify_exists", "app.generic.unauth_app_access_attempt", "app.oauth2.as.authorize", "app.oauth2.as.authorize.code", "app.oauth2.as.authorize.implicit.access_token", "app.oauth2.as.authorize.implicit.id_token", "app.oauth2.authorize", "user.authentication.auth_via_AD_agent", "user.authentication.auth_via_IDP", "user.authentication.auth_via_mfa", "user.authentication.auth_via_radius", "user.authentication.sso", "user.authentication.verify", "user.session.start", "app.oauth2.authorize.code", "app.oauth2.authorize.implicit.id_token", "user.mfa.okta_verify.deny_push", "user.authentication.auth_via_social"), lower('outcome.result'), eventType IN ("user.session.end"), "logoff", eventType IN ("app.oauth2.authorize.invalid_client_id", "app.oauth2.authorize.user_not_assigned", "application.provision.integration.call_api", "application.policy.sign_on.deny_access", "app.access_request.expire"), "failure", eventType IN ("policy.execute.user.start"), "started",eventType IN ("user.account.lock"), "lockout")
EVAL-app = coalesce(targetAppDisplayName, if('actor.type' IN ("PublicClientApp", "AppInstance", "SystemPrincipal"), 'actor.displayName', "Okta Identity Cloud"))
EVAL-authentication_method = case(eventType == "user.authentication.auth_via_mfa", "MFA", eventType == "user.authentication.sso", "SSO", eventType == "user.authentication.auth_via_radius", "Radius")
EVAL-authentication_service = case(eventType == "user.authentication.auth_via_AD_agent", "Active Directory", eventType == "user.authentication.auth_via_IDP", "IDP", eventType == "user.authentication.auth_via_social", "Social", true(), "Okta")
EVAL-body = case(displayMessage != "null" AND isnotnull(displayMessage), displayMessage, isnotnull('outcome.reason') AND 'outcome.reason' != "null", 'outcome.reason', true(), null())
EVAL-description = case(displayMessage != "null" AND isnotnull(displayMessage), displayMessage, isnotnull('outcome.reason') AND 'outcome.reason' != "null", 'outcome.reason', true(), null())
EVAL-object = case(eventType IN ("app.oauth2.trusted_server.delete", "app.oauth2.trusted_server.add"), case(isnotnull(mvindex('target{}.alternateId', 0)) AND mvindex('target{}.alternateId', 0) != "unknown", mvindex('target{}.alternateId', 0), isnotnull(mvindex('target{}.id', 0)) AND mvindex('target{}.id', 0) != "unknown", mvindex('target{}.id', 0)), eventType == "app.access_request.request", case(isnotnull(targetResourceRequestAlternateId), targetResourceRequestAlternateId, isnotnull(targetResourceRequestId), targetResourceRequestId), eventType == "plugin.script_status", 'debugContext.debugData.scriptName', eventType IN ("iam.resourceset.bindings.add", "iam.resourceset.create"), targetResourceSetDisplayName, eventType IN ("application.provision.group_push.mapping.created", "application.provision.group_push.push_memberships"), targetGroupPushMappingDisplayName, eventType IN ("application.provision.group_push.delete_appgroup"), targetAppGroupDisplayName, eventType IN ("policy.mapping.create", "policy.lifecycle.activate", "policy.lifecycle.create", "policy.lifecycle.deactivate", "policy.lifecycle.delete", "policy.lifecycle.update"), targetPolicyEntityDisplayName, eventType IN ("iam.role.create"), targetRoleDisplayName, eventType IN ("user.account.lock", "user.session.end"), 'actor.alternateId', eventType IN ("device.enrollment.create", "device.lifecycle.activate", "device.lifecycle.deactivate", "device.lifecycle.delete", "device.lifecycle.suspend", "device.lifecycle.unsuspend", "directory.user_profile.update", "oauth2.as.created", "oauth2.as.updated", "oauth2.claim.created", "oauth2.claim.deleted", "oauth2.scope.created", "system.api_token.create", "system.api_token.enable", "system.api_token.revoke", "system.api_token.update", "app.oauth2.admin.consent.grant", "app.oauth2.as.consent.revoke.implicit.client", "device.user.add", "app.oauth2.client.lifecycle.activate", "app.oauth2.client.lifecycle.create", "app.oauth2.client.lifecycle.deactivate", "app.oauth2.client.lifecycle.delete", "app.oauth2.client.lifecycle.update", "app.oauth2.credentials.lifecycle.activate", "app.oauth2.credentials.lifecycle.deactivate", "app.oauth2.credentials.lifecycle.create", "app.oauth2.credentials.lifecycle.delete", "security.authenticator.lifecycle.activate", "security.authenticator.lifecycle.update", "oauth2.scope.deleted", "oauth2.as.deactivated", "oauth2.scope.updated", "app.oauth2.api_resource.delete", "oauth2.as.deleted", "device.user.remove"), if((mvindex('target{}.displayName',0) != "unknown" AND mvindex('target{}.displayName',0) != "null"), mvindex('target{}.displayName',0), null()), eventType IN ("application.lifecycle.activate", "application.lifecycle.create", "application.configuration.reset_logo", "application.configuration.update_logo", "application.lifecycle.deactivate", "application.lifecycle.delete", "application.lifecycle.update", "application.policy.sign_on.rule.create", "group.application_assignment.add", "group.application_assignment.remove", "group.application_assignment.update", "system.import.custom_object.create", "system.agent.ad.realtimesync", "system.import.user_matching.start", "system.import.user.complete", "application.configuration.disable_fed_broker_mode", "application.configuration.enable_fed_broker_mode", "system.agent.ad.import_user", "directory.app_user_profile.bootstrap", "system.import.download.start", "system.import.start", "system.agent.ad.read_ldap", "system.agent.ad.read_topology", "system.import.object_creation.complete", "system.import.object_creation.start", "system.import.download.complete", "system.agent.ad.start", "system.agent.ad.write_ldap", "self_service.disabled", "application.provision.field_mapping_rule.change", "self_service.enabled"), targetAppAlternateId, eventType IN ("app.oauth2.as.token.grant.access_token", "app.oauth2.token.grant.access_token"), targetaccesstokenDisplayName, eventType IN ("system.import.user.update", "application.provision.user.sync", "application.provision.user.push_profile", "application.user_membership.update", "application.user_membership.add", "application.provision.user.push", "app.user_management.provision_user", "application.user_membership.remove", "application.provision.user.deactivate", "app.generic.import.details.update_user", "application.provision.user.reactivate", "application.user_membership.change_username", "application.user_membership.restore", "application.user_membership.restore_password", "system.import.user.delete", "application.user_membership.change_password", "application.user_membership.change_username", "group.user_membership.add", "group.user_membership.remove", "system.email.challenge_factor_redeemed", "app.user_management.push_new_user_success", "user.account.privilege.revoke", "user.account.unlock", "user.mfa.factor.reset_all", "user.mfa.factor.suspend", "user.mfa.factor.unsuspend", "system.sms.send_okta_push_verify_message", "user.account.privilege.grant", "user.session.clear", "user.lifecycle.deactivate", "user.lifecycle.create", "user.mfa.factor.activate", "user.account.update_profile", "user.account.unlock_by_admin", "user.lifecycle.activate", "user.account.update_password", "user.lifecycle.reactivate", "user.mfa.factor.deactivate", "user.lifecycle.suspend", "app.realtimesync.import.details.update_user", "user.account.update_secondary_email", "user.mfa.factor.update", "system.sms.send_account_unlock_message", "system.sms.send_phone_verification_message", "system.sms.send_factor_verify_message", "app.access_request.approver.approve", "app.access_request.approver.deny", "app.access_request.deny", "app.access_request.delete"), targetUserAlternateId, eventType IN ("app.oauth2.token.grant.refresh_token"),targetrefreshDisplayName,eventType IN ("app.oauth2.token.grant.id_token"),targetidtokenDisplayName,eventType IN ("policy.execute.user.start"),targetPolicyEntityAlternateId,eventType IN ("group.profile.update", "group.lifecycle.create", "group.lifecycle.delete"),if(isnotnull(targetUserGroupAlternateId) AND targetUserGroupAlternateId != "null" AND targetUserGroupAlternateId != "unknown", targetUserGroupAlternateId, targetUserGroupDisplayName), eventType IN ("system.import.group.create", "system.import.group.delete", "system.import.group.update", "system.import.group.start", "app.user_management.user_group_import.delete_success", "app.user_management.user_group_import.upsert_success"), targetAppGroupAlternateId, eventType IN ("policy.rule.update", "policy.rule.activate", "policy.rule.deactivate", "policy.rule.add", "policy.rule.delete"), if(isnull(targetPolicyRuleAlternateId) OR targetPolicyRuleAlternateId = "null" OR targetPolicyRuleAlternateId == "unknown", targetPolicyRuleDisplayName, targetPolicyRuleAlternateId),eventType IN ("application.provision.user.deprovision", "system.import.user.create", "app.user_management", "system.agent.ad.reset_user_password"),targetAppUserAlternateId,eventType IN("system.import.user_matching.complete", "system.import.membership_processing.complete", "system.import.membership_processing.start", "system.import.implicit_deletion.complete", "system.import.group_membership.complete", "system.import.implicit_deletion.start", "system.import.group.complete", "system.import.complete_batch", "system.import.complete", "system.import.custom_object.complete", "directory.app_user_profile.update"), targetAppDisplayName, eventType IN ("directory.mapping.update", "system.agent.ad.invoke_dir", "application.policy.sign_on.update", "app.oauth2.as.key.rollover", "user.lifecycle.unsuspend", "app.oauth2.token.revoke", "system.log_stream.lifecycle.activate", "system.log_stream.lifecycle.create", "system.log_stream.lifecycle.deactivate", "system.log_stream.lifecycle.delete", "system.log_stream.lifecycle.update", "directory.linked_object.create", "directory.non_default_user_profile.create", "directory.user_profile.bootstrap", "system.brand.create", "security.threat.configuration.update", "system.agent.ad.create", "system.import.roadblock.updated", "system.mfa.factor.activate", "zone.create", "app.oauth2.admin.consent.revoke", "app.oauth2.as.token.grant", "app.oauth2.token.grant", "user.account.reset_password", "device.user.remove", "user.account.expire_password","security.behavior.settings.update","system.idp.lifecycle.delete","system.idp.lifecycle.deactivate","system.idp.lifecycle.activate","system.idp.lifecycle.create",""),case(mvindex('target{}.alternateId',0) != "unknown" AND mvindex('target{}.alternateId',0) != "null", mvindex('target{}.alternateId',0), mvindex('target{}.displayName',0) != "unknown" AND mvindex('target{}.displayName',0) != "null", mvindex('target{}.displayName', 0)), eventType IN("system.agent.ad.connect", "system.agent.ad.deactivate", "system.agent.ad.reactivate"),targetADAgentDisplayName,eventType IN ("system.sms.send_password_reset_message", "app.oauth2.authorize", "app.oauth2.authorize.code", "user.mfa.okta_verify.deny_push", "system.push.send_factor_verify_push", "system.agent.ad.update_user"), "user")
EVAL-object_attrs = case(eventType == "app.access_request.request", target_resource_request_attr, eventType IN ("group.lifecycle.create", "group.lifecycle.delete", "group.profile.update"), target_user_group_attr, eventType IN ("iam.resourceset.bindings.add", "iam.resourceset.create"), target_resource_set_attr, eventType IN ("application.provision.group_push.mapping.created", "application.provision.group_push.push_memberships"), target_group_push_mapping_attr, eventType IN ("policy.mapping.create", "policy.lifecycle.activate", "policy.lifecycle.create", "policy.lifecycle.deactivate", "policy.lifecycle.delete", "policy.lifecycle.update"), target_policy_entity_attr, eventType IN ("iam.role.create"), target_role_attr, eventType IN ("system.import.group.create", "system.import.group.delete", "system.import.group.update", "app.user_management.user_group_import.delete_success", "app.user_management.user_group_import.upsert_success", "application.provision.group_push.delete_appgroup"), target_app_group_attr, eventType IN ("policy.rule.activate", "policy.rule.add", "policy.rule.deactivate", "policy.rule.update", "policy.rule.delete"), target_policy_rule_attr, eventType IN ("system.agent.ad.connect", "system.agent.ad.deactivate", "system.agent.ad.reactivate"), targetADAgent_attr, eventType IN ("application.provision.user.deprovision", "system.import.user.create", "app.user_management", "system.agent.ad.reset_user_password"), target_app_user_attr, eventType IN ("system.import.user.delete", "system.import.user.update", "group.user_membership.add", "group.user_membership.remove", "application.provision.user.deactivate", "application.provision.user.push", "application.provision.user.push_profile", "application.provision.user.reactivate", "application.user_membership.add", "application.user_membership.change_password", "application.user_membership.change_username", "application.user_membership.remove", "application.user_membership.restore", "application.user_membership.restore_password", "application.user_membership.update", "app.user_management.push_new_user_success", "system.sms.send_account_unlock_message", "system.sms.send_factor_verify_message", "system.sms.send_password_reset_message", "system.sms.send_phone_verification_message", "user.session.clear", "user.lifecycle.deactivate", "user.lifecycle.create", "user.mfa.factor.activate", "user.account.update_profile", "user.account.unlock_by_admin", "user.lifecycle.activate", "user.account.update_password", "user.lifecycle.reactivate", "user.mfa.factor.deactivate", "user.lifecycle.suspend", "app.realtimesync.import.details.update_user", "user.account.update_secondary_email", "user.mfa.factor.update", "user.account.unlock", "user.account.privilege.revoke", "user.account.privilege.grant", "user.mfa.factor.reset_all", "user.mfa.factor.unsuspend", "user.mfa.factor.suspend", "app.access_request.approver.approve", "app.access_request.approver.deny", "app.access_request.deny", "app.access_request.delete"), target_user_attr, eventType IN ("group.application_assignment.add", "group.application_assignment.remove", "group.application_assignment.update", "application.lifecycle.create", "directory.app_user_profile.update", "directory.app_user_profile.bootstrap", "application.provision.field_mapping_rule.change", "system.import.download.start", "system.import.start", "system.agent.ad.read_ldap", "system.agent.ad.read_topology", "system.import.object_creation.complete", "system.import.object_creation.start", "system.import.download.complete", "system.agent.ad.start", "system.agent.ad.write_ldap", "self_service.disabled", "self_service.enabled", "system.import.user.complete", "application.configuration.enable_fed_broker_mode", "application.configuration.disable_fed_broker_mode"), target_app_instance_attr, eventType IN ("app.oauth2.token.grant.refresh_token"), target_refresh_token_attr, eventType IN ("app.oauth2.token.grant.id_token"), target_id_token_attr, eventType IN ("app.oauth2.as.token.grant.access_token", "app.oauth2.token.grant.access_token", "app.oauth2.token.revoke"), target_access_token_attr, eventType IN("user.session.end"),if(isnotnull(target_data_first_occurrence), target_data_first_occurrence, "login session"),eventType IN ("app.oauth2.authorize", "system.agent.ad.update_user", "user.mfa.okta_verify.deny_push"),transaction_data,eventType IN ("app.user_management.push_new_user_success"),targetAppUserDisplayName, true(), target_data_first_occurrence)
EVAL-object_category = case(eventType IN ("app.oauth2.authorize", "user.mfa.okta_verify.deny_push"), "User", eventType == "user.account.reset_password" AND 'outcome.result' == "FAILURE", "AuthenticatorEnrollment", eventType == "user.account.reset_password" AND 'outcome.result' == "SUCCESS", "User")
EVAL-object_id = case(eventType IN ("app.oauth2.trusted_server.delete", "app.oauth2.trusted_server.add"), case(isnotnull(mvindex('target{}.id', 0)) AND mvindex('target{}.id', 0) != "unknown", mvindex('target{}.id', 0)), eventType == "app.access_request.request", targetResourceRequestId, eventType IN ("group.lifecycle.create", "group.lifecycle.delete", "group.profile.update"), targetUserGroupId, eventType IN ("iam.resourceset.bindings.add", "iam.resourceset.create"), targetResourceSetId, eventType IN ("application.provision.group_push.mapping.created", "application.provision.group_push.push_memberships"), targetGroupPushMappingId, eventType IN ("iam.role.create"), targetRoleId, eventType IN ("user.account.lock", "user.session.end"), 'actor.id', eventType IN ("system.agent.ad.connect", "system.agent.ad.deactivate", "system.agent.ad.reactivate"), targetADAgentId, eventType IN ("system.import.user.update", "application.provision.user.sync", "application.provision.user.push_profile", "application.user_membership.update", "application.user_membership.add", "application.provision.user.push", "app.user_management.provision_user", "application.user_membership.remove", "application.provision.user.deactivate", "app.generic.import.details.update_user", "application.provision.user.reactivate", "application.user_membership.change_username", "application.user_membership.restore", "application.user_membership.restore_password", "system.import.user.delete", "system.email.challenge_factor_redeemed", "system.push.send_factor_verify_push", "system.sms.send_okta_push_verify_message", "system.sms.send_password_reset_message", "system.sms.send_phone_verification_message", "application.user_membership.change_password", "group.user_membership.add", "group.user_membership.remove", "app.user_management.push_new_user_success", "user.session.clear", "user.lifecycle.deactivate", "user.lifecycle.create", "user.mfa.factor.activate", "user.account.update_profile", "user.account.unlock_by_admin", "user.lifecycle.activate", "user.account.update_password", "user.lifecycle.reactivate", "user.mfa.factor.deactivate", "user.lifecycle.suspend", "app.realtimesync.import.details.update_user", "user.account.update_secondary_email", "user.mfa.factor.update", "system.sms.send_account_unlock_message", "system.sms.send_factor_verify_message", "user.account.unlock", "user.account.privilege.revoke", "user.account.privilege.grant", "user.mfa.factor.reset_all", "user.mfa.factor.unsuspend", "user.mfa.factor.suspend", "app.access_request.approver.approve", "app.access_request.approver.deny", "app.access_request.deny", "app.access_request.delete"), targetUserId,eventType IN ("app.oauth2.token.grant.access_token", "app.oauth2.as.token.grant.access_token", "app.oauth2.token.revoke"), targetaccesstokenId,eventType IN ("policy.execute.user.start", "policy.mapping.create", "policy.lifecycle.activate", "policy.lifecycle.create", "policy.lifecycle.deactivate", "policy.lifecycle.delete", "policy.lifecycle.update"), targetPolicyEntityId, eventType IN ("system.import.group.create", "system.import.group.delete", "system.import.group.update", "system.import.group.start", "app.user_management.user_group_import.delete_success", "app.user_management.user_group_import.upsert_success", "application.provision.group_push.delete_appgroup"),targetAppGroupId, eventType IN ("policy.rule.update", "policy.rule.activate", "policy.rule.deactivate", "policy.rule.add", "policy.rule.delete"), targetPolicyRuleId, eventType IN ("directory.app_user_profile.bootstrap", "system.import.user_matching.start", "system.import.user_matching.complete", "system.import.membership_processing.complete", "system.import.membership_processing.start", "system.import.implicit_deletion.complete", "system.import.group_membership.complete", "system.import.implicit_deletion.start", "system.import.group.complete", "system.import.custom_object.complete", "system.import.complete_batch", "system.import.complete", "system.agent.ad.realtimesync", "application.configuration.reset_logo", "application.configuration.update_logo", "application.lifecycle.activate", "application.lifecycle.create", "application.lifecycle.deactivate", "application.lifecycle.delete", "application.lifecycle.update", "application.policy.sign_on.rule.create", "directory.app_user_profile.update", "group.application_assignment.add", "group.application_assignment.remove", "group.application_assignment.update", "system.import.custom_object.create", "application.provision.field_mapping_rule.change", "self_service.disabled", "self_service.enabled", "system.agent.ad.import_user", "system.import.download.start", "system.import.start", "system.agent.ad.read_ldap", "system.agent.ad.read_topology", "system.import.object_creation.complete", "system.import.object_creation.start", "system.import.download.complete", "system.agent.ad.start", "system.agent.ad.write_ldap", "system.import.user.complete", "application.configuration.enable_fed_broker_mode", "application.configuration.disable_fed_broker_mode"), targetAppId, eventType IN ("application.provision.user.deprovision", "system.import.user.create", "app.user_management", "system.agent.ad.reset_user_password"), targetAppUserId, eventType IN ("directory.mapping.update", "system.agent.ad.invoke_dir", "application.policy.sign_on.update", "app.oauth2.as.key.rollover", "user.lifecycle.unsuspend", "device.enrollment.create", "device.lifecycle.activate", "device.lifecycle.deactivate", "device.lifecycle.delete", "device.lifecycle.suspend", "device.lifecycle.unsuspend", "device.user.add", "directory.user_profile.update", "oauth2.as.created", "oauth2.as.updated", "oauth2.claim.created", "oauth2.claim.deleted", "oauth2.scope.created", "system.api_token.create", "system.api_token.enable", "system.api_token.revoke", "system.api_token.update", "app.oauth2.admin.consent.revoke", "app.oauth2.as.token.grant", "app.oauth2.token.grant", "app.oauth2.admin.consent.grant", "app.oauth2.as.consent.revoke.implicit.client", "app.oauth2.authorize", "app.oauth2.client.lifecycle.activate", "app.oauth2.client.lifecycle.create", "app.oauth2.client.lifecycle.deactivate", "app.oauth2.client.lifecycle.delete", "app.oauth2.client.lifecycle.update", "app.oauth2.credentials.lifecycle.activate", "app.oauth2.credentials.lifecycle.deactivate", "app.oauth2.credentials.lifecycle.create", "app.oauth2.credentials.lifecycle.delete", "system.log_stream.lifecycle.activate", "system.log_stream.lifecycle.create", "system.log_stream.lifecycle.deactivate", "system.log_stream.lifecycle.delete", "system.log_stream.lifecycle.update", "security.authenticator.lifecycle.activate", "security.authenticator.lifecycle.update", "oauth2.scope.deleted", "oauth2.as.deactivated", "oauth2.scope.updated", "app.oauth2.api_resource.delete", "oauth2.as.deleted", "system.api_token.update", "directory.linked_object.create", "directory.non_default_user_profile.create", "directory.user_profile.bootstrap", "security.threat.configuration.update", "system.agent.ad.create", "system.brand.create", "system.import.roadblock.updated", "system.mfa.factor.activate", "zone.create", "user.account.reset_password","device.user.remove", "user.account.expire_password", "security.behavior.settings.update", "system.idp.lifecycle.delete", "system.idp.lifecycle.deactivate", "system.idp.lifecycle.activate", "system.idp.lifecycle.create"),if((mvindex('target{}.id',0) != "unknown" AND mvindex('target{}.id',0) != "null"),mvindex('target{}.id',0),null()), eventType IN("app.oauth2.authorize.code"), mvindex('target{}.id',0,2), eventType IN ("app.oauth2.token.grant.id_token"), targetidtokenId, eventType IN("app.oauth2.token.grant.refresh_token"), targetrefreshtokenId)
EVAL-protocol = case(eventType IN ("security.request.blocked"), "ip")
EVAL-protocol_version = if(eventType IN ("security.request.blocked"), if('request.ipChain{}.version' == "V4", "ipv4", "ipv6"), null())
EVAL-reason = case('outcome.reason' != "null" AND isnotnull('outcome.reason'), 'outcome.reason', displayMessage != "null" AND isnotnull(displayMessage), displayMessage)
EVAL-result = case(eventType == "plugin.script_status", 'debugContext.debugData.message', 'outcome.result' == "FAILURE" AND eventType IN ("user.account.lock", "user.account.reset_password", "user.account.update_password", "system.agent.ad.update_user", "app.oauth2.as.token.grant", "app.oauth2.token.grant"), 'outcome.reason', displayMessage != "null" AND isnotnull(displayMessage), displayMessage, 'outcome.reason' != "null" AND isnotnull('outcome.reason'), 'outcome.reason')
EVAL-rule = case(eventType IN ("security.request.blocked"), 'outcome.reason')
EVAL-severity = case(severity == "INFO", "informational", severity == "DEBUG", "informational", severity == "WARN", "medium", severity == "ERROR", "high", severity == "FATAL", "critical")
EVAL-signature_id = case(eventType IN ("plugin.script_status"),'transaction.id',eventType IN ("system.email.new_device_notification.sent_message", "user.account.report_suspicious_activity_by_enduser", "system.push.send_factor_verify_push"), uuid )
EVAL-src = case(eventType IN ("security.threat.detected", "system.email.challenge_factor_redeemed", "device.user.add", "device.lifecycle.unsuspend", "device.lifecycle.suspend", "device.lifecycle.delete", "device.lifecycle.activate", "device.enrollment.create", "app.oauth2.token.grant.access_token", "app.oauth2.token.grant.id_token", "app.oauth2.authorize.code", "app.oauth2.authorize", "okta_event_change_account", "system.sms.send_okta_push_verify_message", "system.push.send_factor_verify_push", "system.agent.ad.realtimesync", "user.mfa.factor.unsuspend", "user.mfa.factor.suspend", "user.session.end", "user.account.privilege.grant", "system.sms.send_phone_verification_message", "system.sms.send_password_reset_message", "policy.evaluate_sign_on", "system.import.user_matching.start", "system.import.user_matching.complete", "system.import.user.complete", "application.policy.sign_on.deny_access", "user.authentication.verify", "app.generic.unauth_app_access_attempt", "app.oauth2.authorize.implicit.id_token", "system.import.implicit_deletion.start", "system.import.group_membership.complet", "system.import.group.complete", "system.import.custom_object.complete", "system.import.complete_batch", "system.import.complete", "app.user_management.push_new_user_success", "app.oauth2.token.revoke", "app.oauth2.token.grant.refresh_token", "device.lifecycle.deactivate", "user.mfa.okta_verify.deny_push", "system.import.group_membership.complete", "system.import.group.complete", "system.import.custom_object.complete", "system.import.complete_batch", "system.import.complete", "app.oauth2.as.consent.revoke.implicit.client", "plugin.script_status", "application.provision.user.verify_exists", "app.oauth2.admin.consent.grant", "system.import.implicit_deletion.complete", "system.import.membership_processing.complete", "system.import.membership_processing.start", "system.agent.ad.connect", "system.agent.ad.update_user", "directory.app_user_profile.bootstrap"), 'request.ipChain{}.ip', isnotnull('client.ipAddress') AND 'client.ipAddress' != "null" AND 'client.ipAddress' != "", 'client.ipAddress')
EVAL-src_type = case(eventType IN ("system.email.new_device_notification.sent_message", "user.account.report_suspicious_activity_by_enduser"), 'client.device')
EVAL-src_user_role = case(eventType IN ("user.authentication.verify"), 'actor.type')
EVAL-status = case(eventType IN ("system.import.implicit_deletion.complete", "system.import.implicit_deletion.start", "system.import.membership_processing.complete", "system.import.membership_processing.start", "system.import.user_matching.complete", "system.import.user_matching.start"), "success", eventType == "system.agent.ad.import_user" AND 'outcome.result' == "SKIPPED", "failure", true(), lower('outcome.result'))
EVAL-transport = case(eventType IN ("security.request.blocked"), "tcp")
EVAL-type = case(eventType IN ("system.agent.ad.write_ldap", "system.org.rate_limit.violation", "system.org.rate_limit.warning", "system.push.send_factor_verify_push", "app.oauth2.token.detect_reuse", "core.concurrency.org.limit.violation", "system.operation.rate_limit.violation", "application.provision.group_push.mapping.update.or.delete.failed.with.error", "system.import.incremental_converted_to_full","system.email.new_device_notification.sent_message"), "event", eventType IN ("user.account.report_suspicious_activity_by_enduser"), "alert")
EVAL-user = case(eventType IN ("app.oauth2.as.token.grant.access_token", "app.oauth2.token.grant.access_token", "app.oauth2.token.grant.id_token", "app.oauth2.token.grant.refresh_token"), 'actor.displayName', eventType IN ("user.account.privilege.grant", "system.sms.send_password_reset_message", "user.mfa.factor.unsuspend", "user.mfa.factor.suspend", "app.realtimesync.import.details.update_user", "user.account.privilege.revoke", "user.account.reset_password", "user.account.unlock", "user.account.update_password", "user.account.update_profile", "user.account.update_secondary_email", "user.lifecycle.activate", "user.lifecycle.create", "user.lifecycle.deactivate", "user.lifecycle.suspend", "user.lifecycle.unsuspend", "user.mfa.factor.activate", "user.mfa.factor.deactivate", "user.mfa.factor.reset_all", "user.mfa.factor.update", "system.sms.send_account_unlock_message", "app.user_management.push_new_user_success", "system.sms.send_phone_verification_message", "system.sms.send_factor_verify_message", "user.lifecycle.reactivate", "app.access_request.expire"), targetUserAlternateId, eventType IN ("system.agent.ad.reset_user_password", "app.user_management"), targetAppUserAlternateId, eventType IN ("system.import.user_matching.start", "system.import.user.complete"), targetAppAlternateId, true(), 'actor.alternateId')
EVAL-user_agent = case(isnotnull('client.userAgent.rawUserAgent') AND 'client.userAgent.rawUserAgent' != "unknown", 'client.userAgent.rawUserAgent', true(), null())
EVAL-user_id = case(eventType IN ("app.generic.unauth_app_access_attempt", "app.oauth2.as.authorize", "app.oauth2.as.authorize.code", "app.oauth2.as.authorize.implicit.access_token", "app.oauth2.as.authorize.implicit.id_token", "app.oauth2.authorize", "application.policy.sign_on.deny_access", "policy.evaluate_sign_on", "user.authentication.auth_via_AD_agent", "user.authentication.auth_via_IDP", "user.authentication.auth_via_mfa", "user.authentication.auth_via_radius", "user.authentication.sso", "user.authentication.verify", "user.session.start", "user.session.start", "app.oauth2.authorize.code", "app.oauth2.authorize.implicit.id_token", "plugin.script_status", "user.mfa.okta_verify.deny_push", "user.authentication.auth_via_social", "application.provision.user.verify_exists", "system.push.send_factor_verify_push"), 'actor.id', eventType IN ("app.access_request.expire"), targetUserId)
EVAL-user_name = case(eventType IN ("system.sms.send_phone_verification_message", "user.mfa.factor.suspend", "app.realtimesync.import.details.update_user", "app.user_management.push_new_user_success", "user.account.privilege.grant", "user.account.privilege.revoke", "user.account.reset_password", "user.account.unlock", "user.account.update_password", "user.account.update_profile", "user.account.update_secondary_email", "user.lifecycle.activate", "user.lifecycle.create", "user.lifecycle.deactivate", "user.lifecycle.suspend", "user.lifecycle.unsuspend", "user.mfa.factor.activate", "user.mfa.factor.deactivate", "user.mfa.factor.reset_all", "user.mfa.factor.update", "user.mfa.factor.unsuspend", "system.sms.send_account_unlock_message", "system.sms.send_factor_verify_message", "system.sms.send_password_reset_message", "user.account.unlock_by_admin", "user.lifecycle.reactivate"), targetUserDisplayName, eventType IN ("system.import.user_matching.start", "system.import.user.complete"), targetAppDisplayName, eventType IN ("app.user_management", "system.agent.ad.reset_user_password"), targetAppUserDisplayName, true(), 'actor.displayName')
EVAL-user_type = case(eventType IN ("app.realtimesync.import.details.update_user", "user.account.privilege.grant", "user.account.privilege.revoke", "user.account.reset_password", "user.account.unlock", "user.account.update_password", "user.account.update_profile", "user.account.update_secondary_email", "user.lifecycle.activate", "user.lifecycle.create", "user.lifecycle.deactivate", "user.lifecycle.suspend", "user.lifecycle.unsuspend", "user.mfa.factor.activate", "user.mfa.factor.deactivate", "user.mfa.factor.reset_all", "user.mfa.factor.update", "user.mfa.factor.suspend", "user.mfa.factor.unsuspend", "system.sms.send_account_unlock_message", "system.sms.send_factor_verify_message", "system.sms.send_okta_push_verify_message", "system.sms.send_password_reset_message", "system.sms.send_phone_verification_message", "user.account.unlock_by_admin", "user.lifecycle.reactivate", "app.user_management.push_new_user_success", "app.access_request.expire"), "User", eventType IN ("system.import.user.complete", "system.import.user_matching.start"), "AppInstance", eventType IN ("app.user_management", "system.agent.ad.reset_user_password"), "AppUser", true(), 'actor.type')
EVAL-vendor_account = case(eventType IN ("app.realtimesync.import.details.update_user", "system.agent.ad.reset_user_password", "user.account.privilege.grant"), 'target{}.alternateId', true(), 'actor.alternateId')
EVAL-vendor_product = "Okta Identity Cloud"

LOOKUP-event_type_lookup = okta2_eventtype_lookup eventType OUTPUTNEW change_type object_category object_attrs
LOOKUP-system_log_lookup = okta2_system_log_lookup event_type as eventType OUTPUT release_note_date admin_interest security_interest event_type_description event_type_tags

[OktaIM2:groupUser]
KV_MODE = json
DATETIME_CONFIG = NONE

FIELDALIAS-dest = host AS dest

EVAL-vendor_product = "Okta"

LOOKUP-group_detail_lookup = okta2_group_detail_lookup id as groupid OUTPUT name as group_name, type as group_type, description as group_description
LOOKUP-user_detail_lookup = okta2_user_detail_lookup user_id as userid OUTPUT firstName,lastName,loginName,email,secondEmail,primaryPhone,mobilePhone,state,city,countryCode,zipCode,streetAddress,status as user_status,created_time,lastUpdated_time,lastLogin_time,activated_time

[OktaIM2:appUser]
KV_MODE = json
DATETIME_CONFIG = NONE

FIELDALIAS-appid_as_app = appid AS app
FIELDALIAS-dvc = host AS dvc
FIELDALIAS-dest = host AS dest
FIELDALIAS-status_as_result = status AS result
FIELDALIAS-userid_as_object_id = userid AS object_id
FIELDALIAS-userName_as_object = userName AS object
FIELDALIAS-userName_as_user = userName AS user

EVAL-action = "modified"
EVAL-change_type = "filesystem"
EVAL-object_category = "user"
EVAL-object_attrs = "status"
EVAL-status = "success"
EVAL-vendor_product = "Okta"

LOOKUP-app_detail_lookup = okta2_app_detail_lookup id as appid OUTPUT name as app_name, label as app_label
LOOKUP-user_detail_lookup = okta2_user_detail_lookup user_id as userid OUTPUT firstName,lastName,loginName,email,secondEmail,primaryPhone,mobilePhone,state,city,countryCode,zipCode,streetAddress,status as user_status,created_time,lastUpdated_time,lastLogin_time,activated_time

## Line breaker for multiline exception traceback
[source::.../var/log/splunk/splunk_ta_okta_identity_cloud_*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}

[source::...\\var\\log\\splunk\\splunk_ta_okta_identity_cloud_*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
