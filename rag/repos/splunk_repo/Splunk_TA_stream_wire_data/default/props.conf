################################################################################
# Main stanza for all source=stream events.
################################################################################
[source::stream:*]
KV_MODE = json
NO_BINARY_CHECK = 1
SHOULD_LINEMERGE=false
# stream events use "timestamp" for the start of the event, and
# "endtime" for the end of the event; the latter is used for _time
TIME_PREFIX=\"endtime\":\"
MAX_TIMESTAMP_LOOKAHEAD=28
TRUNCATE=100000000
REPORT-src_for_stream = stream_src_ip_as_src,stream_src_name_as_src,stream_src_mac_as_src
REPORT-dest_for_stream = stream_dest_ip_as_dest,stream_dest_name_as_dest,stream_dest_mac_as_dest
FIELDALIAS-duration_for_stream = time_taken as duration
EVAL-packets = case(isnum(packets),packets,isnum(packets_in) AND isnum(packets_out),packets_in+packets_out,1=1,null())

[stream:log]
KV_MODE = json
NO_BINARY_CHECK = 1
SHOULD_LINEMERGE=false
# for log/stats events, just use "timestamp" for _time
TIME_PREFIX = \"timestamp\":\"
MAX_TIMESTAMP_LOOKAHEAD = 28

[stream:stats]
KV_MODE = json
NO_BINARY_CHECK = 1
SHOULD_LINEMERGE=false
# for log/stats events, just use "timestamp" for _time
TIME_PREFIX = \"timestamp\":\"
MAX_TIMESTAMP_LOOKAHEAD = 28

################################################################################
# Stanzas for each protocol sourcetype
################################################################################
[stream:dhcp]
LOOKUP-app_proto = stream_app_lookup sourcetype OUTPUT app,protocol
EVAL-action 			= case (opcode == "DHCPACK", "added", opcode == "DHCPNAK", "blocked", 1=1, "unknown")
FIELDALIAS-dhcp_opcode_as_signature = opcode AS signature
FIELDALIAS-ip_lease_time_as_lease_duration = ip_lease_time AS lease_duration

[stream:http]
LOOKUP-app_proto = stream_app_lookup sourcetype OUTPUT app,protocol
EVAL-action = case(status>=200 AND status<300, "allowed", \
                                   status>=400, "blocked")
EVAL-url="http".if(isnotnull(ssl_version),"s","")."://".site.if(dest_port=443 OR dest_port=80,"",":".dest_port).uri_path

[stream:smtp]
LOOKUP-app_proto		= stream_app_lookup sourcetype OUTPUT app,protocol
## For SMTP, the act of delivery simply implies that the message has been queued up for delivery, for that matter event a QUIT message by the server.
EVAL-action 			= case (response_code >= 421, "blocked", response_code >= 200 AND response_code < 421, "delivered", isnotnull(response_code), "unknown")
EVAL-receiver_count 		= if (isnotnull(receiver_rcpt_to), 1, 0)
## Convert reponse time from micro-seconds to seconds
EVAL-delay 			= time_taken/1000000
FIELDALIAS-email_recipient      = receiver_email{} as recipient
FIELDALIAS-email_recipient_2    = receiver_rcpt_to{} as recipient_2
## Occasionally, recipient_2 will have values even when recipient doesn't.
## Also, for events that were indexed before receiver_email and receiver_rcpt_to were made explicitly
## list valued, scalar values for those fields might exist.
## Therefore, we will coalesce all these fields into recipient.
EVAL-recipient                  = coalesce(recipient, recipient_2, receiver_email, receiver_rcpt_to)
FIELDALIAS-email_src_user 	= sender_email as src_user
FIELDALIAS-email_status_code 	= response_code as status_code
FIELDALIAS-email_file_name 	= attach_filename{} as file_name
## for backward compatibility, also map scalar attach_filename to file_name
EVAL-file_name 		= coalesce(file_name, attach_filename)
FIELDALIAS-email_file_size 	= attach_size{} as file_size
## for backward compatibility, also map scalar attach_size to file_size
EVAL-file_size 		= coalesce(file_size, attach_size)
FIELDALIAS-email_size 		= bytes as size
FIELDALIAS-email_process	= useragent as process

# map MD5 hashes to Email CIM as file_hash
EVAL-file_hash = mvappend('attach_content_decoded_md5_hash{}', 'attach_content_md5_hash{}' )

[stream:pop3]
LOOKUP-app_proto		= stream_app_lookup sourcetype OUTPUT app,protocol
## Following is a MV string.
FIELDALIAS-pop3_recipient   = receiver_email{} as receiver_emails
EVAL-orig_recipient         = coalesce(receiver_email,receiver_emails)
#EVAL-orig_recipient 		= receiver_email
EVAL-action             = case (((method == "dele" OR method == "DELE") AND match(server_response,"^\+OK.*")), "deleted", ((method == "retr" OR method == "RETR") AND match(server_response,"^\+OK.*")), "delivered", isnotnull(method), "unknown")
## Convert response time from micro-seconds to seconds
EVAL-delay 			= time_taken/1000000
TRANSFORMS-mask_password 	  = mask_password
FIELDALIAS-pop3_receiver      = receiver{} as receivers
EVAL-recipient                = coalesce(receiver, receivers)
FIELDALIAS-email_src_user 	  = sender_email as src_user
FIELDALIAS-email_status_code  = server_response as status_code
FIELDALIAS-user 		      = login as user
FIELDALIAS-email_file_name    = attach_filename{} as attach_filenames
EVAL-file_name                = coalesce(attach_filenames, attach_filename)
FIELDALIAS-size 		      = bytes as size
FIELDALIAS-orig_src 		  = sender_email as orig_src

[stream:imap]
LOOKUP-app_proto		= stream_app_lookup sourcetype OUTPUT app,protocol
## Convert response time from micro-seconds to seconds
EVAL-delay                      = time_taken/1000000
## OK, ERROR or UNKNOWN
EVAL-status_code                = case (isnotnull(server_response) AND match(server_response, "^.*OK.*"), "OK", isnotnull(server_response), "ERROR", isnull(server_response), "UNKNOWN")
##
## 'action' implies different things to different CIMs
## Email - delivered, deleted
## Auth  - success, failure
EVAL-action                     = case (((method == "SELECT" OR method=="EXAMINE" OR method=="LIST") AND match(server_response, "^.*OK.*")),"delivered", ((method == "AUTHENTICATE" OR method == "LOGIN") AND match(server_response, "^.*OK.*")), "success", ((method == "AUTHENTICATE" OR method == "LOGIN") AND (match(server_response, "^.*NO.*") OR match(server_response, "^.*BAD.*"))), "failure", (method == "EXPUNGE" AND match(server_response, "^.*OK.*")), "deleted", isnotnull(method), "unknown")
TRANSFORMS-mask_password        = mask_password
FIELDALIAS-email_process        = user_agent AS process
FIELDALIAS-email_size           = bytes AS size
FIELDALIAS-email_file_name      = attach_filename{} as attach_filenames
EVAL-filename                   = coalesce(attach_filenames, attach_filename)

## Email address of the receiver; MV field

FIELDALIAS-imap_recipient      = receiver_email{} as receiver_emails
EVAL-recipient                 = coalesce(receiver_email,receiver_emails)
## Email address of sender

FIELDALIAS-email_src_user       = sender_email AS src_user
## Name of sender
FIELDALIAS-email_orig_src       = sender AS orig_src

[stream:tcp]
KV_MODE = JSON
FIELDALIAS-ssl_hash              = ssl_cert_md5 as ssl_hash
FIELDALIAS-ssl_serial            = ssl_serialnumber as ssl_serial

## issuer  - C=US, ST=CA, L=San Francisco, O=Splunk Inc, CN=splunk
REPORT-ssl_issuer_subs_for_stream = ssl_issuer_common_name,ssl_issuer_country,ssl_issuer_email,ssl_issuer_locality,ssl_issuer_organization,ssl_issuer_state,ssl_issuer_street,ssl_issuer_unit

## subject - C=US, ST=CA, L=San Francisco, O=Splunk Inc, CN=splunk
REPORT-ssl_subject_subs_for_stream = ssl_subject_common_name,ssl_subject_country,ssl_subject_email,ssl_subject_locality,ssl_subject_organization,ssl_subject_state,ssl_subject_street,ssl_subject_unit

## validity - string2epoch2iso8601_format
EVAL-ssl_start_time                 = strptime(ssl_validity_start, "%b %d %H:%M:%S %Y %Z")
EVAL-ssl_end_time                   = strptime(ssl_validity_end, "%b %d %H:%M:%S %Y %Z")
EVAL-transport = "tcp"

# Database source types
[stream:tns]
LOOKUP-app_proto = stream_app_lookup sourcetype OUTPUT app,protocol
# extract the "object" (usually table name) field
REPORT-extract_object_for_stream_db = object_from_select_query,object_from_update_query,object_from_insert_query,object_from_delete_query,object_from_create_table_query,object_from_drop_table_query,object_from_truncate_query
FIELDALIAS-instance_name_for_stream_databases = dbname AS instance_name
FIELDALIAS-instance_version_for_stream_databases = version AS instance_version
FIELDALIAS-login_as_user = login AS user
EVAL-query_time = strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%6NZ")
FIELDALIAS-sql_error_code_as_result_code = sql_error_code as sql_result_code

[stream:postgres]
LOOKUP-app_proto = stream_app_lookup sourcetype OUTPUT app,protocol
# extract the "object" (usually table name) field
REPORT-extract_object_for_stream_db = object_from_select_query,object_from_update_query,object_from_insert_query,object_from_delete_query,object_from_create_table_query,object_from_drop_table_query,object_from_truncate_query
FIELDALIAS-instance_name_for_stream_databases = dbname AS instance_name
FIELDALIAS-instance_version_for_stream_databases = version AS instance_version
FIELDALIAS-login_as_user = login AS user
EVAL-query_time = strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%6NZ")
FIELDALIAS-sql_error_code_as_result_code = sql_error_code as sql_result_code

[stream:mysql]
LOOKUP-app_proto = stream_app_lookup sourcetype OUTPUT app,protocol
# extract the "object" (usually table name) field
REPORT-extract_object_for_stream_db = object_from_select_query,object_from_update_query,object_from_insert_query,object_from_delete_query,object_from_create_table_query,object_from_drop_table_query,object_from_truncate_query
FIELDALIAS-instance_name_for_stream_databases = dbname AS instance_name
FIELDALIAS-instance_version_for_stream_databases = version AS instance_version
FIELDALIAS-login_as_user = login AS user
EVAL-query_time = strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%6NZ")
FIELDALIAS-sql_error_code_as_result_code = sql_error_code as sql_result_code

[stream:tds]
LOOKUP-app_proto = stream_app_lookup sourcetype OUTPUT app,protocol
# extract the "object" (usually table name) field
REPORT-extract_object_for_stream_db = object_from_select_query,object_from_update_query,object_from_insert_query,object_from_delete_query,object_from_create_table_query,object_from_drop_table_query,object_from_truncate_query
FIELDALIAS-instance_name_for_stream_databases = dbname AS instance_name
FIELDALIAS-instance_version_for_stream_databases = version AS instance_version
FIELDALIAS-login_as_user = login AS user
EVAL-query_time = strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%6NZ")
FIELDALIAS-sql_result_codes_as_result_code = sql_result_codes{} as sql_result_code

[stream:dns]
LOOKUP-app_proto 		       = stream_app_lookup sourcetype OUTPUT app,protocol
FIELDALIAS-dns_answer_count            = ancount as answer_count
FIELDALIAS-dns_additional_answer_count = arcount as additional_answer_count
FIELDALIAS-dns_authority_answer_count  = nscount as authority_answer_count
FIELDALIAS-dns_query_count             = qdcount as query_count
FIELDALIAS-dns_answer                  = host_addr{} as answer
FIELDALIAS-dns_record_type             = query_type{} as record_type
FIELDALIAS-dns_query                   = query{} as queries
EVAL-query                             = coalesce(query,queries)
FIELDALIAS-dns_message_type            = message_type{} as message_types
EVAL-message_type                      = coalesce(message_types, message_type)
FIELDALIAS-dns_reply_code              = reply_code{} as reply_codes
EVAL-reply_codes                       = coalesce(reply_codes, reply_code)
EVAL-reply_code                        = case ((reply_code == "NXDomain"),"Non-Existent Domain", (reply_code == "NoError"), "No Error", (reply_code == "FormErr"), "Format Error", (reply_code == "ServFail"), "Server Failure", isnotnull(reply_code), reply_code)
FIELDALIAS-dns_reply_code_id           = reply_code_id{} as reply_code_ids
EVAL-reply_code_id                     = coalesce(reply_code_ids, reply_code_id)

[stream:udp]
EVAL-transport = "udp"

[stream:xmpp]
FIELDALIAS-file_name = filename AS file_name
FIELDALIAS-file_access_time = _time AS file_access_time
FIELDALIAS-file_hash = file_sid AS file_hash
FIELDALIAS-file_size = filesize AS file_size
EVAL-object_category = if(isnotnull(filename), "file", "")

# Fix for JSON varbind formatting in SNMP event until hierarchical event model is implemented in Stream
[stream:snmp]
TRANSFORMS-stream_snmp_fix_json = stream_snmp_fix_varbind_list_json_array
SEDCMD-varbind_list = s/\\"/"/g

# Alias for ftp.inherent_parent
[stream:ftp]
FIELDALIAS-inherit_parent                  = inherent_parent as inherit_parent

[stream:netflow]
EVAL-direction 	= case (flow_dir == 0, "inbound", flow_dir == 1, "outbound", isnotnull(flow_dir), "unknown")


###########################
# EventGen source mappings
###########################
[source::...sample.stream_smtp]
sourcetype = stream:smtp
TRANSFORMS-force_source_for_stream_smtp = force_source_for_stream

[source::...sample.stream_dns]
sourcetype = stream:dns
TRANSFORMS-force_source_for_stream_dns = force_source_for_stream

[source::...sample.stream_http]
sourcetype = stream:http
TRANSFORMS-force_source_for_stream_http = force_source_for_stream

[source::...sample.stream_ssl]
sourcetype = stream:tcp
TRANSFORMS-force_source_for_stream_ssl = force_source_for_stream
