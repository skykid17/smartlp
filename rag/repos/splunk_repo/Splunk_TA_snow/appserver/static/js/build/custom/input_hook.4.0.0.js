var t={2411:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.extractAppName=l,e.versionLabel=e.username=e.splunkdPath=e.serverTimezoneInfo=e.rootPath=e.portNumber=e.locale=e.config=e.buildPushNumber=e.buildNumber=e.appBuild=e.app=e.isAvailable=e.CSRFToken=void 0;var r,a=(r=n(2281))&&r.__esModule?r:{default:r},o=n(9327),i="undefined"==typeof window?n.g:window;function u(t){return(0,a.default)(i,["$C",t])}var c=(0,o.getEntry)("splunkweb_csrf_token_".concat(u("MRSPARKLE_PORT_NUMBER")));e.CSRFToken=c;var s=!!u("SPLUNKD_PATH");function l(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:(0,a.default)(i,["document","location","pathname"],"")).match(/\w\w.\w\w\/(app|manager)\/([^/]+)/);return t?t[2]:void 0}e.isAvailable=s;var p=l();e.app=p;var d=u("APP_BUILD");e.appBuild=d;var h=u("BUILD_NUMBER");e.buildNumber=h;var f=u("BUILD_PUSH_NUMBER");e.buildPushNumber=f;var v=(0,a.default)(i,"$C");e.config=v;var y=u("LOCALE");e.locale=y;var b=u("MRSPARKLE_PORT_NUMBER");e.portNumber=b;var _=u("MRSPARKLE_ROOT_PATH");e.rootPath=_;var g=u("SERVER_ZONEINFO");e.serverTimezoneInfo=g;var m=u("SPLUNKD_PATH");e.splunkdPath=m;var w=u("USERNAME");e.username=w;var x=u("VERSION_LABEL");e.versionLabel=x},7212:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}e.Ng=void 0;var a=n(7735);function o(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return o=function(){return t},t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){c(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var s=function(t){var e=t.appBuild,n=t.buildNumber,r=t.buildPushNumber,o=t.locale,i=t.rootPath,c=t.splunkdPath;function s(t){var a=u({appBuild:e,buildPushNumber:r,buildNumber:n},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}),o=t.match(/(^|\w\w-\w\w\/)static\//);if(!o)return t;var i=o.index+o[0].length-1,c=t.match(/(^|\w\w-\w\w|)static\/app/)?":".concat(a.appBuild||0):"",s=a.buildPushNumber?".".concat(a.buildPushNumber):"",l="/@".concat(a.buildNumber).concat(s).concat(c),p=t.substr(0,i),d=t.substr(i);return"".concat(p).concat(l).concat(d)}function l(t,c){var l=u({appBuild:e,buildPushNumber:r,buildNumber:n,rootPath:i,locale:o},arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}),p=t||"/",d=c?"?".concat((0,a.stringify)(c)):"";return"/"!==p.charAt(0)&&(p="/".concat(p)),s(p="".concat(l.rootPath||"","/").concat(l.locale).concat(p).concat(d),l)}function p(t,e){return l("/help",t,e)}return{createAppDocsURL:function(t,e,n){var r=e.appName,a=e.appVersion;return p({location:"[".concat(r,":").concat(a,"]").concat(t)},n)},createDocsURL:function(t,e){return p({location:t},e)},createRESTURL:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(/^http[s]?:\/\//.test(t))return t;var r,a,o=n.splunkdPath||c||"";return/^\/.*/.test(t)?/^\/services/.test(t)?"".concat(o).concat(t):t:e.app||e.owner?(r=e.sharing?"nobody":e.owner?encodeURIComponent(e.owner):"-",a="system"===e.sharing?"system":e.app?encodeURIComponent(e.app):"-","".concat(o,"/servicesNS/").concat(r,"/").concat(a,"/").concat(t)):"".concat(o,"/services/").concat(t)},createStaticURL:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return l.apply(void 0,["static/".concat(t)].concat(n))},createURL:l,insertCacheBuster:s}}(function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==r(t)&&"function"!=typeof t)return{default:t};var e=o();if(e&&e.has(t))return e.get(t);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var u=a?Object.getOwnPropertyDescriptor(t,i):null;u&&(u.get||u.set)?Object.defineProperty(n,i,u):n[i]=t[i]}return n.default=t,e&&e.set(t,n),n}(n(2411))),l=(s.createAppDocsURL,s.createDocsURL,s.createRESTURL);s.createStaticURL,s.createURL;s.insertCacheBuster,e.Ng=l},9327:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getEntry=function(t){if("undefined"==typeof document)return null;var e=new RegExp("(^|; ?)".concat(t,"=([^;]+)")),n=null;try{var r=document.cookie.match(e);n=r?r[2]:null}catch(t){}return n}},361:(t,e,n)=>{var r=n(2427),a=n(8003),o=n(7407),i=n(2536),u=n(9097);function c(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=u,t.exports=c},259:(t,e,n)=>{var r=n(4958),a=n(7975),o=n(5139),i=n(6774),u=n(7230);function c(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=u,t.exports=c},6299:(t,e,n)=>{var r=n(3446)(n(6695),"Map");t.exports=r},3209:(t,e,n)=>{var r=n(6975),a=n(7899),o=n(8554),i=n(1029),u=n(6053);function c(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=u,t.exports=c},4380:(t,e,n)=>{var r=n(6695).Symbol;t.exports=r},1743:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,a=Array(r);++n<r;)a[n]=e(t[n],n,t);return a}},2112:(t,e,n)=>{var r=n(4904);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},435:(t,e,n)=>{var r=n(8637),a=n(2351);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[a(e[n++])];return n&&n==o?t:void 0}},7486:(t,e,n)=>{var r=n(4380),a=n(9527),o=n(5736),i=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":i&&i in Object(t)?a(t):o(t)}},1326:(t,e,n)=>{var r=n(9657),a=n(5070),o=n(4538),i=n(6154),u=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,l=c.toString,p=s.hasOwnProperty,d=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||a(t))&&(r(t)?d:u).test(i(t))}},9968:(t,e,n)=>{var r=n(4380),a=n(1743),o=n(6753),i=n(9530),u=r?r.prototype:void 0,c=u?u.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return a(e,t)+"";if(i(e))return c?c.call(e):"";var n=e+"";return"0"==n&&1/e==-Infinity?"-0":n}},8637:(t,e,n)=>{var r=n(6753),a=n(3865),o=n(8960),i=n(708);t.exports=function(t,e){return r(t)?t:a(t,e)?[t]:o(i(t))}},8793:(t,e,n)=>{var r=n(6695)["__core-js_shared__"];t.exports=r},8552:(t,e,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;t.exports=r},8561:(t,e,n)=>{var r=n(3766);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},3446:(t,e,n)=>{var r=n(1326),a=n(7983);t.exports=function(t,e){var n=a(t,e);return r(n)?n:void 0}},9527:(t,e,n)=>{var r=n(4380),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var a=i.call(t);return r&&(e?t[u]=n:delete t[u]),a}},7983:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},2427:(t,e,n)=>{var r=n(1027);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},8003:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7407:(t,e,n)=>{var r=n(1027),a=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return a.call(e,t)?e[t]:void 0}},2536:(t,e,n)=>{var r=n(1027),a=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:a.call(e,t)}},9097:(t,e,n)=>{var r=n(1027);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},3865:(t,e,n)=>{var r=n(6753),a=n(9530),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!a(t))||i.test(t)||!o.test(t)||null!=e&&t in Object(e)}},3766:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5070:(t,e,n)=>{var r,a=n(8793),o=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},4958:t=>{t.exports=function(){this.__data__=[],this.size=0}},7975:(t,e,n)=>{var r=n(2112),a=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0||(n==e.length-1?e.pop():a.call(e,n,1),--this.size,0))}},5139:(t,e,n)=>{var r=n(2112);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},6774:(t,e,n)=>{var r=n(2112);t.exports=function(t){return r(this.__data__,t)>-1}},7230:(t,e,n)=>{var r=n(2112);t.exports=function(t,e){var n=this.__data__,a=r(n,t);return a<0?(++this.size,n.push([t,e])):n[a][1]=e,this}},6975:(t,e,n)=>{var r=n(361),a=n(259),o=n(6299);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||a),string:new r}}},7899:(t,e,n)=>{var r=n(8561);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},8554:(t,e,n)=>{var r=n(8561);t.exports=function(t){return r(this,t).get(t)}},1029:(t,e,n)=>{var r=n(8561);t.exports=function(t){return r(this,t).has(t)}},6053:(t,e,n)=>{var r=n(8561);t.exports=function(t,e){var n=r(this,t),a=n.size;return n.set(t,e),this.size+=n.size==a?0:1,this}},704:(t,e,n)=>{var r=n(9776);t.exports=function(t){var e=r(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},1027:(t,e,n)=>{var r=n(3446)(Object,"create");t.exports=r},5736:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},6695:(t,e,n)=>{var r=n(8552),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();t.exports=o},8960:(t,e,n)=>{var r=n(704),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,i=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(a,(function(t,n,r,a){e.push(r?a.replace(o,"$1"):n||t)})),e}));t.exports=i},2351:(t,e,n)=>{var r=n(9530);t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},6154:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},4904:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},2281:(t,e,n)=>{var r=n(435);t.exports=function(t,e,n){var a=null==t?void 0:r(t,e);return void 0===a?n:a}},6753:t=>{var e=Array.isArray;t.exports=e},9657:(t,e,n)=>{var r=n(7486),a=n(4538);t.exports=function(t){if(!a(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},4538:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7101:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},9530:(t,e,n)=>{var r=n(7486),a=n(7101);t.exports=function(t){return"symbol"==typeof t||a(t)&&"[object Symbol]"==r(t)}},9776:(t,e,n)=>{var r=n(3209),a="Expected a function";function o(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(a);var n=function(){var r=arguments,a=e?e.apply(this,r):r[0],o=n.cache;if(o.has(a))return o.get(a);var i=t.apply(this,r);return n.cache=o.set(a,i)||o,i};return n.cache=new(o.Cache||r),n}o.Cache=r,t.exports=o},708:(t,e,n)=>{var r=n(9968);t.exports=function(t){return null==t?"":r(t)}},9335:t=>{function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,r,a,o){r=r||"&",a=a||"=";var i={};if("string"!=typeof t||0===t.length)return i;var u=/\+/g;t=t.split(r);var c=1e3;o&&"number"==typeof o.maxKeys&&(c=o.maxKeys);var s=t.length;c>0&&s>c&&(s=c);for(var l=0;l<s;++l){var p,d,h,f,v=t[l].replace(u,"%20"),y=v.indexOf(a);y>=0?(p=v.substr(0,y),d=v.substr(y+1)):(p=v,d=""),h=decodeURIComponent(p),f=decodeURIComponent(d),e(i,h)?n(i[h])?i[h].push(f):i[h]=[i[h],f]:i[h]=f}return i};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},8795:t=>{var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,o,i,u){return o=o||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?r(a(t),(function(a){var u=encodeURIComponent(e(a))+i;return n(t[a])?r(t[a],(function(t){return u+encodeURIComponent(e(t))})).join(o):u+encodeURIComponent(e(t[a]))})).join(o):u?encodeURIComponent(e(u))+i+encodeURIComponent(e(t)):""};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function r(t,e){if(t.map)return t.map(e);for(var n=[],r=0;r<t.length;r++)n.push(e(t[r],r));return n}var a=Object.keys||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}},7735:(t,e,n)=>{e.decode=e.parse=n(9335),e.encode=e.stringify=n(8795)}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var r={};(()=>{n.d(r,{Z:()=>l});var t=n(2411),e=n(7212);function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){u(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e,n){return(e=s(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,s(r.key),r)}}function s(t){var e=function(t,e){if("object"!==a(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===a(e)?e:String(e)}const l=function(){function n(t,e,r,a,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.globalConfig=t,this.serviceName=e,this.state=r,this.mode=a,this.util=o,this.is_new_input=!0,this._debouncedValueChange=this.debounce(this._valueChange.bind(this),200),this._debouncedNameChange=this.debounce(this._nameChange.bind(this),200),this._debouncedReuseCheckpointChange=this.debounce(this._reuseCheckpointChange.bind(this),200),this._debouncedSinceWhenChange=this.debounce(this._sinceWhenChange.bind(this),200),this._debouncedTableChange=this.debounce(this._tableChange.bind(this),200),this._debouncedFieldIgnoreList=this.debounce(this._fieldIgnoreList.bind(this),200),this._debouncedTimefieldChange=this.debounce(this._timefieldChange.bind(this),200)}var r,a;return r=n,a=[{key:"onCreate",value:function(){}},{key:"debounce",value:function(t,e){var n;return function(){for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];clearTimeout(n),n=setTimeout((function(){t.apply(void 0,a)}),e)}}},{key:"onChange",value:function(t,e,n){var r=this.state.data.account.value,a=this.state.data.since_when.value;"account"===t?this._debouncedValueChange(t,r,n):"name"===t?this._debouncedNameChange(r,n):"timefield"===t?this._debouncedTimefieldChange(r,n):"reuse_checkpoint"===t?this._debouncedReuseCheckpointChange(a,r,n):"since_when"===t?this._debouncedSinceWhenChange(a,n):"table"===t?this._debouncedTableChange(r,n):("include"===t||"exclude"===t)&&this._debouncedFieldIgnoreList(n)}},{key:"onRender",value:function(){var t=window.location.href.replace("inputs","configuration"),e=this.state.data.name.value,n=this.state.data.account.value;this.isEmpty(e)||(this.util.setState((function(t){var e=i({},t.data);return e.reuse_checkpoint.value="yes",e.since_when.disabled=!0,e.interval.placeholder="Required",{data:e}})),this._nameChange(n,this.state),this.is_new_input=!1),this._fieldIgnoreList(this.state),this.util.setState((function(e){var n=i({},e.data);return n.account.markdownMessage={text:"Configure a new account",link:t,markdownType:"link"},n.reuse_checkpoint.markdownMessage={text:"A Checkpoint for this input already exists. Selecting `No` will reset the data collection.",color:"red",markdownType:"text"},{data:n}}))}},{key:"onSave",value:function(t){var e=t.since_when,n=new Date(e),r="",a=new Date;return n>new Date(a.getUTCFullYear(),a.getUTCMonth(),a.getUTCDate(),a.getUTCHours(),a.getUTCMinutes(),a.getUTCSeconds()).getTime()?(r="Start date should not be in future",this.util.setErrorMsg(r),!1):!(!this.isEmpty(t.include)&&!this.isEmpty(t.exclude))}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}},{key:"checkIfCheckpointExist",value:function(n,r){var a=this;if(!this.isEmpty(r.data.name.value)&&!this.isEmpty(r.data.table.value)){var o=r.data.name.value,u=r.data.timefield.value||"sys_updated_on",c={input_name:o+"."+(r.data.table.value||"")+"."+u,output_mode:"json"},s=this,l={"X-Splunk-Form-Key":t.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"},p=new URL((0,e.Ng)("splunk_ta_snow_input_checkpoint"),location);p.search=new URLSearchParams(c).toString(),fetch(p,{method:"GET",headers:l}).then((function(t){return t.json()})).then((function(t){t.entry[0].content.checkpoint_exist?(a.util.setState((function(t){var e=i({},t.data);return e.reuse_checkpoint.display=!0,e.since_when.disabled=!0,e.reuse_checkpoint.value="yes",{data:e}})),a.is_new_input=!1,r.data.account.value!==n&&s._valueChange("account",n,r)):(a.util.setState((function(t){var e=i({},t.data);return e.reuse_checkpoint.display=!1,e.since_when.disabled=!1,{data:e}})),a.is_new_input=!0)})).catch((function(t){return console.error(t)}))}}},{key:"_nameChange",value:function(t,e){this.checkIfCheckpointExist(t,e)}},{key:"_reuseCheckpointChange",value:function(t,e,n){"yes"===n.data.reuse_checkpoint.value?(this.util.setState((function(t){var e=i({},t.data);return e.since_when.disabled=!0,{data:e}})),this._valueChange("account",e,n)):this.util.setState((function(t){var e=i({},t.data);return e.since_when.disabled=!1,{data:e}})),this.util.setState((function(e){var n=i({},e.data);return n.since_when.value=t,{data:n}}))}},{key:"_valueChange",value:function(t,e,n){var r=n.data.account.value,a=window.location.href.replace("inputs","configuration");this.isEmpty(n.data.name.value)||this.isEmpty(r)||e===r||!0===this.is_new_input?this.util.setState((function(t){var e=i({},t.data);return e.account.markdownMessage={text:"Configure a new account",link:a,markdownType:"link"},{data:e}})):this.util.setState((function(e){var n=i({},e.data);return n.account.markdownMessage={text:"Changing this ".concat(t," may cause data gaps or duplication. To avoid, create a new input."),color:"red",markdownType:"text"},{data:n}}))}},{key:"_sinceWhenChange",value:function(t,e){var n=window.location.href.replace("inputs","configuration"),r=e.data.since_when.value;this.isEmpty(e.data.name.value)||t===r||!0===this.is_new_input||this.util.setState((function(t){var e=i({},t.data);return e.account.markdownMessage={text:"Configure a new account",link:n,markdownType:"link"},e.since_when.markdownMessage={text:"Changing this parameter may result in gaps or duplication in data collection",color:"red",markdownType:"text"},{data:e}}))}},{key:"_timefieldChange",value:function(t,e){this.checkIfCheckpointExist(t,e)}},{key:"_tableChange",value:function(t,e){var n=e.data.table.value;["syslog","sys_audit","sysevent","syslog_transaction"].includes(n)?this.util.setState((function(t){var e=i({},t.data);return e.timefield.value="sys_created_on",{data:e}})):"em_event"===n?this.util.setState((function(t){var e=i({},t.data);return e.timefield.value="time_of_event",{data:e}})):this.util.setState((function(t){var e=i({},t.data);return e.timefield.value="sys_updated_on",{data:e}})),this.checkIfCheckpointExist(t,e)}},{key:"_fieldIgnoreList",value:function(t){var e=t.data.include.value,n=t.data.exclude.value;!this.isEmpty(e)&&this.isEmpty(n)?this.util.setState((function(t){var e=i({},t.data);return e.exclude.disabled=!0,e.include.disabled=!1,e.exclude.placeholder="not allowed",e.include.placeholder="optional",{data:e}})):!this.isEmpty(n)&&this.isEmpty(e)?this.util.setState((function(t){var e=i({},t.data);return e.exclude.disabled=!1,e.include.disabled=!0,e.include.placeholder="not allowed",e.exclude.placeholder="optional",{data:e}})):this.isEmpty(e)&&this.isEmpty(n)&&this.util.setState((function(t){var e=i({},t.data);return e.exclude.disabled=!1,e.include.disabled=!1,e.exclude.placeholder="optional",e.include.placeholder="optional",{data:e}}))}},{key:"isEmpty",value:function(t){return null===t||0===t.trim().length}}],a&&c(r.prototype,a),Object.defineProperty(r,"prototype",{writable:!1}),n}()})();var a=r.Z;export{a as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,