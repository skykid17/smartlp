var e={d:(t,i)=>{for(var r in i)e.o(i,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:i[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function n(e,t,i){return(t=s(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,s(r.key),r)}}function s(e){var t=function(e){if("object"!=i(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==i(t)?t:t+""}e.d(t,{A:()=>u});const u=function(){return e=function e(t,i,r,a,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=i,this.state=r,this.mode=a,this.util=n,this.is_new_input=!0,this._debouncedFieldIgnoreList=this.debounce(this._fieldIgnoreList.bind(this),200)},t=[{key:"onCreate",value:function(){}},{key:"debounce",value:function(e,t){var i;return function(){for(var r=arguments.length,a=new Array(r),n=0;n<r;n++)a[n]=arguments[n];clearTimeout(i),i=setTimeout((function(){e.apply(void 0,a)}),t)}}},{key:"onChange",value:function(e,t,i){var r=this;this.util.setState((function(t){var n=a({},t.data);if("jira_cloud_issues_input"===r.serviceName){if(r._debouncedFieldIgnoreList(i),"start_date"===e&&"edit"===r.mode){var o=r.state.data.start_date.value;r._startDateChange(o,i)}}else"jira_cloud_input"===r.serviceName&&"from"===e&&"edit"===r.mode&&(o=r.state.data.from.value,r._startDateChange(o,i));return{data:n}}))}},{key:"onEditLoad",value:function(){var e=this;this.util.setState((function(t){var i=a({},t.data);return i.use_existing_checkpoint.display=!0,i.use_existing_checkpoint.value="yes",i.use_existing_checkpoint.markdownMessage={text:"A Checkpoint for this input already exists. Selecting `No` will reset the data collection.",color:"red",markdownType:"text"},"jira_cloud_input"===e.serviceName?i.from.disabled=!0:"jira_cloud_issues_input"===e.serviceName&&(i.start_date.disabled=!0),{data:i}}))}},{key:"onRender",value:function(){"jira_cloud_issues_input"===this.serviceName&&this._fieldIgnoreList(this.state)}},{key:"_startDateChange",value:function(e,t){var i=this;if("jira_cloud_input"===this.serviceName)var r=t.data.from.value;else"jira_cloud_issues_input"===this.serviceName&&(r=t.data.start_date.value);void 0===e&&""===e&&null===e||e===r||this.util.setState((function(e){var t=a({},e.data),r={text:"Changing this parameter may result in gaps or duplication in data collection",color:"red",markdownType:"text"};return"jira_cloud_input"===i.serviceName?t.from.markdownMessage=r:"jira_cloud_issues_input"===i.serviceName&&(t.start_date.markdownMessage=r),{data:t}}))}},{key:"_fieldIgnoreList",value:function(e){var t=e.data.include.value,i=e.data.exclude.value;!this.isEmpty(t)&&this.isEmpty(i)?this.util.setState((function(e){var t=a({},e.data);return t.exclude.disabled=!0,t.include.disabled=!1,{data:t}})):!this.isEmpty(i)&&this.isEmpty(t)?this.util.setState((function(e){var t=a({},e.data);return t.exclude.disabled=!1,t.include.disabled=!0,{data:t}})):this.isEmpty(t)&&this.isEmpty(i)&&this.util.setState((function(e){var t=a({},e.data);return t.exclude.disabled=!1,t.include.disabled=!1,{data:t}}))}},{key:"isEmpty",value:function(e){return null===e||0===e.trim().length}}],t&&o(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();var c=t.A;export{c as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,