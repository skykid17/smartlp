##
## SPDX-FileCopyrightText: 2024 Splunk, Inc.
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##

[source::.../var/log/splunk/Splunk_TA_f5_bigip_main*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = f5:bigip:addon:log

[source::...\\var\\log\\splunk\\Splunk_TA_f5_bigip_main*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = f5:bigip:addon:log


############################
###        Rename        ###
############################

### GTM ###
[f5_bigip:irule:dns:request]
rename = f5:bigip:gtm:dns:request:irule

[f5_bigip:irule:dns:response]
rename = f5:bigip:gtm:dns:response:irule

[f5_bigip:icontrol:globallb]
rename = f5:bigip:gtm:globallb:icontrol

### LTM ###
[f5_bigip:irule:http]
rename = f5:bigip:ltm:http:irule

[f5_bigip:irule:lb:failed]
rename = f5:bigip:ltm:failed:irule

[f5_bigip:icontrol:locallb]
rename = f5:bigip:ltm:locallb:icontrol

[f5_bigip:icontrol:locallb:pool]
rename = f5:bigip:ltm:locallb:pool:icontrol


### General ###
[f5_bigip:syslog]
rename = f5:bigip:syslog

[f5_bigip:icontrol]
rename = f5:bigip:icontrol
#For tasks created in old version.
MAX_TIMESTAMP_LOOKAHEAD = 1
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
TRANSFORMS-sourcetype=f5_bigip-icontrol-locallb, f5_bigip-icontrol-globallb, f5_bigip-icontrol-networking, f5_bigip-icontrol-management, f5_bigip-icontrol-system-systeminfo, f5_bigip-icontrol-system-statistics, f5_bigip-icontrol-system-disk, f5_bigip-icontrol-management-device, f5_bigip-icontrol-networking-interfaces, f5_bigip-icontrol-networking-adminip, f5_bigip-icontrol-locallb-pool, f5_bigip-icontrol-management-usermanagement


[f5_bigip:icontrol:system:systeminfo]
rename = f5:bigip:system:systeminfo:icontrol

[f5_bigip:icontrol:system:statistics]
rename = f5:bigip:system:statistics:icontrol

[f5_bigip:icontrol:system:disk]
rename = f5:bigip:system:disk:icontrol

[f5_bigip:icontrol:management:device]
rename = f5:bigip:management:device:icontrol

[f5_bigip:icontrol:networking:interfaces]
rename = f5:bigip:networking:interfaces:icontrol

[f5_bigip:icontrol:networking:adminip]
rename = f5:bigip:networking:adminip:icontrol

[f5_bigip:icontrol:management:usermanagement]
rename = f5:bigip:management:usermanagement:icontrol

[f5_bigip:icontrol:networking]
rename = f5:bigip:networking:icontrol

[f5_bigip:icontrol:management]
rename = f5:bigip:management:icontrol

#fix bug ADDON-4931
[f5:bigip:ltm:failed::irule]
rename = f5:bigip:ltm:failed:irule

############################
###         Data         ###
############################

### GTM ###
[f5:bigip:gtm:dns:request:irule]
FIELDALIAS-dest = dns_server_ip as dest
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host
FIELDALIAS-query = question_name as query
FIELDALIAS-query_type = question_type as query_type
FIELDALIAS-record_type = question_type AS record_type
FIELDALIAS-src = src_ip as src
EVAL-message_type = case(like(f5_irule,"%DNS_REQUEST"),"Query")
EVAL-vendor_product = "F5 BIG-IP GTM"
EVAL-query_count = mvcount(question_name)

[f5:bigip:gtm:dns:response:irule]
REPORT-extract_dns_answer = f5_big_ip_extract_answer, f5_big_ip_extract_fields_from_answer
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host
FIELDALIAS-dest = dns_server_ip as dest
FIELDALIAS-query = question_name as query
FIELDALIAS-src = src_ip as src
EVAL-answer_count = mvcount(name)
EVAL-message_type = case(like(f5_irule,"%DNS_RESPONSE"),"Response")
EVAL-vendor_product = "F5 BIG-IP GTM"
EVAL-query_count = mvcount(question_name)
EVAL-additional_answer_count = mvcount(answer)

[f5:bigip:gtm:globallb:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-object_type = case(module_interface=="GlobalLB.WideIP", "GTM", module_interface=="GlobalLB.Pool", "Pool", module_interface=="GlobalLB.VirtualServerV2", "VIP")
EVAL-member_type = case(isnull('get_wideip_pool{}.pool_name') and isnull('get_member_v2{}.name') and member="", null, module_interface=="GlobalLB.WideIP", "Pool", module_interface=="GlobalLB.Pool", "VIP")
FIELDALIAS-get_object_status_availability_status_avl_status_string = get_object_status.availability_status as avl_status_string
LOOKUP-f5_bigip_icontrol_availability_status = f5_bigip_icontrol_availability_status_lookup avl_status_string OUTPUTNEW avl_status
FIELDALIAS-enbl_status = get_object_status.enabled_status as enbl_status
FIELDALIAS-get_list_name = get_list.name as get_list_name
EVAL-name = case(module_interface=="GlobalLB.WideIP", get_list, module_interface=="GlobalLB.Pool", get_list, module_interface=="GlobalLB.VirtualServerV2", get_list_name)
FIELDALIAS-get_address_address = get_address.address as address
FIELDALIAS-get_address_port = get_address.port as port
EVAL-member = coalesce('get_wideip_pool{}.pool_name', 'get_member_v2{}.name', member)
FIELDALIAS-get_lb_method = get_lb_method as lb_method

### LTM ###
[f5:bigip:ltm:http:irule]
REPORT-extract_url_fields = extract_url_fields
REPORT-extract_http_host = extract_http_host
EXTRACT-pool = virtual_server="(?<pool>\S+).*?",
FIELDALIAS-src = src_ip as src
FIELDALIAS-status = http_status as status
FIELDALIAS-url = http_url as url
FIELDALIAS-dest = vip as dest
FIELDALIAS-site = http_host as site
FIELDALIAS-uri_path = http_uri as uri_path
FIELDALIAS-dest_ip = vip as dest_ip
EVAL-dest_port = replace(http_host, ".*:(\d+)$", "\1")
FIELDALIAS-dest_addr = vip as dest_addr
FIELDALIAS-dest_translated_ip = node as dest_translated_ip
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host
EVAL-is_f5_heartbeat = if(src_ip==f5_bigip_server_host, "true", "false")
EVAL-protocol="HTTP"
FIELDALIAS-src_addr = src_ip as src_addr
FIELDALIAS-rtt = req_elapsed_time as rtt
FIELDALIAS-http_status_2_response_code = http_status as response_code
FIELDALIAS-http_user_agent_2_client_type = http_user_agent as client_type
FIELDALIAS-rule = f5_irule as rule
FIELDALIAS-duration = req_elapsed_time as duration
EVAL-app = "HTTP"
EVAL-bytes = bytes_in + bytes_out
EVAL-thruput = bytes_in + bytes_out
EVAL-url_length = len(http_url)

# CIM fields
EVAL-vendor_product = "F5 BIG-IP LTM"
EVAL-uri_query = replace(http_url, "^[^\?]+\??", "")
FIELDALIAS-category = http_content_type as category
EVAL-http_user_agent_length = len(http_user_agent)
LOOKUP-f5_bigip_ltm_http_irule_action = f5_bigip_ltm_http_irule_action_lookup http_status OUTPUTNEW action
EXTRACT-http_referrer_domain = http_referrer=["]?(?:[^:]+:\/\/)?(?!(?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\S+:\/\/|\[?(?:[^\-\/]*:[^\-\/\]]*:[^\-\/\]]*)\]?:?\d{0,5}\/))(?<http_referrer_domain>[^:\/\n,"]+)["]?

[f5:bigip:ltm:failed:irule]
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host

[f5:bigip:ltm:locallb:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-object_type = case(module_interface=="LocalLB.VirtualServer", "VIP", module_interface=="LocalLB.NodeAddressV2", "RealServer")
EVAL-member_type = case(isnull(coalesce('get_member_v2{}.address', get_default_pool_name)) or coalesce('get_member_v2{}.address', get_default_pool_name)=="", null, module_interface=="LocalLB.VirtualServer", "Pool")
FIELDALIAS-get_object_status_availability_status_avl_status_string = get_object_status.availability_status as avl_status_string
LOOKUP-f5_bigip_icontrol_availability_status = f5_bigip_icontrol_availability_status_lookup avl_status_string OUTPUTNEW avl_status
FIELDALIAS-enbl_status = get_object_status.enabled_status as enbl_status
EVAL-name = coalesce('get_list', 'get_all_statistics.virtual_server.name', 'get_all_statistics.node', name)
EVAL-address = coalesce('get_destination_v2.address', 'get_all_statistics.virtual_address', 'get_address', address)
FIELDALIAS-get_destination_v2_port = get_destination_v2.port as port
FIELDALIAS-get_all_statistics.statistics__type = get_all_statistics.statistics{}.type as statistics_types
FIELDALIAS-get_all_statistics.statistics__value_low = get_all_statistics.statistics{}.value.low as statistics_values
FIELDALIAS-dest = get_address as dest
EVAL-member = if(isnull('get_member_v2{}.address') or 'get_member_v2{}.address'=="-", if(isnull(get_default_pool_name) or get_default_pool_name=="-",null,get_default_pool_name),'get_member_v2{}.address')
EVAL-current_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")))
EVAL-throughput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-thruput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-total_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")))
EVAL-sessions = if(mvfind(statistics_types, "^STATISTIC_CURRENT_SESSIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_CURRENT_SESSIONS$")))
EVAL-interface_connections = if(mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_CURRENT_CONNECTIONS$")))
EVAL-vip_connections = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")))
EVAL-interface_throughput = if(mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_BYTES_IN$")))
EVAL-vip_throughput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-node = if(module_interface=="LocalLB.NodeAddressV2", get_address, null)

[f5:bigip:ltm:locallb:pool:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-object_type = "Pool"
FIELDALIAS-get_object_status_availability_status_avl_status_string = get_object_status.availability_status as avl_status_string
LOOKUP-f5_bigip_icontrol_availability_status = f5_bigip_icontrol_availability_status_lookup avl_status_string OUTPUTNEW avl_status
FIELDALIAS-enbl_status = get_object_status.enabled_status as enbl_status
EVAL-name = coalesce('get_list', 'get_all_statistics.pool_name', name)
FIELDALIAS-get_list_2_pool = get_list as pool
EVAL-member_type = if(isnull(member) or member=="", null, "RealServer")
FIELDALIAS-get_member_v2 = get_member_v2{}.address as member
FIELDALIAS-get_lb_method = get_lb_method as lb_method
FIELDALIAS-get_all_statistics.statistics__type = get_all_statistics.statistics{}.type as statistics_types
FIELDALIAS-get_all_statistics.statistics__value_low = get_all_statistics.statistics{}.value.low as statistics_values
EVAL-current_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")))
EVAL-throughput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-thruput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-total_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")))
EVAL-sessions = if(isnotnull(statistics_types), statistics_values, null)
EVAL-description = case('get_object_status.status_description'!="" AND isnotnull('get_object_status.status_description') AND 'get_object_status.status_description'!="null", 'get_object_status.status_description')
EVAL-enabled = case('get_object_status.enabled_status'=="ENABLED_STATUS_ENABLED", "1", 'get_object_status.enabled_status' IN("ENABLED_STATUS_NONE", "ENABLED_STATUS_DISABLED", "ENABLED_STATUS_DISABLED_BY_PARENT"), "0")
EVAL-status = case('get_object_status.enabled_status'=="ENABLED_STATUS_ENABLED", "enabled", 'get_object_status.enabled_status' IN("ENABLED_STATUS_NONE", "ENABLED_STATUS_DISABLED", "ENABLED_STATUS_DISABLED_BY_PARENT"), "disabled")
EVAL-vendor_product = "F5 BIG-IP"

### General ###
[f5:bigip:syslog]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)(.*)(f5_irule|[^"]f5_asm|:\s(?:\d{4})[0-9A-Fa-f]{4}:\d+:\s+(?:[^:\s]{1,100}:[^:\s]{1,100}:\s*)?[0-9a-f]{8}:|( debug | info | warning | err | notice | alert | crit | emerg ))
# For load balancing on UF
EVENT_BREAKER_ENABLE = true
TRANSFORMS-sourcetype=f5_bigip-irule-default, f5_bigip-irule-http, f5_bigip-irule-dns-request, f5_bigip-irule-dns-response, f5_bigip-irule-lb-failed, f5_bigip-syslog-asm, f5-bigip-apm-syslog, f5_bigip-irule-exclude-audit, f5_bigip-secure, f5_bigip-ltm-ssl-error, f5_bigip-ltm-tcl-error, f5_bigip-ltm-traffic, f5_bigip-ltm-log-error
REPORT-syslog_reports = f5_bigip_syslog_head, f5_bigip_service_extract, f5_bigip_connection_error
REPORT-f5_bigip_status = f5_bigip_general_status, f5_bigip_monitor_status
REPORT-f5_bigip_virtual_address = f5_bigip_virtual_address
REPORT-f5_bigip_node_details = f5_bigip_node_details
REPORT-f5_bigip_pool_details = f5_bigip_pool_details
REPORT-f5_bigip_authentication_action = f5_bigip_syslog_log_in_failed, f5_bigip_syslog_user_authenticated
EXTRACT-process = semaphore\s(?<process>(\S+))
EXTRACT-session_id = \d+:\s{(?<session_id>\S+)}\s
EVAL-port = if(mvcount(split(port, ":")) > 1, mvindex(split(port, ":"), 1), port)
EVAL-user = coalesce(user, User)
EVAL-src = coalesce(src, src_ip)
EVAL-status = coalesce(status, http_status)
EVAL-url = coalesce(url, http_url)
EVAL-process_id = coalesce(process_id, pid)
EVAL-bytes = (tonumber(bytes_in)+tonumber(bytes_out))
EVAL-vendor_product = "F5 BIG-IP"
EXTRACT-action = (?<action>authenticated)\suser\s(?<user>\w+)\swith
EVAL-action = case(action=="authenticated", "success", action=="failed to login", "failure", like(message,"%Connection error%"), "teardown")
# CIM fields
EXTRACT-dest = ^\w+\s\d+\s\d{2}:\d{2}:\d{2}\s(?<dest>\S+)
EVAL-dest = coalesce(dest_ip, dest, host)
EVAL-app = if(match(service,"\(pam_audit\)") or action=failure or (match(_raw,"pam_bigip_authz") and match(_raw,"authenticated")), "BigIP PAM (Pluggable Authentication Modules)",null())
EVAL-protocol_version = if(isnull(dest_ip), null(), if(match(dest_ip,":"), "ipv6", "ipv4"))
EVAL-transport = if(isnull(transport), if(like(message,"%Connection error%"), "tcp", null()), lower(transport))
LOOKUP-f5_bigip_syslog_protocol = f5_bigip_apm_syslog_protocol_lookup transport OUTPUTNEW protocol
FIELDALIAS-dvc = host AS dvc

[f5:bigip:secure]
REPORT-secure_reports = f5_bigip_secure_head, f5_bigip_secure_server, f5_bigip_secure_user, f5_bigip_service_extract
EXTRACT-action = user\s(?:\w+)\s(?<action>success).*authenticated
EVAL-action = if(isnull(action), "failure", action)
# CIM fields
EXTRACT-dest = ^\w+\s\d+\s\d{2}:\d{2}:\d{2}\s(?<dest>\S+)
EVAL-dest = coalesce(dest, host)
EVAL-app = if(match(_raw,"authenticated"), "BigIP PAM (Pluggable Authentication Modules)", null())

[f5:bigip:ltm:ssl:error]
REPORT-ssl_reports = f5_bigip_ssl_head, f5_bigip_service_extract
FIELDALIAS-dest = dest_ip AS dest
FIELDALIAS-dvc = host AS dvc
FIELDALIAS-src = src_ip AS src

EVAL-action = case(like(message, "SSL Handshake failed%"), "teardown")
EVAL-protocol = case(like(message, "SSL Handshake failed%"), "ip")
EVAL-protocol_version = if(isnull(dest_ip), null(), if(match(coalesce(dest_ip, src_ip),":"), "ipv6", "ipv4"))
EVAL-rule = case(like(message, "SSL Handshake failed%"), "SSL Handshake")
EVAL-transport = lower(transport)
EVAL-vendor_product = "F5 BIG-IP"

[f5:bigip:ltm:tcl:error]
REPORT-tcl_reports = f5_bigip_tcl_head, f5_bigip_service_extract

[f5:bigip:ltm:traffic]
REPORT-traffic_reports = f5_bigip_traffic_head, f5_bigip_service_extract

[f5:bigip:ltm:log:error]
REPORT-error_reports = f5_bigip_error_head, f5_bigip_service_extract

[f5:bigip:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
TRANSFORMS-sourcetype = f5_bigip-icontrol-locallb, f5_bigip-icontrol-globallb, f5_bigip-icontrol-networking, f5_bigip-icontrol-management, f5_bigip-icontrol-system-systeminfo, f5_bigip-icontrol-system-statistics, f5_bigip-icontrol-system-disk, f5_bigip-icontrol-management-device, f5_bigip-icontrol-networking-interfaces, f5_bigip-icontrol-networking-adminip, f5_bigip-icontrol-locallb-pool, f5_bigip-icontrol-management-usermanagement

[f5:bigip:system:systeminfo:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-dest = get_system_information.host_name as dest
FIELDALIAS-family = get_system_information.os_machine as family
FIELDALIAS-serial = get_system_information.chassis_serial as serial
FIELDALIAS-chassis_serial_chassis = get_system_information.chassis_serial as chassis
FIELDALIAS-product_code = get_product_information.product_code as product_code
EVAL-vendor = "F5 Networks"
EVAL-vendor_product = "F5 BIG-IP"
FIELDALIAS-get_hardware_information_versions_value = get_hardware_information.versions{}.value as get_hardware_information_versions_value
FIELDALIAS-get_hardware_information_versions_name = get_hardware_information.versions{}.name as get_hardware_information_versions_name
EVAL-cpu_cores = case(get_hardware_information_versions_name="cores", mvindex(get_hardware_information_versions_value, 1))
EVAL-cpu_mhz = mvindex(get_hardware_information_versions_value, 2)
FIELDALIAS-blocksize_low = get_disk_usage_information.block_size.low as blocksize_low
FIELDALIAS-blocksize_high = get_disk_usage_information.block_size.high as blocksize_high
EVAL-blocksize = ((blocksize_high*4294967296)+blocksize_low)/1024
FIELDALIAS-mount = get_disk_usage_information.partition_name as mount
FIELDALIAS-uptime = get_uptime as uptime
FIELDALIAS-get_global_cpu_usage_extended_information_type=get_global_cpu_usage_extended_information.type as get_global_cpu_usage_extended_information_type
FIELDALIAS-get_global_cpu_usage_extended_information_value_low = get_global_cpu_usage_extended_information.value.low as get_global_cpu_usage_extended_information_value_low
EVAL-cpu_load_percent = case(get_global_cpu_usage_extended_information_type=="STATISTIC_CPU_INFO_USAGE_RATIO", get_global_cpu_usage_extended_information_value_low)
EVAL-cpu_time = case(get_global_cpu_usage_extended_information_type=="STATISTIC_CPU_INFO_USER", get_global_cpu_usage_extended_information_value_low)
FIELDALIAS-serial_num = get_system_information.chassis_serial as serial_num
EVAL-cpu_usage_percent = case(get_global_cpu_usage_extended_information_type=="STATISTIC_CPU_INFO_USAGE_RATIO", get_global_cpu_usage_extended_information_value_low)
EVAL-cpu_count = mvindex(get_hardware_information_versions_value, 1)
FIELDALIAS-memory_size_low = get_memory_usage_information.size.low as memory_size_low
FIELDALIAS-memory_size_high = get_memory_usage_information.size.high as memory_size_high
EVAL-mem = ((memory_size_high*4294967296)+memory_size_low)/1048576
FIELDALIAS-memory_used_low = get_memory_usage_information.current_allocated.low as memory_used_low
FIELDALIAS-memory_used_high = get_memory_usage_information.current_allocated.high as memory_used_high
EVAL-mem_used = ((memory_used_high*4294967296)+memory_used_low)/1048576
FIELDALIAS-os = get_system_information.system_name as os

[f5:bigip:system:statistics:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-get_global_statistics_type = get_global_statistics.type as get_global_statistics_type
FIELDALIAS-get_global_statistics_value_high = get_global_statistics.value.high as get_global_statistics_value_high
FIELDALIAS-get_global_statistics_value_low = get_global_statistics.value.low as get_global_statistics_value_low
FIELDALIAS-get_http_statistics_type = get_http_statistics.type as get_http_statistics_type
FIELDALIAS-get_http_statistics_value_low = get_http_statistics.value.low as get_http_statistics_value_low
EVAL-5XX_codes = case(get_http_statistics_type=="STATISTIC_HTTP_5XX_RESPONSES", get_http_statistics_value_low)
EVAL-cpu_count = case(get_global_statistics_type=="STATISTIC_CPU_COUNT", get_global_statistics_value_low)
EVAL-current_conns = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_CURRENT_CONNECTIONS", get_global_statistics_value_low)
EVAL-throughput = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_BYTES_IN", get_global_statistics_value_low)
EVAL-total_conns = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_TOTAL_CONNECTIONS", get_global_statistics_value_low)
EVAL-max_conns_percent = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_MAXIMUM_CONNECTIONS", get_global_statistics_value_low)

#For predefined "get_global_host_statistics" without "breakField"
FIELDALIAS-get_global_statistics_type_s = get_global_host_statistics.statistics{}.type as get_global_statistics_type_s
FIELDALIAS-get_global_statistics_value_high_s = get_global_host_statistics.statistics{}.value.high as get_global_statistics_value_high_s
FIELDALIAS-get_global_statistics_value_low_s = get_global_host_statistics.statistics{}.value.low as get_global_statistics_value_low_s

EVAL-mem = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16))/1024/1024
EVAL-memory = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16))/1024/1024
EVAL-mem_used = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16))/1024/1024
EVAL-mem_usage_percent = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)) / (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)) * 100
EVAL-mem_used_percent = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)) / (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)) * 100
EVAL-vendor_product = "F5 BIG-IP"

#For "get_client_ssl_statistics"
FIELDALIAS-get_client_ssl_statistics_type = get_client_ssl_statistics.type AS get_client_ssl_statistics_type
FIELDALIAS-get_client_ssl_statistics_value_high = get_client_ssl_statistics.value.high as get_client_ssl_statistics_value_high
FIELDALIAS-get_client_ssl_statistics_value_low = get_client_ssl_statistics.value.low as get_client_ssl_statistics_value_low
EVAL-ssl_tps = case(get_client_ssl_statistics_type=="STATISTIC_SSL_FIVE_SEC_AVG_TOT_CONNS", tonumber(if(len(tostring(get_client_ssl_statistics_value_high, "hex"))>10, substr(tostring(get_client_ssl_statistics_value_high, "hex"), -8), substr(tostring(get_client_ssl_statistics_value_high, "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(get_client_ssl_statistics_value_low, "hex"))>10, substr(tostring(get_client_ssl_statistics_value_low, "hex"), -8), substr(tostring(get_client_ssl_statistics_value_low, "hex"), 3)), 16))


[f5:bigip:system:disk:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-get_array_member_s = get_array_member{} as get_array_member_s
EVAL-array = mvindex(get_array_member_s, 0)
FIELDALIAS-storage = get_logical_disk_size as storage
FIELDALIAS-storage_used = get_logical_disk_space_in_use as storage_used
EVAL-storage_used_percent = storage_used/storage*100
EVAL-storage_free = storage-storage_used
EVAL-storage_free_percent = (storage-storage_used)/storage*100

[f5:bigip:management:device:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-mac = get_base_mac_address as mac
FIELDALIAS-status = get_failover_state as status
FIELDALIAS-get_failover_state = get_failover_state as failover_state
FIELDALIAS-get_chassis_id = get_chassis_id as device_id
FIELDALIAS-get_chassis_id_chassis = get_chassis_id as chassis
FIELDALIAS-get_software_version = get_software_version as sw_version
FIELDALIAS-dest =  get_management_address as dest
EVAL-vendor = "F5 Networks"
EVAL-vendor_prod = "F5 " + get_product
EVAL-vendor_model = "F5 " + get_marketing_name
FIELDALIAS-cim_builder = get_software_version as version
FIELDALIAS-get_failover_state_failover_status_string = get_failover_state as failover_status_string
LOOKUP-f5_bigip_icontrol_ha_states = f5_bigip_icontrol_ha_state_lookup get_failover_state OUTPUTNEW failover_status
EVAL-vendor_product = "F5 " + get_product
EVAL-description = case(get_description!="" AND isnotnull(get_description),get_description)


[f5:bigip:networking:interfaces:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-mac = get_mac_address as mac
EVAL-vendor_product = "F5 BIG-IP"
EVAL-interface = coalesce('get_all_statistics.interface_name', get_list)
EVAL-ip = coalesce(source, host)
FIELDALIAS-statistics_value_low = get_all_statistics.statistics{}.value.low as statistics_values_low
FIELDALIAS-statistics_value_high = get_all_statistics.statistics{}.value.high as statistics_values_high
FIELDALIAS-statistics_type = get_all_statistics.statistics{}.type as statistics_types
EVAL-thruput=(tonumber(mvindex(statistics_values_high, mvfind(statistics_types, "^STATISTIC_BYTES_IN$"))) * 8589934592) + tonumber(mvindex(statistics_values_low, mvfind(statistics_types, "^STATISTIC_BYTES_IN$"))) + (tonumber(mvindex(statistics_values_high, mvfind(statistics_types, "^STATISTIC_BYTES_OUT$"))) * 8589934592) + tonumber(mvindex(statistics_values_low, mvfind(statistics_types, "^STATISTIC_BYTES_OUT$")))
EVAL-description = case(get_description!="" AND isnotnull(get_description),get_description)
EVAL-enabled = case(get_enabled_state=="STATE_DISABLED", "0", get_enabled_state=="STATE_ENABLED", "1")
EVAL-status = case(get_enabled_state=="STATE_DISABLED", "disabled", get_enabled_state=="STATE_ENABLED", "enabled")

[f5:bigip:networking:adminip:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-ip = get_list as ip

[f5:bigip:management:usermanagement:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-user = get_fullname as user
FIELDALIAS-shell = get_login_shell as shell
FIELDALIAS-password = get_encrypted_password as password
FIELDALIAS-user_id = get_user_id as user_id
FIELDALIAS-user_priority = get_role as user_priority
EVAL-vendor_product = "F5 BIG-IP"

[f5:bigip:networking:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-vendor_product = "F5 BIG-IP"
FIELDALIAS-interface = get_vlan AS interface
# CIM fields
EVAL-ip = if(isnull(get_address) or get_address="",host,get_address)

[f5:bigip:management:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-active_modules = if(module_interface=="Management.Provision", get_provisioned_list, null)

### ASM ###
[f5:bigip:asm:syslog]
FIELDALIAS-f5_bigip_server_host = unit_host AS f5_bigip_server_host
EVAL-is_f5_heartbeat = if(ip_client==host, "true", "false")
REPORT-all_reports = headers_extract, request_extract, response_extract, cookie_extract, http_user_agent_extract
EVAL-action = case(req_status="passed" or req_status="alerted","allowed",req_status="blocked","blocked")
EVAL-bytes_in = len(req)
EVAL-bytes_out = len(resp)
EVAL-bytes = len(req)+len(resp)
FIELDALIAS-dest = dest_ip AS dest
FIELDALIAS-http_method = method AS http_method
EVAL-http_user_agent_length = len(http_user_agent)
FIELDALIAS-site = dest_ip AS site
FIELDALIAS-src = ip_client AS src
FIELDALIAS-src_ip = ip_client AS src_ip
FIELDALIAS-status = resp_code AS status
FIELDALIAS-uri_path = uri AS uri_path
FIELDALIAS-uri_query = query_str AS uri_query
EVAL-url = dest_ip+":"+dest_port+uri
EVAL-url_length = len(dest_ip+":"+dest_port+uri)
EVAL-user = if(isnull(username) or username="" or username="-" or username="N/A", null(), username)
EVAL-vendor = "F5 Networks"
EVAL-vendor_product = "F5 BIG-IP ASM"
FIELDALIAS-dvc = unit_host AS dvc
FIELDALIAS-date_time = date_time AS date
EVAL-signature = if(isnull(virus_name) or virus_name="" or virus_name="-" or virus_name="N/A", null(), virus_name)
EVAL-ids_type = "network"
EVAL-transport = case(protocol=="HTTP", "TCP", true(), protocol)
EVAL-attack_type = if(isnull(attack_type) or attack_type="" or attack_type="-", null(), attack_type)
EVAL-category = if(isnull(attack_type) or attack_type="" or attack_type="-" or attack_type="N/A", null(), attack_type)
EVAL-violations = if(isnull(violations) or violations="" or violations="-", null(), violations)
EVAL-vendor_action = if(isnull(violations) or violations="" or violations="-", null(), violations)
FIELDALIAS-app = protocol AS app
EVAL-severity = case(severity=="Notice","low", severity=="Informational", "informational", severity=="Warning", "medium", severity=="Alert" OR severity=="Error", "high", severity=="Critical" OR severity=="Emergency", "critical",true(),lower(severity))

### APM ###
[f5:bigip:apm:syslog]
FIELDALIAS-f5_bigip_server_host = host AS f5_bigip_server_host
REPORT-apm_reports_0 = head_extract, session_var_extract,session_var_extract_2, username_extract, useragent_extract, client_info_extract, access_type_extract, acl_extract, f5_bigip_service_extract
REPORT-apm_reports_1 = throughput_extract,new_session_extract, del_session_extract, executed_agent_extract, access_policy_extract, access_policy_extract_2, acl_assigned_extract, assigned_ppp_extract
REPORT-apm_reports_2 = acl_extract_expansion
REPORT-f5_bigip_access_policy = f5_bigip_access_policy
EVAL-vendor = "F5 Networks"
EVAL-vendor_product = "F5 BIG-IP APM"
EVAL-bytes = bytes_in+bytes_out
EVAL-rule = coalesce(rule, acl_name)
FIELDALIAS-src = src_ip AS src
FIELDALIAS-dvc = host AS dvc
FIELDALIAS-dvc_ip = host AS dvc_ip
EVAL-dest_ip = coalesce(vip, dest_ip)
EVAL-dest = coalesce(vip, dest_ip)
EVAL-signature = case(like(message, "New session%"), "Session Created", isnull(access_policy_result) OR access_policy_result="Logon_Deny", null(), isnotnull(access_policy_result), access_policy_result)
EVAL-http_user_agent=urldecode(http_user_agent)
EVAL-http_user_agent_length = len(urldecode(http_user_agent))
EVAL-status = if(session_var_name="session.http.last.response_status",session_var_value,null)
EVAL-url_length = len(url)
EVAL-session_var_value = if(isnull(session_var_name), null(), if(isnull(session_var_value), "", session_var_value))
# CIM fields
REPORT-apm_reports_3 = app_extract
LOOKUP-f5_bigip_apm_syslog_action = f5_bigip_apm_syslog_action_lookup action as acl_result OUTPUTNEW datamodel_action as action
LOOKUP-f5_bigip_apm_syslog_protocol = f5_bigip_apm_syslog_protocol_lookup transport OUTPUTNEW protocol
EVAL-protocol = case(like(message, "Assigned PPP%"), "ip")
EVAL-protocol_version = if(isnull(vip) and isnull(dest_ip), null(), if(match(coalesce(vip, dest_ip),":"), "ipv6", "ipv4"))
EVAL-action = case(like(message,"New session%"),"added",like(message,"Assigned PPP%"),"allowed")

[f5:telemetry:json]
KV_MODE = json
TRUNCATE = 0

## Extractions ##
TRANSFORMS-source_extract = f5_bigip-ltm-source-extract, f5_bigip-apm-source-extract, f5_bigip-asm-source-extract, f5_bigip-syslog-source-extract, f5_bigip-system-source-extract, f5_bigip-avr-source-extract, f5_bigip-afm-source-extract
TRANSFORMS-rest_sourcetypes = f5_bigip_ts-icontrol-locallb, f5_bigip_ts-icontrol-locallb-pool, f5_bigip_ts-icontrol-globallb, f5_bigip_ts-icontrol-globallb-pool, f5_bigip_ts-icontrol-management, f5_bigip_ts-icontrol-management-device, f5_bigip_ts-icontrol-management-usermanagement, f5_bigip_ts-icontrol-networking, f5_bigip_ts-icontrol-networking-adminip, f5_bigip_ts-icontrol-networking-interfaces, f5_bigip_ts-icontrol-system-disk, f5_bigip_ts-icontrol-system-statistics, f5_bigip_ts-icontrol-system-systeminfo

## CIM MAPPINGS ##

# LTM
FIELDALIAS-site = http_host as site
FIELDALIAS-uri_path = http_uri as uri_path
EVAL-dest_port = case(telemetryEventCategory="LTM", replace(http_host, ".*:(\d+)$", "\1"), telemetryEventCategory="AVR", POOLPort, true(), dest_port)
FIELDALIAS-duration = req_elapsed_time as duration
EVAL-app = "HTTP"
EVAL-uri_query = replace(http_url, "^[^\?]+\??", "")
EVAL-category = if(isnull(http_content_type) or http_content_type="" or http_content_type="-" or http_content_type="N/A", null(), http_content_type)
EVAL-http_user_agent_length = len(http_user_agent)
FIELDALIAS-status = http_status AS status
FIELDALIAS-url = http_url AS url
EVAL-http_content_type = case(http_content_type!="" AND isnotnull(http_content_type), http_content_type)
EVAL-http_referrer = case(http_referrer!="" AND isnotnull(http_referrer), http_referrer)
EVAL-site = case(http_host!="" AND isnotnull(http_host), http_host)
EVAL-uri_path = case(http_uri!="" AND isnotnull(http_uri), http_uri)
EVAL-url = case(http_url!="" AND isnotnull(http_url), http_url)
EVAL-url_length = len(http_url)
EVAL-user = case(user!="" AND isnotnull(user), user)

## Common CIM mappings for APM and LTM ##

EVAL-bytes_in = coalesce(Bytes_In, bytes_in)
EVAL-bytes_out = coalesce(Bytes_Out, bytes_out)
EVAL-bytes = coalesce(Bytes_In, bytes_in) + coalesce(Bytes_Out, bytes_out)
EVAL-vendor_product = "F5 BIG-IP TS"

## Common CIM mappings for all 3 ##

FIELDALIAS-dest = vip AS dest
FIELDALIAS-src = src_ip AS src
LOOKUP-f5_bigip_category_value_action = f5_bigip_category_value_action telemetryEventCategory, http_status OUTPUTNEW action
EXTRACT-url_domain = "http_url":["]?(?:[^:]+:\/\/)?(?!(?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\S+:\/\/|\[?(?:[^\-\/]*:[^\-\/\]]*:[^\-\/\]]*)\]?:?\d{0,5}\/))(?<url_domain>[^:\/\n,"]+)["]?
EXTRACT-http_referrer_domain = "http_referrer":["]?(?:[^:]+:\/\/)?(?!(?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\S+:\/\/|\[?(?:[^\-\/]*:[^\-\/\]]*:[^\-\/\]]*)\]?:?\d{0,5}\/))(?<http_referrer_domain>[^:\/\n,"]+)["]?

[source::f5:bigip:avr]
FIELDALIAS-bytes_in = ThroughputReqTotalPerInterval AS bytes_in
FIELDALIAS-bytes_out = ThroughputRespTotalPerInterval AS bytes_out
EVAL-bytes = bytes_in + bytes_out
FIELDALIAS-dest = POOLIP AS dest
FIELDALIAS-src = ClientIP AS src
FIELDALIAS-user = UserAgent AS user
EVAL-vendor_product = "F5 BIG-IP TS"

EVAL-duration = RequestDuration + ResponseDuration
FIELDALIAS-response_time = ResponseDuration AS response_time

EVAL-action = case(match(POOLIP, "(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"), "allowed", match(POOLIP, "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"), "allowed", 1==1, "blocked")
FIELDALIAS-dest_ip = POOLIP AS dest_ip
FIELDALIAS-src_ip = ClientIP AS src_ip
FIELDALIAS-dvc = hostname AS dvc

[source::f5:bigip:syslog]
REPORT-syslog_reports = f5_bigip_syslog_head_ts, f5_bigip_service_extract
REPORT-f5_bigip_status = f5_bigip_general_status, f5_bigip_monitor_status
REPORT-f5_bigip_virtual_address = f5_bigip_virtual_address
REPORT-f5_bigip_node_details = f5_bigip_node_details
REPORT-f5_bigip_pool_details = f5_bigip_pool_details
REPORT-f5_bigip_authentication_action = f5_bigip_syslog_log_in_failed, f5_bigip_syslog_user_authenticated
REPORT-f5_key_value = f5_syslog_kv_a, f5_syslog_kv_b
EXTRACT-process = semaphore\s(?<process>(\S+))
EXTRACT-session_id = \d+:\s{(?<session_id>\S+)}\s
EVAL-port = if(mvcount(split(port, ":")) > 1, mvindex(split(port, ":"), 1), port)
EVAL-user = coalesce(user, User)
EVAL-src = coalesce(src, src_ip)
EVAL-status = coalesce(status, http_status)
EVAL-url = coalesce(url, http_url)
EVAL-process_id = coalesce(process_id, pid)
EVAL-bytes = (tonumber(bytes_in)+tonumber(bytes_out))
EVAL-vendor_product = "F5 BIG-IP TS"
EXTRACT-action = (?<action>authenticated)\suser\s(?<user>\w+)\swith
EVAL-action = case(action=="authenticated", "success", action=="failed to login", "failure")

# CIM fields
EXTRACT-dest = ^\w+\s\d+\s\d{2}:\d{2}:\d{2}\s(?<dest>\S+)
EVAL-app = if(match(service,"\(pam_audit\)") or action=failure or (match(_raw,"pam_bigip_authz") and match(_raw,"authenticated")), "BigIP PAM (Pluggable Authentication Modules)",null)

[source::f5:bigip:asm]
FIELDALIAS-dest = dest_ip AS dest
FIELDALIAS-dvc_ip = manage_ip_addr AS dvc_ip
FIELDALIAS-dvc_host = unit_host AS dvc_host
FIELDALIAS-src = ip_client AS src
EVAL-action = case(req_status=="passed", "allowed", true(), req_status)
EVAL-category = case(attack_type!="" AND attack_type!="N/A", attack_type)
EVAL-ids_type = "network"
EVAL-dvc = coalesce(dvc_ip, dvc_host)
EVAL-severity = case(severity=="Notice","low", severity=="Informational", "informational", severity=="Warning", "medium", severity=="Alert" OR severity=="Error", "high", severity=="Critical" OR severity=="Emergency", "critical")
EVAL-signature = case(sig_names!="" AND sig_names!="N/A", sig_names)
EVAL-transport = case(protocol=="HTTP", "TCP", true(), protocol)
EVAL-signature_id = case(sig_ids!="" AND sig_ids!="N/A", sig_ids)
EVAL-user = case(username!="N/A" AND username!="", username)

[source::f5:bigip:afm]
EVAL-action = case(action="Closed","blocked",action="Established","allowed",true(),action)
EVAL-transport = lower(ip_protocol)
EVAL-protocol = case(ip_protocol IN ("TCP" ,"UDP"), "ip", ip_protocol=="ICMP", "icmp")
EVAL-protocol_version = if(match(coalesce(source_ip,dest_ip),":"), "ipv6", if(match(coalesce(source_ip,dest_ip), "(?:\d+\.\d+\.\d+\.\d+)"),"ipv4", null))

FIELDALIAS-dest = dest_ip AS dest
FIELDALIAS-dest_translated_ip = translated_dest_ip AS dest_translated_ip
FIELDALIAS-dest_translated_port = translated_dest_port AS dest_translated_port
FIELDALIAS-dvc = bigip_mgmt_ip AS dvc
FIELDALIAS-rule = acl_rule_name AS rule
FIELDALIAS-src = source_ip AS src
FIELDALIAS-src_ip = source_ip AS src_ip
FIELDALIAS-src_port = source_port AS src_port
FIELDALIAS-src_translated_ip = translated_source_ip AS src_translated_ip
FIELDALIAS-src_translated_port = translated_source_port AS src_translated_port
FIELDALIAS-user = source_user AS user

[f5:bigip:ts:networking:interfaces:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:networking:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:networking:adminip:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:system:disk:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:system:statistics:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:management:device:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:management:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:management:usermanagement:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:gtm:globallb:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:gtm:globallb:pool:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:system:systeminfo:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:ltm:locallb:pool:icontrol]
KV_MODE = json
TRUNCATE = 0

[f5:bigip:ts:ltm:locallb:icontrol]
KV_MODE = json
TRUNCATE = 0
