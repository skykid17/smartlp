var n={d:(t,r)=>{for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},o:(n,t)=>Object.prototype.hasOwnProperty.call(n,t),r:n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}},t={};n.d(t,{Z:()=>Hr});var r={};n.r(r),n.d(r,{VERSION:()=>e,after:()=>Tt,all:()=>nr,allKeys:()=>dn,any:()=>tr,assign:()=>Tn,before:()=>Dt,bind:()=>jt,bindAll:()=>At,chain:()=>bt,chunk:()=>Vr,clone:()=>Fn,collect:()=>Zt,compact:()=>Or,compose:()=>Nt,constant:()=>Q,contains:()=>rr,countBy:()=>dr,create:()=>Vn,debounce:()=>It,default:()=>qr,defaults:()=>Dn,defer:()=>Et,delay:()=>Mt,detect:()=>Ht,difference:()=>Er,drop:()=>_r,each:()=>Kt,escape:()=>it,every:()=>nr,extend:()=>Nn,extendOwn:()=>Tn,filter:()=>Xt,find:()=>Ht,findIndex:()=>zt,findKey:()=>Vt,findLastIndex:()=>qt,findWhere:()=>$t,first:()=>Sr,flatten:()=>Mr,foldl:()=>Jt,foldr:()=>Qt,forEach:()=>Kt,functions:()=>kn,get:()=>Un,groupBy:()=>hr,has:()=>Wn,head:()=>Sr,identity:()=>Hn,include:()=>rr,includes:()=>rr,indexBy:()=>yr,indexOf:()=>Ut,initial:()=>jr,inject:()=>Jt,intersection:()=>Br,invert:()=>In,invoke:()=>er,isArguments:()=>Z,isArray:()=>H,isArrayBuffer:()=>R,isBoolean:()=>M,isDataView:()=>W,isDate:()=>B,isElement:()=>E,isEmpty:()=>cn,isEqual:()=>yn,isError:()=>T,isFinite:()=>G,isFunction:()=>z,isMap:()=>_n,isMatch:()=>fn,isNaN:()=>J,isNull:()=>A,isNumber:()=>k,isObject:()=>_,isRegExp:()=>N,isSet:()=>On,isString:()=>I,isSymbol:()=>D,isTypedArray:()=>en,isUndefined:()=>O,isWeakMap:()=>An,isWeakSet:()=>Mn,iteratee:()=>Jn,keys:()=>an,last:()=>Ar,lastIndexOf:()=>Wt,map:()=>Zt,mapObject:()=>Xn,matcher:()=>$n,matches:()=>$n,max:()=>ir,memoize:()=>Ot,methods:()=>kn,min:()=>ar,mixin:()=>zr,negate:()=>Bt,noop:()=>Yn,now:()=>et,object:()=>Dr,omit:()=>wr,once:()=>Rt,pairs:()=>Pn,partial:()=>wt,partition:()=>gr,pick:()=>xr,pluck:()=>ur,property:()=>Kn,propertyOf:()=>nt,random:()=>rt,range:()=>Rr,reduce:()=>Jt,reduceRight:()=>Qt,reject:()=>Yt,rest:()=>_r,restArguments:()=>S,result:()=>yt,sample:()=>lr,select:()=>Xt,shuffle:()=>sr,size:()=>br,some:()=>tr,sortBy:()=>pr,sortedIndex:()=>Ct,tail:()=>_r,take:()=>Sr,tap:()=>zn,template:()=>ht,templateSettings:()=>ct,throttle:()=>Pt,times:()=>tt,toArray:()=>fr,toPath:()=>qn,transpose:()=>Nr,unescape:()=>at,union:()=>kr,uniq:()=>Ir,unique:()=>Ir,uniqueId:()=>gt,unzip:()=>Nr,values:()=>En,where:()=>or,without:()=>Pr,wrap:()=>kt,zip:()=>Tr});var e="1.13.6",u="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},o=Array.prototype,i=Object.prototype,a="undefined"!=typeof Symbol?Symbol.prototype:null,c=o.push,f=o.slice,l=i.toString,s=i.hasOwnProperty,p="undefined"!=typeof ArrayBuffer,v="undefined"!=typeof DataView,h=Array.isArray,y=Object.keys,d=Object.create,g=p&&ArrayBuffer.isView,b=isNaN,m=isFinite,x=!{toString:null}.propertyIsEnumerable("toString"),w=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],j=Math.pow(2,53)-1;function S(n,t){return t=null==t?n.length-1:+t,function(){for(var r=Math.max(arguments.length-t,0),e=Array(r),u=0;u<r;u++)e[u]=arguments[u+t];switch(t){case 0:return n.call(this,e);case 1:return n.call(this,arguments[0],e);case 2:return n.call(this,arguments[0],arguments[1],e)}var o=Array(t+1);for(u=0;u<t;u++)o[u]=arguments[u];return o[t]=e,n.apply(this,o)}}function _(n){var t=typeof n;return"function"===t||"object"===t&&!!n}function A(n){return null===n}function O(n){return void 0===n}function M(n){return!0===n||!1===n||"[object Boolean]"===l.call(n)}function E(n){return!(!n||1!==n.nodeType)}function P(n){var t="[object "+n+"]";return function(n){return l.call(n)===t}}const I=P("String"),k=P("Number"),B=P("Date"),N=P("RegExp"),T=P("Error"),D=P("Symbol"),R=P("ArrayBuffer");var V=P("Function"),F=u.document&&u.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof F&&(V=function(n){return"function"==typeof n||!1});const z=V,q=P("Object");var C=v&&q(new DataView(new ArrayBuffer(8))),L="undefined"!=typeof Map&&q(new Map),U=P("DataView");const W=C?function(n){return null!=n&&z(n.getInt8)&&R(n.buffer)}:U,H=h||P("Array");function $(n,t){return null!=n&&s.call(n,t)}var K=P("Arguments");!function(){K(arguments)||(K=function(n){return $(n,"callee")})}();const Z=K;function G(n){return!D(n)&&m(n)&&!isNaN(parseFloat(n))}function J(n){return k(n)&&b(n)}function Q(n){return function(){return n}}function X(n){return function(t){var r=n(t);return"number"==typeof r&&r>=0&&r<=j}}function Y(n){return function(t){return null==t?void 0:t[n]}}const nn=Y("byteLength"),tn=X(nn);var rn=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;const en=p?function(n){return g?g(n)&&!W(n):tn(n)&&rn.test(l.call(n))}:Q(!1),un=Y("length");function on(n,t){t=function(n){for(var t={},r=n.length,e=0;e<r;++e)t[n[e]]=!0;return{contains:function(n){return!0===t[n]},push:function(r){return t[r]=!0,n.push(r)}}}(t);var r=w.length,e=n.constructor,u=z(e)&&e.prototype||i,o="constructor";for($(n,o)&&!t.contains(o)&&t.push(o);r--;)(o=w[r])in n&&n[o]!==u[o]&&!t.contains(o)&&t.push(o)}function an(n){if(!_(n))return[];if(y)return y(n);var t=[];for(var r in n)$(n,r)&&t.push(r);return x&&on(n,t),t}function cn(n){if(null==n)return!0;var t=un(n);return"number"==typeof t&&(H(n)||I(n)||Z(n))?0===t:0===un(an(n))}function fn(n,t){var r=an(t),e=r.length;if(null==n)return!e;for(var u=Object(n),o=0;o<e;o++){var i=r[o];if(t[i]!==u[i]||!(i in u))return!1}return!0}function ln(n){return n instanceof ln?n:this instanceof ln?void(this._wrapped=n):new ln(n)}function sn(n){return new Uint8Array(n.buffer||n,n.byteOffset||0,nn(n))}ln.VERSION=e,ln.prototype.value=function(){return this._wrapped},ln.prototype.valueOf=ln.prototype.toJSON=ln.prototype.value,ln.prototype.toString=function(){return String(this._wrapped)};var pn="[object DataView]";function vn(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return!1;if(n!=n)return t!=t;var u=typeof n;return("function"===u||"object"===u||"object"==typeof t)&&hn(n,t,r,e)}function hn(n,t,r,e){n instanceof ln&&(n=n._wrapped),t instanceof ln&&(t=t._wrapped);var u=l.call(n);if(u!==l.call(t))return!1;if(C&&"[object Object]"==u&&W(n)){if(!W(t))return!1;u=pn}switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!=+n?+t!=+t:0==+n?1/+n==1/t:+n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object Symbol]":return a.valueOf.call(n)===a.valueOf.call(t);case"[object ArrayBuffer]":case pn:return hn(sn(n),sn(t),r,e)}var o="[object Array]"===u;if(!o&&en(n)){if(nn(n)!==nn(t))return!1;if(n.buffer===t.buffer&&n.byteOffset===t.byteOffset)return!0;o=!0}if(!o){if("object"!=typeof n||"object"!=typeof t)return!1;var i=n.constructor,c=t.constructor;if(i!==c&&!(z(i)&&i instanceof i&&z(c)&&c instanceof c)&&"constructor"in n&&"constructor"in t)return!1}e=e||[];for(var f=(r=r||[]).length;f--;)if(r[f]===n)return e[f]===t;if(r.push(n),e.push(t),o){if((f=n.length)!==t.length)return!1;for(;f--;)if(!vn(n[f],t[f],r,e))return!1}else{var s,p=an(n);if(f=p.length,an(t).length!==f)return!1;for(;f--;)if(!$(t,s=p[f])||!vn(n[s],t[s],r,e))return!1}return r.pop(),e.pop(),!0}function yn(n,t){return vn(n,t)}function dn(n){if(!_(n))return[];var t=[];for(var r in n)t.push(r);return x&&on(n,t),t}function gn(n){var t=un(n);return function(r){if(null==r)return!1;var e=dn(r);if(un(e))return!1;for(var u=0;u<t;u++)if(!z(r[n[u]]))return!1;return n!==jn||!z(r[bn])}}var bn="forEach",mn=["clear","delete"],xn=["get","has","set"],wn=mn.concat(bn,xn),jn=mn.concat(xn),Sn=["add"].concat(mn,bn,"has");const _n=L?gn(wn):P("Map"),An=L?gn(jn):P("WeakMap"),On=L?gn(Sn):P("Set"),Mn=P("WeakSet");function En(n){for(var t=an(n),r=t.length,e=Array(r),u=0;u<r;u++)e[u]=n[t[u]];return e}function Pn(n){for(var t=an(n),r=t.length,e=Array(r),u=0;u<r;u++)e[u]=[t[u],n[t[u]]];return e}function In(n){for(var t={},r=an(n),e=0,u=r.length;e<u;e++)t[n[r[e]]]=r[e];return t}function kn(n){var t=[];for(var r in n)z(n[r])&&t.push(r);return t.sort()}function Bn(n,t){return function(r){var e=arguments.length;if(t&&(r=Object(r)),e<2||null==r)return r;for(var u=1;u<e;u++)for(var o=arguments[u],i=n(o),a=i.length,c=0;c<a;c++){var f=i[c];t&&void 0!==r[f]||(r[f]=o[f])}return r}}const Nn=Bn(dn),Tn=Bn(an),Dn=Bn(dn,!0);function Rn(n){if(!_(n))return{};if(d)return d(n);var t=function(){};t.prototype=n;var r=new t;return t.prototype=null,r}function Vn(n,t){var r=Rn(n);return t&&Tn(r,t),r}function Fn(n){return _(n)?H(n)?n.slice():Nn({},n):n}function zn(n,t){return t(n),n}function qn(n){return H(n)?n:[n]}function Cn(n){return ln.toPath(n)}function Ln(n,t){for(var r=t.length,e=0;e<r;e++){if(null==n)return;n=n[t[e]]}return r?n:void 0}function Un(n,t,r){var e=Ln(n,Cn(t));return O(e)?r:e}function Wn(n,t){for(var r=(t=Cn(t)).length,e=0;e<r;e++){var u=t[e];if(!$(n,u))return!1;n=n[u]}return!!r}function Hn(n){return n}function $n(n){return n=Tn({},n),function(t){return fn(t,n)}}function Kn(n){return n=Cn(n),function(t){return Ln(t,n)}}function Zn(n,t,r){if(void 0===t)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,o){return n.call(t,r,e,u,o)}}return function(){return n.apply(t,arguments)}}function Gn(n,t,r){return null==n?Hn:z(n)?Zn(n,t,r):_(n)&&!H(n)?$n(n):Kn(n)}function Jn(n,t){return Gn(n,t,1/0)}function Qn(n,t,r){return ln.iteratee!==Jn?ln.iteratee(n,t):Gn(n,t,r)}function Xn(n,t,r){t=Qn(t,r);for(var e=an(n),u=e.length,o={},i=0;i<u;i++){var a=e[i];o[a]=t(n[a],a,n)}return o}function Yn(){}function nt(n){return null==n?Yn:function(t){return Un(n,t)}}function tt(n,t,r){var e=Array(Math.max(0,n));t=Zn(t,r,1);for(var u=0;u<n;u++)e[u]=t(u);return e}function rt(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))}ln.toPath=qn,ln.iteratee=Jn;const et=Date.now||function(){return(new Date).getTime()};function ut(n){var t=function(t){return n[t]},r="(?:"+an(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}}const ot={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},it=ut(ot),at=ut(In(ot)),ct=ln.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var ft=/(.)^/,lt={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},st=/\\|'|\r|\n|\u2028|\u2029/g;function pt(n){return"\\"+lt[n]}var vt=/^\s*(\w|\$)+\s*$/;function ht(n,t,r){!t&&r&&(t=r),t=Dn({},t,ln.templateSettings);var e=RegExp([(t.escape||ft).source,(t.interpolate||ft).source,(t.evaluate||ft).source].join("|")+"|$","g"),u=0,o="__p+='";n.replace(e,(function(t,r,e,i,a){return o+=n.slice(u,a).replace(st,pt),u=a+t.length,r?o+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?o+="'+\n((__t=("+e+"))==null?'':__t)+\n'":i&&(o+="';\n"+i+"\n__p+='"),t})),o+="';\n";var i,a=t.variable;if(a){if(!vt.test(a))throw new Error("variable is not a bare identifier: "+a)}else o="with(obj||{}){\n"+o+"}\n",a="obj";o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{i=new Function(a,"_",o)}catch(n){throw n.source=o,n}var c=function(n){return i.call(this,n,ln)};return c.source="function("+a+"){\n"+o+"}",c}function yt(n,t,r){var e=(t=Cn(t)).length;if(!e)return z(r)?r.call(n):r;for(var u=0;u<e;u++){var o=null==n?void 0:n[t[u]];void 0===o&&(o=r,u=e),n=z(o)?o.call(n):o}return n}var dt=0;function gt(n){var t=++dt+"";return n?n+t:t}function bt(n){var t=ln(n);return t._chain=!0,t}function mt(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var o=Rn(n.prototype),i=n.apply(o,u);return _(i)?i:o}var xt=S((function(n,t){var r=xt.placeholder,e=function(){for(var u=0,o=t.length,i=Array(o),a=0;a<o;a++)i[a]=t[a]===r?arguments[u++]:t[a];for(;u<arguments.length;)i.push(arguments[u++]);return mt(n,e,this,this,i)};return e}));xt.placeholder=ln;const wt=xt,jt=S((function(n,t,r){if(!z(n))throw new TypeError("Bind must be called on a function");var e=S((function(u){return mt(n,e,t,this,r.concat(u))}));return e})),St=X(un);function _t(n,t,r,e){if(e=e||[],t||0===t){if(t<=0)return e.concat(n)}else t=1/0;for(var u=e.length,o=0,i=un(n);o<i;o++){var a=n[o];if(St(a)&&(H(a)||Z(a)))if(t>1)_t(a,t-1,r,e),u=e.length;else for(var c=0,f=a.length;c<f;)e[u++]=a[c++];else r||(e[u++]=a)}return e}const At=S((function(n,t){var r=(t=_t(t,!1,!1)).length;if(r<1)throw new Error("bindAll must be passed function names");for(;r--;){var e=t[r];n[e]=jt(n[e],n)}return n}));function Ot(n,t){var r=function(e){var u=r.cache,o=""+(t?t.apply(this,arguments):e);return $(u,o)||(u[o]=n.apply(this,arguments)),u[o]};return r.cache={},r}const Mt=S((function(n,t,r){return setTimeout((function(){return n.apply(null,r)}),t)})),Et=wt(Mt,ln,1);function Pt(n,t,r){var e,u,o,i,a=0;r||(r={});var c=function(){a=!1===r.leading?0:et(),e=null,i=n.apply(u,o),e||(u=o=null)},f=function(){var f=et();a||!1!==r.leading||(a=f);var l=t-(f-a);return u=this,o=arguments,l<=0||l>t?(e&&(clearTimeout(e),e=null),a=f,i=n.apply(u,o),e||(u=o=null)):e||!1===r.trailing||(e=setTimeout(c,l)),i};return f.cancel=function(){clearTimeout(e),a=0,e=u=o=null},f}function It(n,t,r){var e,u,o,i,a,c=function(){var f=et()-u;t>f?e=setTimeout(c,t-f):(e=null,r||(i=n.apply(a,o)),e||(o=a=null))},f=S((function(f){return a=this,o=f,u=et(),e||(e=setTimeout(c,t),r&&(i=n.apply(a,o))),i}));return f.cancel=function(){clearTimeout(e),e=o=a=null},f}function kt(n,t){return wt(t,n)}function Bt(n){return function(){return!n.apply(this,arguments)}}function Nt(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}}function Tt(n,t){return function(){if(--n<1)return t.apply(this,arguments)}}function Dt(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),n<=1&&(t=null),r}}const Rt=wt(Dt,2);function Vt(n,t,r){t=Qn(t,r);for(var e,u=an(n),o=0,i=u.length;o<i;o++)if(t(n[e=u[o]],e,n))return e}function Ft(n){return function(t,r,e){r=Qn(r,e);for(var u=un(t),o=n>0?0:u-1;o>=0&&o<u;o+=n)if(r(t[o],o,t))return o;return-1}}const zt=Ft(1),qt=Ft(-1);function Ct(n,t,r,e){for(var u=(r=Qn(r,e,1))(t),o=0,i=un(n);o<i;){var a=Math.floor((o+i)/2);r(n[a])<u?o=a+1:i=a}return o}function Lt(n,t,r){return function(e,u,o){var i=0,a=un(e);if("number"==typeof o)n>0?i=o>=0?o:Math.max(o+a,i):a=o>=0?Math.min(o+1,a):o+a+1;else if(r&&o&&a)return e[o=r(e,u)]===u?o:-1;if(u!=u)return(o=t(f.call(e,i,a),J))>=0?o+i:-1;for(o=n>0?i:a-1;o>=0&&o<a;o+=n)if(e[o]===u)return o;return-1}}const Ut=Lt(1,zt,Ct),Wt=Lt(-1,qt);function Ht(n,t,r){var e=(St(n)?zt:Vt)(n,t,r);if(void 0!==e&&-1!==e)return n[e]}function $t(n,t){return Ht(n,$n(t))}function Kt(n,t,r){var e,u;if(t=Zn(t,r),St(n))for(e=0,u=n.length;e<u;e++)t(n[e],e,n);else{var o=an(n);for(e=0,u=o.length;e<u;e++)t(n[o[e]],o[e],n)}return n}function Zt(n,t,r){t=Qn(t,r);for(var e=!St(n)&&an(n),u=(e||n).length,o=Array(u),i=0;i<u;i++){var a=e?e[i]:i;o[i]=t(n[a],a,n)}return o}function Gt(n){return function(t,r,e,u){var o=arguments.length>=3;return function(t,r,e,u){var o=!St(t)&&an(t),i=(o||t).length,a=n>0?0:i-1;for(u||(e=t[o?o[a]:a],a+=n);a>=0&&a<i;a+=n){var c=o?o[a]:a;e=r(e,t[c],c,t)}return e}(t,Zn(r,u,4),e,o)}}const Jt=Gt(1),Qt=Gt(-1);function Xt(n,t,r){var e=[];return t=Qn(t,r),Kt(n,(function(n,r,u){t(n,r,u)&&e.push(n)})),e}function Yt(n,t,r){return Xt(n,Bt(Qn(t)),r)}function nr(n,t,r){t=Qn(t,r);for(var e=!St(n)&&an(n),u=(e||n).length,o=0;o<u;o++){var i=e?e[o]:o;if(!t(n[i],i,n))return!1}return!0}function tr(n,t,r){t=Qn(t,r);for(var e=!St(n)&&an(n),u=(e||n).length,o=0;o<u;o++){var i=e?e[o]:o;if(t(n[i],i,n))return!0}return!1}function rr(n,t,r,e){return St(n)||(n=En(n)),("number"!=typeof r||e)&&(r=0),Ut(n,t,r)>=0}const er=S((function(n,t,r){var e,u;return z(t)?u=t:(t=Cn(t),e=t.slice(0,-1),t=t[t.length-1]),Zt(n,(function(n){var o=u;if(!o){if(e&&e.length&&(n=Ln(n,e)),null==n)return;o=n[t]}return null==o?o:o.apply(n,r)}))}));function ur(n,t){return Zt(n,Kn(t))}function or(n,t){return Xt(n,$n(t))}function ir(n,t,r){var e,u,o=-1/0,i=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=St(n)?n:En(n)).length;a<c;a++)null!=(e=n[a])&&e>o&&(o=e);else t=Qn(t,r),Kt(n,(function(n,r,e){((u=t(n,r,e))>i||u===-1/0&&o===-1/0)&&(o=n,i=u)}));return o}function ar(n,t,r){var e,u,o=1/0,i=1/0;if(null==t||"number"==typeof t&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=St(n)?n:En(n)).length;a<c;a++)null!=(e=n[a])&&e<o&&(o=e);else t=Qn(t,r),Kt(n,(function(n,r,e){((u=t(n,r,e))<i||u===1/0&&o===1/0)&&(o=n,i=u)}));return o}var cr=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function fr(n){return n?H(n)?f.call(n):I(n)?n.match(cr):St(n)?Zt(n,Hn):En(n):[]}function lr(n,t,r){if(null==t||r)return St(n)||(n=En(n)),n[rt(n.length-1)];var e=fr(n),u=un(e);t=Math.max(Math.min(t,u),0);for(var o=u-1,i=0;i<t;i++){var a=rt(i,o),c=e[i];e[i]=e[a],e[a]=c}return e.slice(0,t)}function sr(n){return lr(n,1/0)}function pr(n,t,r){var e=0;return t=Qn(t,r),ur(Zt(n,(function(n,r,u){return{value:n,index:e++,criteria:t(n,r,u)}})).sort((function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(r<e||void 0===e)return-1}return n.index-t.index})),"value")}function vr(n,t){return function(r,e,u){var o=t?[[],[]]:{};return e=Qn(e,u),Kt(r,(function(t,u){var i=e(t,u,r);n(o,t,i)})),o}}const hr=vr((function(n,t,r){$(n,r)?n[r].push(t):n[r]=[t]})),yr=vr((function(n,t,r){n[r]=t})),dr=vr((function(n,t,r){$(n,r)?n[r]++:n[r]=1})),gr=vr((function(n,t,r){n[r?0:1].push(t)}),!0);function br(n){return null==n?0:St(n)?n.length:an(n).length}function mr(n,t,r){return t in r}const xr=S((function(n,t){var r={},e=t[0];if(null==n)return r;z(e)?(t.length>1&&(e=Zn(e,t[1])),t=dn(n)):(e=mr,t=_t(t,!1,!1),n=Object(n));for(var u=0,o=t.length;u<o;u++){var i=t[u],a=n[i];e(a,i,n)&&(r[i]=a)}return r})),wr=S((function(n,t){var r,e=t[0];return z(e)?(e=Bt(e),t.length>1&&(r=t[1])):(t=Zt(_t(t,!1,!1),String),e=function(n,r){return!rr(t,r)}),xr(n,e,r)}));function jr(n,t,r){return f.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))}function Sr(n,t,r){return null==n||n.length<1?null==t||r?void 0:[]:null==t||r?n[0]:jr(n,n.length-t)}function _r(n,t,r){return f.call(n,null==t||r?1:t)}function Ar(n,t,r){return null==n||n.length<1?null==t||r?void 0:[]:null==t||r?n[n.length-1]:_r(n,Math.max(0,n.length-t))}function Or(n){return Xt(n,Boolean)}function Mr(n,t){return _t(n,t,!1)}const Er=S((function(n,t){return t=_t(t,!0,!0),Xt(n,(function(n){return!rr(t,n)}))})),Pr=S((function(n,t){return Er(n,t)}));function Ir(n,t,r,e){M(t)||(e=r,r=t,t=!1),null!=r&&(r=Qn(r,e));for(var u=[],o=[],i=0,a=un(n);i<a;i++){var c=n[i],f=r?r(c,i,n):c;t&&!r?(i&&o===f||u.push(c),o=f):r?rr(o,f)||(o.push(f),u.push(c)):rr(u,c)||u.push(c)}return u}const kr=S((function(n){return Ir(_t(n,!0,!0))}));function Br(n){for(var t=[],r=arguments.length,e=0,u=un(n);e<u;e++){var o=n[e];if(!rr(t,o)){var i;for(i=1;i<r&&rr(arguments[i],o);i++);i===r&&t.push(o)}}return t}function Nr(n){for(var t=n&&ir(n,un).length||0,r=Array(t),e=0;e<t;e++)r[e]=ur(n,e);return r}const Tr=S(Nr);function Dr(n,t){for(var r={},e=0,u=un(n);e<u;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r}function Rr(n,t,r){null==t&&(t=n||0,n=0),r||(r=t<n?-1:1);for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),o=0;o<e;o++,n+=r)u[o]=n;return u}function Vr(n,t){if(null==t||t<1)return[];for(var r=[],e=0,u=n.length;e<u;)r.push(f.call(n,e,e+=t));return r}function Fr(n,t){return n._chain?ln(t).chain():t}function zr(n){return Kt(kn(n),(function(t){var r=ln[t]=n[t];ln.prototype[t]=function(){var n=[this._wrapped];return c.apply(n,arguments),Fr(this,r.apply(ln,n))}})),ln}Kt(["pop","push","reverse","shift","sort","splice","unshift"],(function(n){var t=o[n];ln.prototype[n]=function(){var r=this._wrapped;return null!=r&&(t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0]),Fr(this,r)}})),Kt(["concat","join","slice"],(function(n){var t=o[n];ln.prototype[n]=function(){var n=this._wrapped;return null!=n&&(n=t.apply(n,arguments)),Fr(this,n)}}));const qr=ln;var Cr=zr(r);Cr._=Cr;const Lr=Cr;function Ur(n){return Ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Ur(n)}function Wr(n,t){for(var r=0;r<t.length;r++){var e=t[r];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,(void 0,u=function(n,t){if("object"!==Ur(n)||null===n)return n;var r=n[Symbol.toPrimitive];if(void 0!==r){var e=r.call(n,"string");if("object"!==Ur(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(e.key),"symbol"===Ur(u)?u:String(u)),e)}var u}const Hr=function(){function n(t,r,e,u,o){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.globalConfig=t,this.el=r,this.data=e,this.util=o,this.setValue=u}var t,r;return t=n,(r=[{key:"render",value:function(){var n=this,t="";this.data.value&&(t=this.data.value);var r={};r.content=t,r.id="form-app-textarea",r.name="textarea";var e=Lr.template('<div class="form-horizontal">\n            <div class="form-group">\n            </div>\n            <div class="col">\n                <div class="control" >\n                    <span class="uneditable-input " data-role="uneditable-input" style="display:none"></span>\n                    <style>\n                    textarea {\n                        background-color: rgb(255, 255, 255);\n                        border-radius: 3px;\n                        box-sizing: border-box;\n                        box-shadow: rgb(0 0 0 / 8%) 0px 1px 1px inset;\n                        color: rgb(60, 68, 77);\n                        display: block;\n                        font-family: "Splunk Platform Sans", "Proxima Nova", Roboto, Droid, "Helvetica Neue", Helvetica, Arial, sans-serif;\n                        font-size: inherit;\n                        height: inherit;\n                        line-height: inherit;\n                        margin: 0px;\n                        min-height: 32px;\n                        width: 100%;\n                        padding: 5px calc(10px);\n                        position: relative;\n                        border: 1px solid rgb(195, 203, 212);\n                      }\n                    textarea:focus {\n                        box-shadow: rgb(0 110 170) 0px 0px 1px 3px;\n                        color: rgb(60, 68, 77);\n                        outline: 0px;\n                        border-collapse: separate;\n                        z-index: 1;\n                    }\n                    </style>\n                    <textarea id="<%- id %>" name="<%- name %>" rows="5" cols="60" placeholder="Middle language template for F5 BIG-IP iControl API\'s. Each template record must be of the form: <API Name>,<API Call>,<interval value>"><%- content %></textarea>\n                </div>\n            </div>\n        </div>');this.el.innerHTML=e(r);var u=this.el.querySelector("#"+r.id);return u.addEventListener("keyup",(function(t){n.setValue(u.value)})),this}}])&&Wr(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),n}();var $r=t.Z;export{$r as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWtCM1AsR0FBQUEsU0FyQ0ksZzJEQXNDNUJyRCxLQUFLeVMsR0FBR1EsVUFBWUQsRUFBZ0JGLEdBRXBDLElBQU1MLEVBQUt6UyxLQUFLeVMsR0FBR1MsY0FBYyxJQUFNSixFQUFVdkksSUFNakQsT0FKQWtJLEVBQUdVLGlCQUFpQixTQUFTLFNBQUNDLEdBQzVCQyxFQUFLWCxTQUFTRCxFQUFHcFYsTUFDbkIsSUFFTzJDLElBQ1QsTSxxRUFBQyxFQTNFa0IsRyIsInNvdXJjZXMiOlsid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3NldHVwLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVzdEFyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNOdWxsLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNVbmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0VsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fdGFnVGVzdGVyLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc051bWJlci5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzRGF0ZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzUmVnRXhwLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNFcnJvci5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzU3ltYm9sLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9faGFzT2JqZWN0VGFnLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3N0cmluZ1RhZ0J1Zy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0FycmF5LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNGaW5pdGUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc05hTi5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NvbnN0YW50LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3NoYWxsb3dQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19nZXRCeXRlTGVuZ3RoLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2lzQnVmZmVyTGlrZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19nZXRMZW5ndGguanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY29sbGVjdE5vbkVudW1Qcm9wcy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2tleXMuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0VtcHR5LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNNYXRjaC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3VuZGVyc2NvcmUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fdG9CdWZmZXJWaWV3LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNFcXVhbC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2FsbEtleXMuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fbWV0aG9kRmluZ2VycHJpbnQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc01hcC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzV2Vha01hcC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzU2V0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNXZWFrU2V0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdmFsdWVzLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcGFpcnMuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbnZlcnQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9leHRlbmRPd24uanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY3JlYXRlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy90YXAuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy90b1BhdGguanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fdG9QYXRoLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2RlZXBHZXQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9nZXQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9oYXMuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19vcHRpbWl6ZUNiLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2l0ZXJhdGVlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NiLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWFwT2JqZWN0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbm9vcC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3Byb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy90aW1lcy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JhbmRvbS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL25vdy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVFc2NhcGVyLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2VzY2FwZU1hcC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3VuZXNjYXBlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3VuZXNjYXBlTWFwLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdGVtcGxhdGVTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3RlbXBsYXRlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVzdWx0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5pcXVlSWQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9jaGFpbi5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19leGVjdXRlQm91bmQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wYXJ0aWFsLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYmluZC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19mbGF0dGVuLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYmluZEFsbC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kZWxheS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2RlZmVyLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3dyYXAuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9uZWdhdGUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9jb21wb3NlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9iZWZvcmUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9vbmNlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmluZEtleS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlci5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmRMYXN0SW5kZXguanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb3J0ZWRJbmRleC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVJbmRleEZpbmRlci5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9sYXN0SW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9maW5kV2hlcmUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9lYWNoLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWFwLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NyZWF0ZVJlZHVjZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JlZHVjZVJpZ2h0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmlsdGVyLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVqZWN0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZXZlcnkuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb21lLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbnZva2UuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wbHVjay5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3doZXJlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWF4LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWluLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3NhbXBsZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3NodWZmbGUuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb3J0QnkuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9ncm91cEJ5LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaW5kZXhCeS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NvdW50QnkuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zaXplLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2tleUluT2JqLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcGljay5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL29taXQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbml0aWFsLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9yZXN0LmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbGFzdC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NvbXBhY3QuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9mbGF0dGVuLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZGlmZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3dpdGhvdXQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy91bmlxLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5pb24uanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy91bnppcC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3ppcC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL29iamVjdC5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JhbmdlLmpzIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY2h1bmsuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY2hhaW5SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9taXhpbi5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3VuZGVyc2NvcmUtYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfZjUtYmlnaXAvLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2luZGV4LWRlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vdWNjX3VpX2V4dGVuc2lvbnMvY3VzdG9tX2FjY291bnRfY2VsbC40LjQuMC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIEN1cnJlbnQgdmVyc2lvbi5cbmV4cG9ydCB2YXIgVkVSU0lPTiA9ICcxLjEzLjYnO1xuXG4vLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCAoYHNlbGZgKSBpbiB0aGUgYnJvd3NlciwgYGdsb2JhbGBcbi8vIG9uIHRoZSBzZXJ2ZXIsIG9yIGB0aGlzYCBpbiBzb21lIHZpcnR1YWwgbWFjaGluZXMuIFdlIHVzZSBgc2VsZmBcbi8vIGluc3RlYWQgb2YgYHdpbmRvd2AgZm9yIGBXZWJXb3JrZXJgIHN1cHBvcnQuXG5leHBvcnQgdmFyIHJvb3QgPSAodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmICYmIHNlbGYpIHx8XG4gICAgICAgICAgKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsLmdsb2JhbCA9PT0gZ2xvYmFsICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpIHx8XG4gICAgICAgICAge307XG5cbi8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG5leHBvcnQgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbmV4cG9ydCB2YXIgU3ltYm9sUHJvdG8gPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5wcm90b3R5cGUgOiBudWxsO1xuXG4vLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbmV4cG9ydCB2YXIgcHVzaCA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICBzbGljZSA9IEFycmF5UHJvdG8uc2xpY2UsXG4gICAgdG9TdHJpbmcgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSA9IE9ialByb3RvLmhhc093blByb3BlcnR5O1xuXG4vLyBNb2Rlcm4gZmVhdHVyZSBkZXRlY3Rpb24uXG5leHBvcnQgdmFyIHN1cHBvcnRzQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnLFxuICAgIHN1cHBvcnRzRGF0YVZpZXcgPSB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBBbGwgKipFQ01BU2NyaXB0IDUrKiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4vLyBhcmUgZGVjbGFyZWQgaGVyZS5cbmV4cG9ydCB2YXIgbmF0aXZlSXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgbmF0aXZlS2V5cyA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgbmF0aXZlSXNWaWV3ID0gc3VwcG9ydHNBcnJheUJ1ZmZlciAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG5cbi8vIENyZWF0ZSByZWZlcmVuY2VzIHRvIHRoZXNlIGJ1aWx0aW4gZnVuY3Rpb25zIGJlY2F1c2Ugd2Ugb3ZlcnJpZGUgdGhlbS5cbmV4cG9ydCB2YXIgX2lzTmFOID0gaXNOYU4sXG4gICAgX2lzRmluaXRlID0gaXNGaW5pdGU7XG5cbi8vIEtleXMgaW4gSUUgPCA5IHRoYXQgd29uJ3QgYmUgaXRlcmF0ZWQgYnkgYGZvciBrZXkgaW4gLi4uYCBhbmQgdGh1cyBtaXNzZWQuXG5leHBvcnQgdmFyIGhhc0VudW1CdWcgPSAhe3RvU3RyaW5nOiBudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbmV4cG9ydCB2YXIgbm9uRW51bWVyYWJsZVByb3BzID0gWyd2YWx1ZU9mJywgJ2lzUHJvdG90eXBlT2YnLCAndG9TdHJpbmcnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcblxuLy8gVGhlIGxhcmdlc3QgaW50ZWdlciB0aGF0IGNhbiBiZSByZXByZXNlbnRlZCBleGFjdGx5LlxuZXhwb3J0IHZhciBNQVhfQVJSQVlfSU5ERVggPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuIiwiLy8gU29tZSBmdW5jdGlvbnMgdGFrZSBhIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIG9yIGEgZmV3IGV4cGVjdGVkXG4vLyBhcmd1bWVudHMgYXQgdGhlIGJlZ2lubmluZyBhbmQgdGhlbiBhIHZhcmlhYmxlIG51bWJlciBvZiB2YWx1ZXMgdG8gb3BlcmF0ZVxuLy8gb24uIFRoaXMgaGVscGVyIGFjY3VtdWxhdGVzIGFsbCByZW1haW5pbmcgYXJndW1lbnRzIHBhc3QgdGhlIGZ1bmN0aW9u4oCZc1xuLy8gYXJndW1lbnQgbGVuZ3RoIChvciBhbiBleHBsaWNpdCBgc3RhcnRJbmRleGApLCBpbnRvIGFuIGFycmF5IHRoYXQgYmVjb21lc1xuLy8gdGhlIGxhc3QgYXJndW1lbnQuIFNpbWlsYXIgdG8gRVM24oCZcyBcInJlc3QgcGFyYW1ldGVyXCIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXN0QXJndW1lbnRzKGZ1bmMsIHN0YXJ0SW5kZXgpIHtcbiAgc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXggPT0gbnVsbCA/IGZ1bmMubGVuZ3RoIC0gMSA6ICtzdGFydEluZGV4O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KGFyZ3VtZW50cy5sZW5ndGggLSBzdGFydEluZGV4LCAwKSxcbiAgICAgICAgcmVzdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHJlc3RbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4ICsgc3RhcnRJbmRleF07XG4gICAgfVxuICAgIHN3aXRjaCAoc3RhcnRJbmRleCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIHJlc3QpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3VtZW50c1swXSwgcmVzdCk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIHJlc3QpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IEFycmF5KHN0YXJ0SW5kZXggKyAxKTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBzdGFydEluZGV4OyBpbmRleCsrKSB7XG4gICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgfVxuICAgIGFyZ3Nbc3RhcnRJbmRleF0gPSByZXN0O1xuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xufVxuIiwiLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmopO1xufVxuIiwiLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNOdWxsKG9iaikge1xuICByZXR1cm4gb2JqID09PSBudWxsO1xufVxuIiwiLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1VuZGVmaW5lZChvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xufVxuIiwiaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNCb29sZWFuKG9iaikge1xuICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG4iLCIvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbn1cbiIsImltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBJbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBgdG9TdHJpbmdgLWJhc2VkIHR5cGUgdGVzdGVyLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFnVGVzdGVyKG5hbWUpIHtcbiAgdmFyIHRhZyA9ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gdGFnO1xuICB9O1xufVxuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ1N0cmluZycpO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ051bWJlcicpO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ0RhdGUnKTtcbiIsImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdSZWdFeHAnKTtcbiIsImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdFcnJvcicpO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ1N5bWJvbCcpO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ0FycmF5QnVmZmVyJyk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5pbXBvcnQgeyByb290IH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG52YXIgaXNGdW5jdGlvbiA9IHRhZ1Rlc3RlcignRnVuY3Rpb24nKTtcblxuLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIGB0eXBlb2ZgIGJ1Z3MgaW4gb2xkXG4vLyB2OCwgSUUgMTEgKCMxNjIxKSwgU2FmYXJpIDggKCMxOTI5KSwgYW5kIFBoYW50b21KUyAoIzIyMzYpLlxudmFyIG5vZGVsaXN0ID0gcm9vdC5kb2N1bWVudCAmJiByb290LmRvY3VtZW50LmNoaWxkTm9kZXM7XG5pZiAodHlwZW9mIC8uLyAhPSAnZnVuY3Rpb24nICYmIHR5cGVvZiBJbnQ4QXJyYXkgIT0gJ29iamVjdCcgJiYgdHlwZW9mIG5vZGVsaXN0ICE9ICdmdW5jdGlvbicpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicgfHwgZmFsc2U7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRnVuY3Rpb247XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignT2JqZWN0Jyk7XG4iLCJpbXBvcnQgeyBzdXBwb3J0c0RhdGFWaWV3IH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGhhc09iamVjdFRhZyBmcm9tICcuL19oYXNPYmplY3RUYWcuanMnO1xuXG4vLyBJbiBJRSAxMCAtIEVkZ2UgMTMsIGBEYXRhVmlld2AgaGFzIHN0cmluZyB0YWcgYCdbb2JqZWN0IE9iamVjdF0nYC5cbi8vIEluIElFIDExLCB0aGUgbW9zdCBjb21tb24gYW1vbmcgdGhlbSwgdGhpcyBwcm9ibGVtIGFsc28gYXBwbGllcyB0b1xuLy8gYE1hcGAsIGBXZWFrTWFwYCBhbmQgYFNldGAuXG5leHBvcnQgdmFyIGhhc1N0cmluZ1RhZ0J1ZyA9IChcbiAgICAgIHN1cHBvcnRzRGF0YVZpZXcgJiYgaGFzT2JqZWN0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoOCkpKVxuICAgICksXG4gICAgaXNJRTExID0gKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnICYmIGhhc09iamVjdFRhZyhuZXcgTWFwKSk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzQXJyYXlCdWZmZXIgZnJvbSAnLi9pc0FycmF5QnVmZmVyLmpzJztcbmltcG9ydCB7IGhhc1N0cmluZ1RhZ0J1ZyB9IGZyb20gJy4vX3N0cmluZ1RhZ0J1Zy5qcyc7XG5cbnZhciBpc0RhdGFWaWV3ID0gdGFnVGVzdGVyKCdEYXRhVmlldycpO1xuXG4vLyBJbiBJRSAxMCAtIEVkZ2UgMTMsIHdlIG5lZWQgYSBkaWZmZXJlbnQgaGV1cmlzdGljXG4vLyB0byBkZXRlcm1pbmUgd2hldGhlciBhbiBvYmplY3QgaXMgYSBgRGF0YVZpZXdgLlxuZnVuY3Rpb24gaWUxMElzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBpc0Z1bmN0aW9uKG9iai5nZXRJbnQ4KSAmJiBpc0FycmF5QnVmZmVyKG9iai5idWZmZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoaGFzU3RyaW5nVGFnQnVnID8gaWUxMElzRGF0YVZpZXcgOiBpc0RhdGFWaWV3KTtcbiIsImltcG9ydCB7IG5hdGl2ZUlzQXJyYXkgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbi8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4vLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgYEFycmF5LmlzQXJyYXlgLlxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlSXNBcnJheSB8fCB0YWdUZXN0ZXIoJ0FycmF5Jyk7XG4iLCJpbXBvcnQgeyBoYXNPd25Qcm9wZXJ0eSB9IGZyb20gJy4vX3NldHVwLmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciBga2V5YCBpcyBhbiBvd24gcHJvcGVydHkgbmFtZSBvZiBgb2JqYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5pbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5cbnZhciBpc0FyZ3VtZW50cyA9IHRhZ1Rlc3RlcignQXJndW1lbnRzJyk7XG5cbi8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUgPCA5KSwgd2hlcmVcbi8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4oZnVuY3Rpb24oKSB7XG4gIGlmICghaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIGlzQXJndW1lbnRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gaGFzKG9iaiwgJ2NhbGxlZScpO1xuICAgIH07XG4gIH1cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwiaW1wb3J0IHsgX2lzRmluaXRlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Zpbml0ZShvYmopIHtcbiAgcmV0dXJuICFpc1N5bWJvbChvYmopICYmIF9pc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xufVxuIiwiaW1wb3J0IHsgX2lzTmFOIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzTnVtYmVyIGZyb20gJy4vaXNOdW1iZXIuanMnO1xuXG4vLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc05hTihvYmopIHtcbiAgcmV0dXJuIGlzTnVtYmVyKG9iaikgJiYgX2lzTmFOKG9iaik7XG59XG4iLCIvLyBQcmVkaWNhdGUtZ2VuZXJhdGluZyBmdW5jdGlvbi4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBNQVhfQVJSQVlfSU5ERVggfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIENvbW1vbiBpbnRlcm5hbCBsb2dpYyBmb3IgYGlzQXJyYXlMaWtlYCBhbmQgYGlzQnVmZmVyTGlrZWAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTaXplUHJvcGVydHlDaGVjayhnZXRTaXplUHJvcGVydHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgc2l6ZVByb3BlcnR5ID0gZ2V0U2l6ZVByb3BlcnR5KGNvbGxlY3Rpb24pO1xuICAgIHJldHVybiB0eXBlb2Ygc2l6ZVByb3BlcnR5ID09ICdudW1iZXInICYmIHNpemVQcm9wZXJ0eSA+PSAwICYmIHNpemVQcm9wZXJ0eSA8PSBNQVhfQVJSQVlfSU5ERVg7XG4gIH1cbn1cbiIsIi8vIEludGVybmFsIGhlbHBlciB0byBnZW5lcmF0ZSBhIGZ1bmN0aW9uIHRvIG9idGFpbiBwcm9wZXJ0eSBga2V5YCBmcm9tIGBvYmpgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd1Byb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW2tleV07XG4gIH07XG59XG4iLCJpbXBvcnQgc2hhbGxvd1Byb3BlcnR5IGZyb20gJy4vX3NoYWxsb3dQcm9wZXJ0eS5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBvYnRhaW4gdGhlIGBieXRlTGVuZ3RoYCBwcm9wZXJ0eSBvZiBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBzaGFsbG93UHJvcGVydHkoJ2J5dGVMZW5ndGgnKTtcbiIsImltcG9ydCBjcmVhdGVTaXplUHJvcGVydHlDaGVjayBmcm9tICcuL19jcmVhdGVTaXplUHJvcGVydHlDaGVjay5qcyc7XG5pbXBvcnQgZ2V0Qnl0ZUxlbmd0aCBmcm9tICcuL19nZXRCeXRlTGVuZ3RoLmpzJztcblxuLy8gSW50ZXJuYWwgaGVscGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHdlIHNob3VsZCBzcGVuZCBleHRlbnNpdmUgY2hlY2tzIGFnYWluc3Rcbi8vIGBBcnJheUJ1ZmZlcmAgZXQgYWwuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaXplUHJvcGVydHlDaGVjayhnZXRCeXRlTGVuZ3RoKTtcbiIsImltcG9ydCB7IHN1cHBvcnRzQXJyYXlCdWZmZXIsIG5hdGl2ZUlzVmlldywgdG9TdHJpbmcgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgaXNEYXRhVmlldyBmcm9tICcuL2lzRGF0YVZpZXcuanMnO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gJy4vY29uc3RhbnQuanMnO1xuaW1wb3J0IGlzQnVmZmVyTGlrZSBmcm9tICcuL19pc0J1ZmZlckxpa2UuanMnO1xuXG4vLyBJcyBhIGdpdmVuIHZhbHVlIGEgdHlwZWQgYXJyYXk/XG52YXIgdHlwZWRBcnJheVBhdHRlcm4gPSAvXFxbb2JqZWN0ICgoSXxVaSludCg4fDE2fDMyKXxGbG9hdCgzMnw2NCl8VWludDhDbGFtcGVkfEJpZyhJfFVpKW50NjQpQXJyYXlcXF0vO1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KG9iaikge1xuICAvLyBgQXJyYXlCdWZmZXIuaXNWaWV3YCBpcyB0aGUgbW9zdCBmdXR1cmUtcHJvb2YsIHNvIHVzZSBpdCB3aGVuIGF2YWlsYWJsZS5cbiAgLy8gT3RoZXJ3aXNlLCBmYWxsIGJhY2sgb24gdGhlIGFib3ZlIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgcmV0dXJuIG5hdGl2ZUlzVmlldyA/IChuYXRpdmVJc1ZpZXcob2JqKSAmJiAhaXNEYXRhVmlldyhvYmopKSA6XG4gICAgICAgICAgICAgICAgaXNCdWZmZXJMaWtlKG9iaikgJiYgdHlwZWRBcnJheVBhdHRlcm4udGVzdCh0b1N0cmluZy5jYWxsKG9iaikpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdXBwb3J0c0FycmF5QnVmZmVyID8gaXNUeXBlZEFycmF5IDogY29uc3RhbnQoZmFsc2UpO1xuIiwiaW1wb3J0IHNoYWxsb3dQcm9wZXJ0eSBmcm9tICcuL19zaGFsbG93UHJvcGVydHkuanMnO1xuXG4vLyBJbnRlcm5hbCBoZWxwZXIgdG8gb2J0YWluIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eSBvZiBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBzaGFsbG93UHJvcGVydHkoJ2xlbmd0aCcpO1xuIiwiaW1wb3J0IHsgbm9uRW51bWVyYWJsZVByb3BzLCBPYmpQcm90byB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBjcmVhdGUgYSBzaW1wbGUgbG9va3VwIHN0cnVjdHVyZS5cbi8vIGBjb2xsZWN0Tm9uRW51bVByb3BzYCB1c2VkIHRvIGRlcGVuZCBvbiBgXy5jb250YWluc2AsIGJ1dCB0aGlzIGxlZCB0b1xuLy8gY2lyY3VsYXIgaW1wb3J0cy4gYGVtdWxhdGVkU2V0YCBpcyBhIG9uZS1vZmYgc29sdXRpb24gdGhhdCBvbmx5IHdvcmtzIGZvclxuLy8gYXJyYXlzIG9mIHN0cmluZ3MuXG5mdW5jdGlvbiBlbXVsYXRlZFNldChrZXlzKSB7XG4gIHZhciBoYXNoID0ge307XG4gIGZvciAodmFyIGwgPSBrZXlzLmxlbmd0aCwgaSA9IDA7IGkgPCBsOyArK2kpIGhhc2hba2V5c1tpXV0gPSB0cnVlO1xuICByZXR1cm4ge1xuICAgIGNvbnRhaW5zOiBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGhhc2hba2V5XSA9PT0gdHJ1ZTsgfSxcbiAgICBwdXNoOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGhhc2hba2V5XSA9IHRydWU7XG4gICAgICByZXR1cm4ga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBJbnRlcm5hbCBoZWxwZXIuIENoZWNrcyBga2V5c2AgZm9yIHRoZSBwcmVzZW5jZSBvZiBrZXlzIGluIElFIDwgOSB0aGF0IHdvbid0XG4vLyBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC4gRXh0ZW5kcyBga2V5c2AgaW4gcGxhY2UgaWZcbi8vIG5lZWRlZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKSB7XG4gIGtleXMgPSBlbXVsYXRlZFNldChrZXlzKTtcbiAgdmFyIG5vbkVudW1JZHggPSBub25FbnVtZXJhYmxlUHJvcHMubGVuZ3RoO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7XG4gIHZhciBwcm90byA9IChpc0Z1bmN0aW9uKGNvbnN0cnVjdG9yKSAmJiBjb25zdHJ1Y3Rvci5wcm90b3R5cGUpIHx8IE9ialByb3RvO1xuXG4gIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICB2YXIgcHJvcCA9ICdjb25zdHJ1Y3Rvcic7XG4gIGlmIChoYXMob2JqLCBwcm9wKSAmJiAha2V5cy5jb250YWlucyhwcm9wKSkga2V5cy5wdXNoKHByb3ApO1xuXG4gIHdoaWxlIChub25FbnVtSWR4LS0pIHtcbiAgICBwcm9wID0gbm9uRW51bWVyYWJsZVByb3BzW25vbkVudW1JZHhdO1xuICAgIGlmIChwcm9wIGluIG9iaiAmJiBvYmpbcHJvcF0gIT09IHByb3RvW3Byb3BdICYmICFrZXlzLmNvbnRhaW5zKHByb3ApKSB7XG4gICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgeyBuYXRpdmVLZXlzLCBoYXNFbnVtQnVnIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuaW1wb3J0IGNvbGxlY3ROb25FbnVtUHJvcHMgZnJvbSAnLi9fY29sbGVjdE5vbkVudW1Qcm9wcy5qcyc7XG5cbi8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbi8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2AuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlzKG9iaikge1xuICBpZiAoIWlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgaWYgKG5hdGl2ZUtleXMpIHJldHVybiBuYXRpdmVLZXlzKG9iaik7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChoYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgLy8gQWhlbSwgSUUgPCA5LlxuICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICByZXR1cm4ga2V5cztcbn1cbiIsImltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnLi9pc1N0cmluZy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbi8vIEFuIFwiZW1wdHlcIiBvYmplY3QgaGFzIG5vIGVudW1lcmFibGUgb3duLXByb3BlcnRpZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAvLyBTa2lwIHRoZSBtb3JlIGV4cGVuc2l2ZSBgdG9TdHJpbmdgLWJhc2VkIHR5cGUgY2hlY2tzIGlmIGBvYmpgIGhhcyBub1xuICAvLyBgLmxlbmd0aGAuXG4gIHZhciBsZW5ndGggPSBnZXRMZW5ndGgob2JqKTtcbiAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgKFxuICAgIGlzQXJyYXkob2JqKSB8fCBpc1N0cmluZyhvYmopIHx8IGlzQXJndW1lbnRzKG9iailcbiAgKSkgcmV0dXJuIGxlbmd0aCA9PT0gMDtcbiAgcmV0dXJuIGdldExlbmd0aChrZXlzKG9iaikpID09PSAwO1xufVxuIiwiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gUmV0dXJucyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgYXR0cnMpIHtcbiAgdmFyIF9rZXlzID0ga2V5cyhhdHRycyksIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gIWxlbmd0aDtcbiAgdmFyIG9iaiA9IE9iamVjdChvYmplY3QpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IF9rZXlzW2ldO1xuICAgIGlmIChhdHRyc1trZXldICE9PSBvYmpba2V5XSB8fCAhKGtleSBpbiBvYmopKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdCBjYW5cbi8vIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCBmdW5jdGlvbnMgYWRkZWRcbi8vIHRocm91Z2ggYF8ubWl4aW5gLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfKG9iaikge1xuICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgdGhpcy5fd3JhcHBlZCA9IG9iajtcbn1cblxuXy5WRVJTSU9OID0gVkVSU0lPTjtcblxuLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG5fLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbn07XG5cbi8vIFByb3ZpZGUgdW53cmFwcGluZyBwcm94aWVzIGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuLy8gc3VjaCBhcyBhcml0aG1ldGljIGFuZCBKU09OIHN0cmluZ2lmaWNhdGlvbi5cbl8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcblxuXy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFN0cmluZyh0aGlzLl93cmFwcGVkKTtcbn07XG4iLCJpbXBvcnQgZ2V0Qnl0ZUxlbmd0aCBmcm9tICcuL19nZXRCeXRlTGVuZ3RoLmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gd3JhcCBvciBzaGFsbG93LWNvcHkgYW4gQXJyYXlCdWZmZXIsXG4vLyB0eXBlZCBhcnJheSBvciBEYXRhVmlldyB0byBhIG5ldyB2aWV3LCByZXVzaW5nIHRoZSBidWZmZXIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0J1ZmZlclZpZXcoYnVmZmVyU291cmNlKSB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShcbiAgICBidWZmZXJTb3VyY2UuYnVmZmVyIHx8IGJ1ZmZlclNvdXJjZSxcbiAgICBidWZmZXJTb3VyY2UuYnl0ZU9mZnNldCB8fCAwLFxuICAgIGdldEJ5dGVMZW5ndGgoYnVmZmVyU291cmNlKVxuICApO1xufVxuIiwiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcbmltcG9ydCB7IHRvU3RyaW5nLCBTeW1ib2xQcm90byB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBnZXRCeXRlTGVuZ3RoIGZyb20gJy4vX2dldEJ5dGVMZW5ndGguanMnO1xuaW1wb3J0IGlzVHlwZWRBcnJheSBmcm9tICcuL2lzVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaGFzU3RyaW5nVGFnQnVnIH0gIGZyb20gJy4vX3N0cmluZ1RhZ0J1Zy5qcyc7XG5pbXBvcnQgaXNEYXRhVmlldyBmcm9tICcuL2lzRGF0YVZpZXcuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcbmltcG9ydCBoYXMgZnJvbSAnLi9faGFzLmpzJztcbmltcG9ydCB0b0J1ZmZlclZpZXcgZnJvbSAnLi9fdG9CdWZmZXJWaWV3LmpzJztcblxuLy8gV2UgdXNlIHRoaXMgc3RyaW5nIHR3aWNlLCBzbyBnaXZlIGl0IGEgbmFtZSBmb3IgbWluaWZpY2F0aW9uLlxudmFyIHRhZ0RhdGFWaWV3ID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBfLmlzRXF1YWxgLlxuZnVuY3Rpb24gZXEoYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cHM6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gIC8vIGBudWxsYCBvciBgdW5kZWZpbmVkYCBvbmx5IGVxdWFsIHRvIGl0c2VsZiAoc3RyaWN0IGNvbXBhcmlzb24pLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICBpZiAoYSAhPT0gYSkgcmV0dXJuIGIgIT09IGI7XG4gIC8vIEV4aGF1c3QgcHJpbWl0aXZlIGNoZWNrc1xuICB2YXIgdHlwZSA9IHR5cGVvZiBhO1xuICBpZiAodHlwZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZGVlcEVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKTtcbn1cblxuLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBfLmlzRXF1YWxgLlxuZnVuY3Rpb24gZGVlcEVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xuICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcbiAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAvLyBXb3JrIGFyb3VuZCBhIGJ1ZyBpbiBJRSAxMCAtIEVkZ2UgMTMuXG4gIGlmIChoYXNTdHJpbmdUYWdCdWcgJiYgY2xhc3NOYW1lID09ICdbb2JqZWN0IE9iamVjdF0nICYmIGlzRGF0YVZpZXcoYSkpIHtcbiAgICBpZiAoIWlzRGF0YVZpZXcoYikpIHJldHVybiBmYWxzZTtcbiAgICBjbGFzc05hbWUgPSB0YWdEYXRhVmlldztcbiAgfVxuICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgIC8vIFRoZXNlIHR5cGVzIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgIHJldHVybiAnJyArIGEgPT09ICcnICsgYjtcbiAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxuICAgICAgaWYgKCthICE9PSArYSkgcmV0dXJuICtiICE9PSArYjtcbiAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICBjYXNlICdbb2JqZWN0IFN5bWJvbF0nOlxuICAgICAgcmV0dXJuIFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChhKSA9PT0gU3ltYm9sUHJvdG8udmFsdWVPZi5jYWxsKGIpO1xuICAgIGNhc2UgJ1tvYmplY3QgQXJyYXlCdWZmZXJdJzpcbiAgICBjYXNlIHRhZ0RhdGFWaWV3OlxuICAgICAgLy8gQ29lcmNlIHRvIHR5cGVkIGFycmF5IHNvIHdlIGNhbiBmYWxsIHRocm91Z2guXG4gICAgICByZXR1cm4gZGVlcEVxKHRvQnVmZmVyVmlldyhhKSwgdG9CdWZmZXJWaWV3KGIpLCBhU3RhY2ssIGJTdGFjayk7XG4gIH1cblxuICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nO1xuICBpZiAoIWFyZUFycmF5cyAmJiBpc1R5cGVkQXJyYXkoYSkpIHtcbiAgICAgIHZhciBieXRlTGVuZ3RoID0gZ2V0Qnl0ZUxlbmd0aChhKTtcbiAgICAgIGlmIChieXRlTGVuZ3RoICE9PSBnZXRCeXRlTGVuZ3RoKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoYS5idWZmZXIgPT09IGIuYnVmZmVyICYmIGEuYnl0ZU9mZnNldCA9PT0gYi5ieXRlT2Zmc2V0KSByZXR1cm4gdHJ1ZTtcbiAgICAgIGFyZUFycmF5cyA9IHRydWU7XG4gIH1cbiAgaWYgKCFhcmVBcnJheXMpIHtcbiAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcyBvciBgQXJyYXlgc1xuICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShpc0Z1bmN0aW9uKGFDdG9yKSAmJiBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRnVuY3Rpb24oYkN0b3IpICYmIGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAoJ2NvbnN0cnVjdG9yJyBpbiBhICYmICdjb25zdHJ1Y3RvcicgaW4gYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cblxuICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgYVN0YWNrID0gYVN0YWNrIHx8IFtdO1xuICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgaWYgKGFTdGFja1tsZW5ndGhdID09PSBhKSByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT09IGI7XG4gIH1cblxuICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gIGFTdGFjay5wdXNoKGEpO1xuICBiU3RhY2sucHVzaChiKTtcblxuICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgaWYgKGFyZUFycmF5cykge1xuICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmICghZXEoYVtsZW5ndGhdLCBiW2xlbmd0aF0sIGFTdGFjaywgYlN0YWNrKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICB2YXIgX2tleXMgPSBrZXlzKGEpLCBrZXk7XG4gICAgbGVuZ3RoID0gX2tleXMubGVuZ3RoO1xuICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzIGJlZm9yZSBjb21wYXJpbmcgZGVlcCBlcXVhbGl0eS5cbiAgICBpZiAoa2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICBrZXkgPSBfa2V5c1tsZW5ndGhdO1xuICAgICAgaWYgKCEoaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gIGFTdGFjay5wb3AoKTtcbiAgYlN0YWNrLnBvcCgpO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0VxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGVxKGEsIGIpO1xufVxuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHsgaGFzRW51bUJ1ZyB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBjb2xsZWN0Tm9uRW51bVByb3BzIGZyb20gJy4vX2NvbGxlY3ROb25FbnVtUHJvcHMuanMnO1xuXG4vLyBSZXRyaWV2ZSBhbGwgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWxsS2V5cyhvYmopIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4gW107XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICAvLyBBaGVtLCBJRSA8IDkuXG4gIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwiaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBhbGxLZXlzIGZyb20gJy4vYWxsS2V5cy5qcyc7XG5cbi8vIFNpbmNlIHRoZSByZWd1bGFyIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCB0eXBlIHRlc3RzIGRvbid0IHdvcmsgZm9yXG4vLyBzb21lIHR5cGVzIGluIElFIDExLCB3ZSB1c2UgYSBmaW5nZXJwcmludGluZyBoZXVyaXN0aWMgaW5zdGVhZCwgYmFzZWRcbi8vIG9uIHRoZSBtZXRob2RzLiBJdCdzIG5vdCBncmVhdCwgYnV0IGl0J3MgdGhlIGJlc3Qgd2UgZ290LlxuLy8gVGhlIGZpbmdlcnByaW50IG1ldGhvZCBsaXN0cyBhcmUgZGVmaW5lZCBiZWxvdy5cbmV4cG9ydCBmdW5jdGlvbiBpZTExZmluZ2VycHJpbnQobWV0aG9kcykge1xuICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKG1ldGhvZHMpO1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYE1hcGAsIGBXZWFrTWFwYCBhbmQgYFNldGAgaGF2ZSBubyBlbnVtZXJhYmxlIGtleXMuXG4gICAgdmFyIGtleXMgPSBhbGxLZXlzKG9iaik7XG4gICAgaWYgKGdldExlbmd0aChrZXlzKSkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihvYmpbbWV0aG9kc1tpXV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIElmIHdlIGFyZSB0ZXN0aW5nIGFnYWluc3QgYFdlYWtNYXBgLCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0XG4gICAgLy8gYG9iamAgZG9lc24ndCBoYXZlIGEgYGZvckVhY2hgIG1ldGhvZCBpbiBvcmRlciB0byBkaXN0aW5ndWlzaFxuICAgIC8vIGl0IGZyb20gYSByZWd1bGFyIGBNYXBgLlxuICAgIHJldHVybiBtZXRob2RzICE9PSB3ZWFrTWFwTWV0aG9kcyB8fCAhaXNGdW5jdGlvbihvYmpbZm9yRWFjaE5hbWVdKTtcbiAgfTtcbn1cblxuLy8gSW4gdGhlIGludGVyZXN0IG9mIGNvbXBhY3QgbWluaWZpY2F0aW9uLCB3ZSB3cml0ZVxuLy8gZWFjaCBzdHJpbmcgaW4gdGhlIGZpbmdlcnByaW50cyBvbmx5IG9uY2UuXG52YXIgZm9yRWFjaE5hbWUgPSAnZm9yRWFjaCcsXG4gICAgaGFzTmFtZSA9ICdoYXMnLFxuICAgIGNvbW1vbkluaXQgPSBbJ2NsZWFyJywgJ2RlbGV0ZSddLFxuICAgIG1hcFRhaWwgPSBbJ2dldCcsIGhhc05hbWUsICdzZXQnXTtcblxuLy8gYE1hcGAsIGBXZWFrTWFwYCBhbmQgYFNldGAgZWFjaCBoYXZlIHNsaWdodGx5IGRpZmZlcmVudFxuLy8gY29tYmluYXRpb25zIG9mIHRoZSBhYm92ZSBzdWJsaXN0cy5cbmV4cG9ydCB2YXIgbWFwTWV0aG9kcyA9IGNvbW1vbkluaXQuY29uY2F0KGZvckVhY2hOYW1lLCBtYXBUYWlsKSxcbiAgICB3ZWFrTWFwTWV0aG9kcyA9IGNvbW1vbkluaXQuY29uY2F0KG1hcFRhaWwpLFxuICAgIHNldE1ldGhvZHMgPSBbJ2FkZCddLmNvbmNhdChjb21tb25Jbml0LCBmb3JFYWNoTmFtZSwgaGFzTmFtZSk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5pbXBvcnQgeyBpc0lFMTEgfSBmcm9tICcuL19zdHJpbmdUYWdCdWcuanMnO1xuaW1wb3J0IHsgaWUxMWZpbmdlcnByaW50LCBtYXBNZXRob2RzIH0gIGZyb20gJy4vX21ldGhvZEZpbmdlcnByaW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgaXNJRTExID8gaWUxMWZpbmdlcnByaW50KG1hcE1ldGhvZHMpIDogdGFnVGVzdGVyKCdNYXAnKTtcbiIsImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcbmltcG9ydCB7IGlzSUUxMSB9IGZyb20gJy4vX3N0cmluZ1RhZ0J1Zy5qcyc7XG5pbXBvcnQgeyBpZTExZmluZ2VycHJpbnQsIHdlYWtNYXBNZXRob2RzIH0gIGZyb20gJy4vX21ldGhvZEZpbmdlcnByaW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgaXNJRTExID8gaWUxMWZpbmdlcnByaW50KHdlYWtNYXBNZXRob2RzKSA6IHRhZ1Rlc3RlcignV2Vha01hcCcpO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IHsgaXNJRTExIH0gZnJvbSAnLi9fc3RyaW5nVGFnQnVnLmpzJztcbmltcG9ydCB7IGllMTFmaW5nZXJwcmludCwgc2V0TWV0aG9kcyB9ICBmcm9tICcuL19tZXRob2RGaW5nZXJwcmludC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGlzSUUxMSA/IGllMTFmaW5nZXJwcmludChzZXRNZXRob2RzKSA6IHRhZ1Rlc3RlcignU2V0Jyk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignV2Vha1NldCcpO1xuIiwiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsdWVzKG9iaikge1xuICB2YXIgX2tleXMgPSBrZXlzKG9iaik7XG4gIHZhciBsZW5ndGggPSBfa2V5cy5sZW5ndGg7XG4gIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFsdWVzW2ldID0gb2JqW19rZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuIiwiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4vLyBUaGUgb3Bwb3NpdGUgb2YgYF8ub2JqZWN0YCB3aXRoIG9uZSBhcmd1bWVudC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhaXJzKG9iaikge1xuICB2YXIgX2tleXMgPSBrZXlzKG9iaik7XG4gIHZhciBsZW5ndGggPSBfa2V5cy5sZW5ndGg7XG4gIHZhciBwYWlycyA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBwYWlyc1tpXSA9IFtfa2V5c1tpXSwgb2JqW19rZXlzW2ldXV07XG4gIH1cbiAgcmV0dXJuIHBhaXJzO1xufVxuIiwiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW52ZXJ0KG9iaikge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIHZhciBfa2V5cyA9IGtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W29ialtfa2V5c1tpXV1dID0gX2tleXNbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5cbi8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmopIHtcbiAgdmFyIG5hbWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gbmFtZXMuc29ydCgpO1xufVxuIiwiLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFzc2lnbmVyIGZ1bmN0aW9ucy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGtleXNGdW5jLCBkZWZhdWx0cykge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGRlZmF1bHRzKSBvYmogPSBPYmplY3Qob2JqKTtcbiAgICBpZiAobGVuZ3RoIDwgMiB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XSxcbiAgICAgICAgICBrZXlzID0ga2V5c0Z1bmMoc291cmNlKSxcbiAgICAgICAgICBsID0ga2V5cy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKCFkZWZhdWx0cyB8fCBvYmpba2V5XSA9PT0gdm9pZCAwKSBvYmpba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xufVxuIiwiaW1wb3J0IGNyZWF0ZUFzc2lnbmVyIGZyb20gJy4vX2NyZWF0ZUFzc2lnbmVyLmpzJztcbmltcG9ydCBhbGxLZXlzIGZyb20gJy4vYWxsS2V5cy5qcyc7XG5cbi8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQXNzaWduZXIoYWxsS2V5cyk7XG4iLCJpbXBvcnQgY3JlYXRlQXNzaWduZXIgZnJvbSAnLi9fY3JlYXRlQXNzaWduZXIuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gQXNzaWducyBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgb3duIHByb3BlcnRpZXMgaW4gdGhlIHBhc3NlZC1pblxuLy8gb2JqZWN0KHMpLlxuLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ24pXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcihrZXlzKTtcbiIsImltcG9ydCBjcmVhdGVBc3NpZ25lciBmcm9tICcuL19jcmVhdGVBc3NpZ25lci5qcyc7XG5pbXBvcnQgYWxsS2V5cyBmcm9tICcuL2FsbEtleXMuanMnO1xuXG4vLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQXNzaWduZXIoYWxsS2V5cywgdHJ1ZSk7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgeyBuYXRpdmVDcmVhdGUgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIENyZWF0ZSBhIG5ha2VkIGZ1bmN0aW9uIHJlZmVyZW5jZSBmb3Igc3Vycm9nYXRlLXByb3RvdHlwZS1zd2FwcGluZy5cbmZ1bmN0aW9uIGN0b3IoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpe307XG59XG5cbi8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYXNlQ3JlYXRlKHByb3RvdHlwZSkge1xuICBpZiAoIWlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkgcmV0dXJuIG5hdGl2ZUNyZWF0ZShwcm90b3R5cGUpO1xuICB2YXIgQ3RvciA9IGN0b3IoKTtcbiAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHZhciByZXN1bHQgPSBuZXcgQ3RvcjtcbiAgQ3Rvci5wcm90b3R5cGUgPSBudWxsO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IGJhc2VDcmVhdGUgZnJvbSAnLi9fYmFzZUNyZWF0ZS5qcyc7XG5pbXBvcnQgZXh0ZW5kT3duIGZyb20gJy4vZXh0ZW5kT3duLmpzJztcblxuLy8gQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBnaXZlbiBwcm90b3R5cGUgb2JqZWN0LlxuLy8gSWYgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBwcm92aWRlZCB0aGVuIHRoZXkgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vIGNyZWF0ZWQgb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcHMpIHtcbiAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgaWYgKHByb3BzKSBleHRlbmRPd24ocmVzdWx0LCBwcm9wcyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGV4dGVuZCBmcm9tICcuL2V4dGVuZC5qcyc7XG5cbi8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb25lKG9iaikge1xuICBpZiAoIWlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gIHJldHVybiBpc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IGV4dGVuZCh7fSwgb2JqKTtcbn1cbiIsIi8vIEludm9rZXMgYGludGVyY2VwdG9yYCB3aXRoIHRoZSBgb2JqYCBhbmQgdGhlbiByZXR1cm5zIGBvYmpgLlxuLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4vLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRhcChvYmosIGludGVyY2VwdG9yKSB7XG4gIGludGVyY2VwdG9yKG9iaik7XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLy8gTm9ybWFsaXplIGEgKGRlZXApIHByb3BlcnR5IGBwYXRoYCB0byBhcnJheS5cbi8vIExpa2UgYF8uaXRlcmF0ZWVgLCB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBjdXN0b21pemVkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9QYXRoKHBhdGgpIHtcbiAgcmV0dXJuIGlzQXJyYXkocGF0aCkgPyBwYXRoIDogW3BhdGhdO1xufVxuXy50b1BhdGggPSB0b1BhdGg7XG4iLCJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0ICcuL3RvUGF0aC5qcyc7XG5cbi8vIEludGVybmFsIHdyYXBwZXIgZm9yIGBfLnRvUGF0aGAgdG8gZW5hYmxlIG1pbmlmaWNhdGlvbi5cbi8vIFNpbWlsYXIgdG8gYGNiYCBmb3IgYF8uaXRlcmF0ZWVgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9QYXRoKHBhdGgpIHtcbiAgcmV0dXJuIF8udG9QYXRoKHBhdGgpO1xufVxuIiwiLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gb2J0YWluIGEgbmVzdGVkIHByb3BlcnR5IGluIGBvYmpgIGFsb25nIGBwYXRoYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBHZXQob2JqLCBwYXRoKSB7XG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBvYmogPSBvYmpbcGF0aFtpXV07XG4gIH1cbiAgcmV0dXJuIGxlbmd0aCA/IG9iaiA6IHZvaWQgMDtcbn1cbiIsImltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcbmltcG9ydCBkZWVwR2V0IGZyb20gJy4vX2RlZXBHZXQuanMnO1xuaW1wb3J0IGlzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xuXG4vLyBHZXQgdGhlIHZhbHVlIG9mIHRoZSAoZGVlcCkgcHJvcGVydHkgb24gYHBhdGhgIGZyb20gYG9iamVjdGAuXG4vLyBJZiBhbnkgcHJvcGVydHkgaW4gYHBhdGhgIGRvZXMgbm90IGV4aXN0IG9yIGlmIHRoZSB2YWx1ZSBpc1xuLy8gYHVuZGVmaW5lZGAsIHJldHVybiBgZGVmYXVsdFZhbHVlYCBpbnN0ZWFkLlxuLy8gVGhlIGBwYXRoYCBpcyBub3JtYWxpemVkIHRocm91Z2ggYF8udG9QYXRoYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgdmFsdWUgPSBkZWVwR2V0KG9iamVjdCwgdG9QYXRoKHBhdGgpKTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xufVxuIiwiaW1wb3J0IF9oYXMgZnJvbSAnLi9faGFzLmpzJztcbmltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcblxuLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseSBvblxuLy8gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS4gVW5saWtlIHRoZSBpbnRlcm5hbCBgaGFzYFxuLy8gZnVuY3Rpb24sIHRoaXMgcHVibGljIHZlcnNpb24gY2FuIGFsc28gdHJhdmVyc2UgbmVzdGVkIHByb3BlcnRpZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYXMob2JqLCBwYXRoKSB7XG4gIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBwYXRoW2ldO1xuICAgIGlmICghX2hhcyhvYmosIGtleSkpIHJldHVybiBmYWxzZTtcbiAgICBvYmogPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gISFsZW5ndGg7XG59XG4iLCIvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuIiwiaW1wb3J0IGV4dGVuZE93biBmcm9tICcuL2V4dGVuZE93bi5qcyc7XG5pbXBvcnQgaXNNYXRjaCBmcm9tICcuL2lzTWF0Y2guanMnO1xuXG4vLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2Zcbi8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF0Y2hlcihhdHRycykge1xuICBhdHRycyA9IGV4dGVuZE93bih7fSwgYXR0cnMpO1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGlzTWF0Y2gob2JqLCBhdHRycyk7XG4gIH07XG59XG4iLCJpbXBvcnQgZGVlcEdldCBmcm9tICcuL19kZWVwR2V0LmpzJztcbmltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcblxuLy8gQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gcGFzc2VkIGFuIG9iamVjdCwgd2lsbCB0cmF2ZXJzZSB0aGF0IG9iamVjdOKAmXNcbi8vIHByb3BlcnRpZXMgZG93biB0aGUgZ2l2ZW4gYHBhdGhgLCBzcGVjaWZpZWQgYXMgYW4gYXJyYXkgb2Yga2V5cyBvciBpbmRpY2VzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGRlZXBHZXQob2JqLCBwYXRoKTtcbiAgfTtcbn1cbiIsIi8vIEludGVybmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlZmZpY2llbnQgKGZvciBjdXJyZW50IGVuZ2luZXMpIHZlcnNpb25cbi8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4vLyBmdW5jdGlvbnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcHRpbWl6ZUNiKGZ1bmMsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICBzd2l0Y2ggKGFyZ0NvdW50ID09IG51bGwgPyAzIDogYXJnQ291bnQpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgfTtcbiAgICAvLyBUaGUgMi1hcmd1bWVudCBjYXNlIGlzIG9taXR0ZWQgYmVjYXVzZSB3ZeKAmXJlIG5vdCB1c2luZyBpdC5cbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9O1xuICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsImltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSAnLi9tYXRjaGVyLmpzJztcbmltcG9ydCBwcm9wZXJ0eSBmcm9tICcuL3Byb3BlcnR5LmpzJztcbmltcG9ydCBvcHRpbWl6ZUNiIGZyb20gJy4vX29wdGltaXplQ2IuanMnO1xuXG4vLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBlYWNoXG4vLyBlbGVtZW50IGluIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBkZXNpcmVkIHJlc3VsdCDigJQgZWl0aGVyIGBfLmlkZW50aXR5YCxcbi8vIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gIGlmIChpc09iamVjdCh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpKSByZXR1cm4gbWF0Y2hlcih2YWx1ZSk7XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG4iLCJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0IGJhc2VJdGVyYXRlZSBmcm9tICcuL19iYXNlSXRlcmF0ZWUuanMnO1xuXG4vLyBFeHRlcm5hbCB3cmFwcGVyIGZvciBvdXIgY2FsbGJhY2sgZ2VuZXJhdG9yLiBVc2VycyBtYXkgY3VzdG9taXplXG4vLyBgXy5pdGVyYXRlZWAgaWYgdGhleSB3YW50IGFkZGl0aW9uYWwgcHJlZGljYXRlL2l0ZXJhdGVlIHNob3J0aGFuZCBzdHlsZXMuXG4vLyBUaGlzIGFic3RyYWN0aW9uIGhpZGVzIHRoZSBpbnRlcm5hbC1vbmx5IGBhcmdDb3VudGAgYXJndW1lbnQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpdGVyYXRlZSh2YWx1ZSwgY29udGV4dCkge1xuICByZXR1cm4gYmFzZUl0ZXJhdGVlKHZhbHVlLCBjb250ZXh0LCBJbmZpbml0eSk7XG59XG5fLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4iLCJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0IGJhc2VJdGVyYXRlZSBmcm9tICcuL19iYXNlSXRlcmF0ZWUuanMnO1xuaW1wb3J0IGl0ZXJhdGVlIGZyb20gJy4vaXRlcmF0ZWUuanMnO1xuXG4vLyBUaGUgZnVuY3Rpb24gd2UgY2FsbCBpbnRlcm5hbGx5IHRvIGdlbmVyYXRlIGEgY2FsbGJhY2suIEl0IGludm9rZXNcbi8vIGBfLml0ZXJhdGVlYCBpZiBvdmVycmlkZGVuLCBvdGhlcndpc2UgYGJhc2VJdGVyYXRlZWAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgaWYgKF8uaXRlcmF0ZWUgIT09IGl0ZXJhdGVlKSByZXR1cm4gXy5pdGVyYXRlZSh2YWx1ZSwgY29udGV4dCk7XG4gIHJldHVybiBiYXNlSXRlcmF0ZWUodmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KTtcbn1cbiIsImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBgaXRlcmF0ZWVgIHRvIGVhY2ggZWxlbWVudCBvZiBgb2JqYC5cbi8vIEluIGNvbnRyYXN0IHRvIGBfLm1hcGAgaXQgcmV0dXJucyBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBPYmplY3Qob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgdmFyIF9rZXlzID0ga2V5cyhvYmopLFxuICAgICAgbGVuZ3RoID0gX2tleXMubGVuZ3RoLFxuICAgICAgcmVzdWx0cyA9IHt9O1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBfa2V5c1tpbmRleF07XG4gICAgcmVzdWx0c1tjdXJyZW50S2V5XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsIi8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9uLiBPZnRlbiB1c2VmdWwgb3V0c2lkZSBvZiBVbmRlcnNjb3JlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpe31cbiIsImltcG9ydCBub29wIGZyb20gJy4vbm9vcC5qcyc7XG5pbXBvcnQgZ2V0IGZyb20gJy4vZ2V0LmpzJztcblxuLy8gR2VuZXJhdGVzIGEgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gb2JqZWN0IHRoYXQgcmV0dXJucyBhIGdpdmVuIHByb3BlcnR5LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcGVydHlPZihvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gbm9vcDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICByZXR1cm4gZ2V0KG9iaiwgcGF0aCk7XG4gIH07XG59XG4iLCJpbXBvcnQgb3B0aW1pemVDYiBmcm9tICcuL19vcHRpbWl6ZUNiLmpzJztcblxuLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICByZXR1cm4gYWNjdW07XG59XG4iLCIvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YCAoaW5jbHVzaXZlKS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCkge1xuICBpZiAobWF4ID09IG51bGwpIHtcbiAgICBtYXggPSBtaW47XG4gICAgbWluID0gMDtcbiAgfVxuICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbn1cbiIsIi8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci5cbmV4cG9ydCBkZWZhdWx0IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59O1xuIiwiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gSW50ZXJuYWwgaGVscGVyIHRvIGdlbmVyYXRlIGZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5nc1xuLy8gdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFc2NhcGVyKG1hcCkge1xuICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIG1hcFttYXRjaF07XG4gIH07XG4gIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZC5cbiAgdmFyIHNvdXJjZSA9ICcoPzonICsga2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgdmFyIHRlc3RSZWdleHAgPSBSZWdFeHAoc291cmNlKTtcbiAgdmFyIHJlcGxhY2VSZWdleHAgPSBSZWdFeHAoc291cmNlLCAnZycpO1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgc3RyaW5nID0gc3RyaW5nID09IG51bGwgPyAnJyA6ICcnICsgc3RyaW5nO1xuICAgIHJldHVybiB0ZXN0UmVnZXhwLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlcGxhY2VSZWdleHAsIGVzY2FwZXIpIDogc3RyaW5nO1xuICB9O1xufVxuIiwiLy8gSW50ZXJuYWwgbGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOydcbn07XG4iLCJpbXBvcnQgY3JlYXRlRXNjYXBlciBmcm9tICcuL19jcmVhdGVFc2NhcGVyLmpzJztcbmltcG9ydCBlc2NhcGVNYXAgZnJvbSAnLi9fZXNjYXBlTWFwLmpzJztcblxuLy8gRnVuY3Rpb24gZm9yIGVzY2FwaW5nIHN0cmluZ3MgdG8gSFRNTCBpbnRlcnBvbGF0aW9uLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRXNjYXBlcihlc2NhcGVNYXApO1xuIiwiaW1wb3J0IGNyZWF0ZUVzY2FwZXIgZnJvbSAnLi9fY3JlYXRlRXNjYXBlci5qcyc7XG5pbXBvcnQgdW5lc2NhcGVNYXAgZnJvbSAnLi9fdW5lc2NhcGVNYXAuanMnO1xuXG4vLyBGdW5jdGlvbiBmb3IgdW5lc2NhcGluZyBzdHJpbmdzIGZyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRXNjYXBlcih1bmVzY2FwZU1hcCk7XG4iLCJpbXBvcnQgaW52ZXJ0IGZyb20gJy4vaW52ZXJ0LmpzJztcbmltcG9ydCBlc2NhcGVNYXAgZnJvbSAnLi9fZXNjYXBlTWFwLmpzJztcblxuLy8gSW50ZXJuYWwgbGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciB1bmVzY2FwaW5nLlxuZXhwb3J0IGRlZmF1bHQgaW52ZXJ0KGVzY2FwZU1hcCk7XG4iLCJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuXG4vLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMuIENoYW5nZSB0aGVcbi8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbmV4cG9ydCBkZWZhdWx0IF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgZXZhbHVhdGU6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gIGludGVycG9sYXRlOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgZXNjYXBlOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xufTtcbiIsImltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzLmpzJztcbmltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgJy4vdGVtcGxhdGVTZXR0aW5ncy5qcyc7XG5cbi8vIFdoZW4gY3VzdG9taXppbmcgYF8udGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXG52YXIgbm9NYXRjaCA9IC8oLileLztcblxuLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbi8vIHN0cmluZyBsaXRlcmFsLlxudmFyIGVzY2FwZXMgPSB7XG4gIFwiJ1wiOiBcIidcIixcbiAgJ1xcXFwnOiAnXFxcXCcsXG4gICdcXHInOiAncicsXG4gICdcXG4nOiAnbicsXG4gICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgJ1xcdTIwMjknOiAndTIwMjknXG59O1xuXG52YXIgZXNjYXBlUmVnRXhwID0gL1xcXFx8J3xcXHJ8XFxufFxcdTIwMjh8XFx1MjAyOS9nO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKG1hdGNoKSB7XG4gIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbn1cblxuLy8gSW4gb3JkZXIgdG8gcHJldmVudCB0aGlyZC1wYXJ0eSBjb2RlIGluamVjdGlvbiB0aHJvdWdoXG4vLyBgXy50ZW1wbGF0ZVNldHRpbmdzLnZhcmlhYmxlYCwgd2UgdGVzdCBpdCBhZ2FpbnN0IHRoZSBmb2xsb3dpbmcgcmVndWxhclxuLy8gZXhwcmVzc2lvbi4gSXQgaXMgaW50ZW50aW9uYWxseSBhIGJpdCBtb3JlIGxpYmVyYWwgdGhhbiBqdXN0IG1hdGNoaW5nIHZhbGlkXG4vLyBpZGVudGlmaWVycywgYnV0IHN0aWxsIHByZXZlbnRzIHBvc3NpYmxlIGxvb3Bob2xlcyB0aHJvdWdoIGRlZmF1bHRzIG9yXG4vLyBkZXN0cnVjdHVyaW5nIGFzc2lnbm1lbnQuXG52YXIgYmFyZUlkZW50aWZpZXIgPSAvXlxccyooXFx3fFxcJCkrXFxzKiQvO1xuXG4vLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4vLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgaWYgKCFzZXR0aW5ncyAmJiBvbGRTZXR0aW5ncykgc2V0dGluZ3MgPSBvbGRTZXR0aW5ncztcbiAgc2V0dGluZ3MgPSBkZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gIHZhciBtYXRjaGVyID0gUmVnRXhwKFtcbiAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAoc2V0dGluZ3MuaW50ZXJwb2xhdGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICB0ZXh0LnJlcGxhY2UobWF0Y2hlciwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZSwgaW50ZXJwb2xhdGUsIGV2YWx1YXRlLCBvZmZzZXQpIHtcbiAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgZXNjYXBlQ2hhcik7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICBpZiAoZXNjYXBlKSB7XG4gICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGVzY2FwZSArIFwiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXFxuJ1wiO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgIH0gZWxzZSBpZiAoZXZhbHVhdGUpIHtcbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgfVxuXG4gICAgLy8gQWRvYmUgVk1zIG5lZWQgdGhlIG1hdGNoIHJldHVybmVkIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3Qgb2Zmc2V0LlxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG4gIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGU7XG4gIGlmIChhcmd1bWVudCkge1xuICAgIC8vIEluc3VyZSBhZ2FpbnN0IHRoaXJkLXBhcnR5IGNvZGUgaW5qZWN0aW9uLiAoQ1ZFLTIwMjEtMjMzNTgpXG4gICAgaWYgKCFiYXJlSWRlbnRpZmllci50ZXN0KGFyZ3VtZW50KSkgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3ZhcmlhYmxlIGlzIG5vdCBhIGJhcmUgaWRlbnRpZmllcjogJyArIGFyZ3VtZW50XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG4gICAgYXJndW1lbnQgPSAnb2JqJztcbiAgfVxuXG4gIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgdmFyIHJlbmRlcjtcbiAgdHJ5IHtcbiAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oYXJndW1lbnQsICdfJywgc291cmNlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGUuc291cmNlID0gc291cmNlO1xuICAgIHRocm93IGU7XG4gIH1cblxuICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICB9O1xuXG4gIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcblxuLy8gVHJhdmVyc2VzIHRoZSBjaGlsZHJlbiBvZiBgb2JqYCBhbG9uZyBgcGF0aGAuIElmIGEgY2hpbGQgaXMgYSBmdW5jdGlvbiwgaXRcbi8vIGlzIGludm9rZWQgd2l0aCBpdHMgcGFyZW50IGFzIGNvbnRleHQuIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaW5hbFxuLy8gY2hpbGQsIG9yIGBmYWxsYmFja2AgaWYgYW55IGNoaWxkIGlzIHVuZGVmaW5lZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc3VsdChvYmosIHBhdGgsIGZhbGxiYWNrKSB7XG4gIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjay5jYWxsKG9iaikgOiBmYWxsYmFjaztcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtwYXRoW2ldXTtcbiAgICBpZiAocHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9wID0gZmFsbGJhY2s7XG4gICAgICBpID0gbGVuZ3RoOyAvLyBFbnN1cmUgd2UgZG9uJ3QgY29udGludWUgaXRlcmF0aW5nLlxuICAgIH1cbiAgICBvYmogPSBpc0Z1bmN0aW9uKHByb3ApID8gcHJvcC5jYWxsKG9iaikgOiBwcm9wO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG4iLCIvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLlxuLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbnZhciBpZENvdW50ZXIgPSAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gIHZhciBpZCA9ICsraWRDb3VudGVyICsgJyc7XG4gIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xufVxuIiwiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcblxuLy8gU3RhcnQgY2hhaW5pbmcgYSB3cmFwcGVkIFVuZGVyc2NvcmUgb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hhaW4ob2JqKSB7XG4gIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcbiAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuIiwiaW1wb3J0IGJhc2VDcmVhdGUgZnJvbSAnLi9fYmFzZUNyZWF0ZS5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8vIEludGVybmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYHNvdXJjZUZ1bmNgIGJvdW5kIHRvIGBjb250ZXh0YCB3aXRoIG9wdGlvbmFsXG4vLyBgYXJnc2AuIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvciBvciBhcyBhXG4vLyBub3JtYWwgZnVuY3Rpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleGVjdXRlQm91bmQoc291cmNlRnVuYywgYm91bmRGdW5jLCBjb250ZXh0LCBjYWxsaW5nQ29udGV4dCwgYXJncykge1xuICBpZiAoIShjYWxsaW5nQ29udGV4dCBpbnN0YW5jZW9mIGJvdW5kRnVuYykpIHJldHVybiBzb3VyY2VGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB2YXIgc2VsZiA9IGJhc2VDcmVhdGUoc291cmNlRnVuYy5wcm90b3R5cGUpO1xuICB2YXIgcmVzdWx0ID0gc291cmNlRnVuYy5hcHBseShzZWxmLCBhcmdzKTtcbiAgaWYgKGlzT2JqZWN0KHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gIHJldHVybiBzZWxmO1xufVxuIiwiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBleGVjdXRlQm91bmQgZnJvbSAnLi9fZXhlY3V0ZUJvdW5kLmpzJztcbmltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5cbi8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbi8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBgX2AgYWN0c1xuLy8gYXMgYSBwbGFjZWhvbGRlciBieSBkZWZhdWx0LCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlXG4vLyBwcmUtZmlsbGVkLiBTZXQgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgZm9yIGEgY3VzdG9tIHBsYWNlaG9sZGVyIGFyZ3VtZW50LlxudmFyIHBhcnRpYWwgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIGJvdW5kQXJncykge1xuICB2YXIgcGxhY2Vob2xkZXIgPSBwYXJ0aWFsLnBsYWNlaG9sZGVyO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcG9zaXRpb24gPSAwLCBsZW5ndGggPSBib3VuZEFyZ3MubGVuZ3RoO1xuICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYm91bmRBcmdzW2ldID09PSBwbGFjZWhvbGRlciA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTtcbiAgICB9XG4gICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XG4gICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7XG4gIH07XG4gIHJldHVybiBib3VuZDtcbn0pO1xuXG5wYXJ0aWFsLnBsYWNlaG9sZGVyID0gXztcbmV4cG9ydCBkZWZhdWx0IHBhcnRpYWw7XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBleGVjdXRlQm91bmQgZnJvbSAnLi9fZXhlY3V0ZUJvdW5kLmpzJztcblxuLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4vLyBvcHRpb25hbGx5KS5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJncykge1xuICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICB2YXIgYm91bmQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGNhbGxBcmdzKSB7XG4gICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoY2FsbEFyZ3MpKTtcbiAgfSk7XG4gIHJldHVybiBib3VuZDtcbn0pO1xuIiwiaW1wb3J0IGNyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrIGZyb20gJy4vX2NyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrLmpzJztcbmltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcblxuLy8gSW50ZXJuYWwgaGVscGVyIGZvciBjb2xsZWN0aW9uIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBjb2xsZWN0aW9uXG4vLyBzaG91bGQgYmUgaXRlcmF0ZWQgYXMgYW4gYXJyYXkgb3IgYXMgYW4gb2JqZWN0LlxuLy8gUmVsYXRlZDogaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvbGVuZ3RoXG4vLyBBdm9pZHMgYSB2ZXJ5IG5hc3R5IGlPUyA4IEpJVCBidWcgb24gQVJNLTY0LiAjMjA5NFxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2l6ZVByb3BlcnR5Q2hlY2soZ2V0TGVuZ3RoKTtcbiIsImltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuXG4vLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiBhIHJlY3Vyc2l2ZSBgZmxhdHRlbmAgZnVuY3Rpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGF0dGVuKGlucHV0LCBkZXB0aCwgc3RyaWN0LCBvdXRwdXQpIHtcbiAgb3V0cHV0ID0gb3V0cHV0IHx8IFtdO1xuICBpZiAoIWRlcHRoICYmIGRlcHRoICE9PSAwKSB7XG4gICAgZGVwdGggPSBJbmZpbml0eTtcbiAgfSBlbHNlIGlmIChkZXB0aCA8PSAwKSB7XG4gICAgcmV0dXJuIG91dHB1dC5jb25jYXQoaW5wdXQpO1xuICB9XG4gIHZhciBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGlucHV0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgLy8gRmxhdHRlbiBjdXJyZW50IGxldmVsIG9mIGFycmF5IG9yIGFyZ3VtZW50cyBvYmplY3QuXG4gICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgIGZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgc3RyaWN0LCBvdXRwdXQpO1xuICAgICAgICBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGogPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChqIDwgbGVuKSBvdXRwdXRbaWR4KytdID0gdmFsdWVbaisrXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFzdHJpY3QpIHtcbiAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cbiIsImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuL19mbGF0dGVuLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vYmluZC5qcyc7XG5cbi8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzXG4vLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICBrZXlzID0gZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpO1xuICB2YXIgaW5kZXggPSBrZXlzLmxlbmd0aDtcbiAgaWYgKGluZGV4IDwgMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgIG9ialtrZXldID0gYmluZChvYmpba2V5XSwgb2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufSk7XG4iLCJpbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5cbi8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIGhhc2hlcikge1xuICB2YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgdmFyIGFkZHJlc3MgPSAnJyArIChoYXNoZXIgPyBoYXNoZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleSk7XG4gICAgaWYgKCFoYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XG4gIH07XG4gIG1lbW9pemUuY2FjaGUgPSB7fTtcbiAgcmV0dXJuIG1lbW9pemU7XG59XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuXG4vLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4vLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gIH0sIHdhaXQpO1xufSk7XG4iLCJpbXBvcnQgcGFydGlhbCBmcm9tICcuL3BhcnRpYWwuanMnO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4vZGVsYXkuanMnO1xuaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcblxuLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4vLyBjbGVhcmVkLlxuZXhwb3J0IGRlZmF1bHQgcGFydGlhbChkZWxheSwgXywgMSk7XG4iLCJpbXBvcnQgbm93IGZyb20gJy4vbm93LmpzJztcblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4vLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbi8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcbi8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4vLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIHRpbWVvdXQsIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cbiAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IG5vdygpO1xuICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gIH07XG5cbiAgdmFyIHRocm90dGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBfbm93ID0gbm93KCk7XG4gICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IF9ub3c7XG4gICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAoX25vdyAtIHByZXZpb3VzKTtcbiAgICBjb250ZXh0ID0gdGhpcztcbiAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICBpZiAodGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMgPSBfbm93O1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHRocm90dGxlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgcHJldmlvdXMgPSAwO1xuICAgIHRpbWVvdXQgPSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHRocm90dGxlZDtcbn1cbiIsImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgbm93IGZyb20gJy4vbm93LmpzJztcblxuLy8gV2hlbiBhIHNlcXVlbmNlIG9mIGNhbGxzIG9mIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBlbmRzLCB0aGUgYXJndW1lbnRcbi8vIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZC4gVGhlIGVuZCBvZiBhIHNlcXVlbmNlIGlzIGRlZmluZWQgYnkgdGhlIGB3YWl0YFxuLy8gcGFyYW1ldGVyLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRoZSBhcmd1bWVudCBmdW5jdGlvbiB3aWxsIGJlXG4vLyB0cmlnZ2VyZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2VxdWVuY2UgaW5zdGVhZCBvZiBhdCB0aGUgZW5kLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIHZhciB0aW1lb3V0LCBwcmV2aW91cywgYXJncywgcmVzdWx0LCBjb250ZXh0O1xuXG4gIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXNzZWQgPSBub3coKSAtIHByZXZpb3VzO1xuICAgIGlmICh3YWl0ID4gcGFzc2VkKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIHBhc3NlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKCFpbW1lZGlhdGUpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCBiZWNhdXNlIGBmdW5jYCBjYW4gcmVjdXJzaXZlbHkgaW52b2tlIGBkZWJvdW5jZWRgLlxuICAgICAgaWYgKCF0aW1lb3V0KSBhcmdzID0gY29udGV4dCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHZhciBkZWJvdW5jZWQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKF9hcmdzKSB7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IF9hcmdzO1xuICAgIHByZXZpb3VzID0gbm93KCk7XG4gICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICBpZiAoaW1tZWRpYXRlKSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICBkZWJvdW5jZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBhcmdzID0gY29udGV4dCA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cbiIsImltcG9ydCBwYXJ0aWFsIGZyb20gJy4vcGFydGlhbC5qcyc7XG5cbi8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdyYXAoZnVuYywgd3JhcHBlcikge1xuICByZXR1cm4gcGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbn1cbiIsIi8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIGEgbGlzdCBvZiBmdW5jdGlvbnMsIGVhY2hcbi8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wb3NlKCkge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIHN0YXJ0ID0gYXJncy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGkgPSBzdGFydDtcbiAgICB2YXIgcmVzdWx0ID0gYXJnc1tzdGFydF0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuIiwiLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIG9uIGFuZCBhZnRlciB0aGUgTnRoIGNhbGwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZnRlcih0aW1lcywgZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbn1cbiIsIi8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCB1cCB0byAoYnV0IG5vdCBpbmNsdWRpbmcpIHRoZVxuLy8gTnRoIGNhbGwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiZWZvcmUodGltZXMsIGZ1bmMpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmICh0aW1lcyA8PSAxKSBmdW5jID0gbnVsbDtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn1cbiIsImltcG9ydCBwYXJ0aWFsIGZyb20gJy4vcGFydGlhbC5qcyc7XG5pbXBvcnQgYmVmb3JlIGZyb20gJy4vYmVmb3JlLmpzJztcblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4vLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuZXhwb3J0IGRlZmF1bHQgcGFydGlhbChiZWZvcmUsIDIpO1xuIiwiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIFJldHVybnMgdGhlIGZpcnN0IGtleSBvbiBhbiBvYmplY3QgdGhhdCBwYXNzZXMgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZEtleShvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICB2YXIgX2tleXMgPSBrZXlzKG9iaiksIGtleTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gX2tleXNbaV07XG4gICAgaWYgKHByZWRpY2F0ZShvYmpba2V5XSwga2V5LCBvYmopKSByZXR1cm4ga2V5O1xuICB9XG59XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuXG4vLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKGRpcikge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgdmFyIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfTtcbn1cbiIsImltcG9ydCBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciBmcm9tICcuL19jcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlci5qcyc7XG5cbi8vIFJldHVybnMgdGhlIGZpcnN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4iLCJpbXBvcnQgY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIgZnJvbSAnLi9fY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIuanMnO1xuXG4vLyBSZXR1cm5zIHRoZSBsYXN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoLTEpO1xuIiwiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcblxuLy8gVXNlIGEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IHRoZSBzbWFsbGVzdCBpbmRleCBhdCB3aGljaFxuLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gIHZhciB2YWx1ZSA9IGl0ZXJhdGVlKG9iaik7XG4gIHZhciBsb3cgPSAwLCBoaWdoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICB2YXIgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkO1xuICB9XG4gIHJldHVybiBsb3c7XG59XG4iLCJpbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBpc05hTiBmcm9tICcuL2lzTmFOLmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgdGhlIGBfLmluZGV4T2ZgIGFuZCBgXy5sYXN0SW5kZXhPZmAgZnVuY3Rpb25zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlSW5kZXhGaW5kZXIoZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlkeCkge1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGRpciA+IDApIHtcbiAgICAgICAgaSA9IGlkeCA+PSAwID8gaWR4IDogTWF0aC5tYXgoaWR4ICsgbGVuZ3RoLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzb3J0ZWRJbmRleCAmJiBpZHggJiYgbGVuZ3RoKSB7XG4gICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICByZXR1cm4gYXJyYXlbaWR4XSA9PT0gaXRlbSA/IGlkeCA6IC0xO1xuICAgIH1cbiAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgaWR4ID0gcHJlZGljYXRlRmluZChzbGljZS5jYWxsKGFycmF5LCBpLCBsZW5ndGgpLCBpc05hTik7XG4gICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgfVxuICAgIGZvciAoaWR4ID0gZGlyID4gMCA/IGkgOiBsZW5ndGggLSAxOyBpZHggPj0gMCAmJiBpZHggPCBsZW5ndGg7IGlkeCArPSBkaXIpIHtcbiAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG59XG4iLCJpbXBvcnQgc29ydGVkSW5kZXggZnJvbSAnLi9zb3J0ZWRJbmRleC5qcyc7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4LmpzJztcbmltcG9ydCBjcmVhdGVJbmRleEZpbmRlciBmcm9tICcuL19jcmVhdGVJbmRleEZpbmRlci5qcyc7XG5cbi8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbi8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4vLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbi8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVJbmRleEZpbmRlcigxLCBmaW5kSW5kZXgsIHNvcnRlZEluZGV4KTtcbiIsImltcG9ydCBmaW5kTGFzdEluZGV4IGZyb20gJy4vZmluZExhc3RJbmRleC5qcyc7XG5pbXBvcnQgY3JlYXRlSW5kZXhGaW5kZXIgZnJvbSAnLi9fY3JlYXRlSW5kZXhGaW5kZXIuanMnO1xuXG4vLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBsYXN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbi8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVJbmRleEZpbmRlcigtMSwgZmluZExhc3RJbmRleCk7XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGZpbmRJbmRleCBmcm9tICcuL2ZpbmRJbmRleC5qcyc7XG5pbXBvcnQgZmluZEtleSBmcm9tICcuL2ZpbmRLZXkuanMnO1xuXG4vLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gIHZhciBrZXlGaW5kZXIgPSBpc0FycmF5TGlrZShvYmopID8gZmluZEluZGV4IDogZmluZEtleTtcbiAgdmFyIGtleSA9IGtleUZpbmRlcihvYmosIHByZWRpY2F0ZSwgY29udGV4dCk7XG4gIGlmIChrZXkgIT09IHZvaWQgMCAmJiBrZXkgIT09IC0xKSByZXR1cm4gb2JqW2tleV07XG59XG4iLCJpbXBvcnQgZmluZCBmcm9tICcuL2ZpbmQuanMnO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSAnLi9tYXRjaGVyLmpzJztcblxuLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgXy5maW5kYDogZ2V0dGluZyB0aGUgZmlyc3Rcbi8vIG9iamVjdCBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZFdoZXJlKG9iaiwgYXR0cnMpIHtcbiAgcmV0dXJuIGZpbmQob2JqLCBtYXRjaGVyKGF0dHJzKSk7XG59XG4iLCJpbXBvcnQgb3B0aW1pemVDYiBmcm9tICcuL19vcHRpbWl6ZUNiLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBUaGUgY29ybmVyc3RvbmUgZm9yIGNvbGxlY3Rpb24gZnVuY3Rpb25zLCBhbiBgZWFjaGBcbi8vIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbFxuLy8gc3BhcnNlIGFycmF5LWxpa2VzIGFzIGlmIHRoZXkgd2VyZSBkZW5zZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVhY2gob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICB2YXIgaSwgbGVuZ3RoO1xuICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgX2tleXMgPSBrZXlzKG9iaik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gX2tleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGl0ZXJhdGVlKG9ialtfa2V5c1tpXV0sIF9rZXlzW2ldLCBvYmopO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuIiwiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcChvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICB2YXIgX2tleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBrZXlzKG9iaiksXG4gICAgICBsZW5ndGggPSAoX2tleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIHZhciBjdXJyZW50S2V5ID0gX2tleXMgPyBfa2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuaW1wb3J0IG9wdGltaXplQ2IgZnJvbSAnLi9fb3B0aW1pemVDYi5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBjcmVhdGUgYSByZWR1Y2luZyBmdW5jdGlvbiwgaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XG4gIC8vIFdyYXAgY29kZSB0aGF0IHJlYXNzaWducyBhcmd1bWVudCB2YXJpYWJsZXMgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0aGFuXG4gIC8vIHRoZSBvbmUgdGhhdCBhY2Nlc3NlcyBgYXJndW1lbnRzLmxlbmd0aGAgdG8gYXZvaWQgYSBwZXJmIGhpdC4gKCMxOTkxKVxuICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGluaXRpYWwpIHtcbiAgICB2YXIgX2tleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBrZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChfa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICBtZW1vID0gb2JqW19rZXlzID8gX2tleXNbaW5kZXhdIDogaW5kZXhdO1xuICAgICAgaW5kZXggKz0gZGlyO1xuICAgIH1cbiAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IF9rZXlzID8gX2tleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+PSAzO1xuICAgIHJldHVybiByZWR1Y2VyKG9iaiwgb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCksIG1lbW8sIGluaXRpYWwpO1xuICB9O1xufVxuIiwiaW1wb3J0IGNyZWF0ZVJlZHVjZSBmcm9tICcuL19jcmVhdGVSZWR1Y2UuanMnO1xuXG4vLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4vLyBvciBgZm9sZGxgLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmVkdWNlKDEpO1xuIiwiaW1wb3J0IGNyZWF0ZVJlZHVjZSBmcm9tICcuL19jcmVhdGVSZWR1Y2UuanMnO1xuXG4vLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJlZHVjZSgtMSk7XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGVhY2ggZnJvbSAnLi9lYWNoLmpzJztcblxuLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbHRlcihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdHM7XG59XG4iLCJpbXBvcnQgZmlsdGVyIGZyb20gJy4vZmlsdGVyLmpzJztcbmltcG9ydCBuZWdhdGUgZnJvbSAnLi9uZWdhdGUuanMnO1xuaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcblxuLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlamVjdChvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICByZXR1cm4gZmlsdGVyKG9iaiwgbmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbn1cbiIsImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBwYXNzIGEgdHJ1dGggdGVzdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV2ZXJ5KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gIHZhciBfa2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIGtleXMob2JqKSxcbiAgICAgIGxlbmd0aCA9IChfa2V5cyB8fCBvYmopLmxlbmd0aDtcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIHZhciBjdXJyZW50S2V5ID0gX2tleXMgPyBfa2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgcGFzc2VzIGEgdHJ1dGggdGVzdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvbWUob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgdmFyIF9rZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYga2V5cyhvYmopLFxuICAgICAgbGVuZ3RoID0gKF9rZXlzIHx8IG9iaikubGVuZ3RoO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBfa2V5cyA/IF9rZXlzW2luZGV4XSA6IGluZGV4O1xuICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IHZhbHVlcyBmcm9tICcuL3ZhbHVlcy5qcyc7XG5pbXBvcnQgaW5kZXhPZiBmcm9tICcuL2luZGV4T2YuanMnO1xuXG4vLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIGl0ZW0gKHVzaW5nIGA9PT1gKS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKG9iaiwgaXRlbSwgZnJvbUluZGV4LCBndWFyZCkge1xuICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IHZhbHVlcyhvYmopO1xuICBpZiAodHlwZW9mIGZyb21JbmRleCAhPSAnbnVtYmVyJyB8fCBndWFyZCkgZnJvbUluZGV4ID0gMDtcbiAgcmV0dXJuIGluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XG59XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBtYXAgZnJvbSAnLi9tYXAuanMnO1xuaW1wb3J0IGRlZXBHZXQgZnJvbSAnLi9fZGVlcEdldC5qcyc7XG5pbXBvcnQgdG9QYXRoIGZyb20gJy4vX3RvUGF0aC5qcyc7XG5cbi8vIEludm9rZSBhIG1ldGhvZCAod2l0aCBhcmd1bWVudHMpIG9uIGV2ZXJ5IGl0ZW0gaW4gYSBjb2xsZWN0aW9uLlxuZXhwb3J0IGRlZmF1bHQgcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIHBhdGgsIGFyZ3MpIHtcbiAgdmFyIGNvbnRleHRQYXRoLCBmdW5jO1xuICBpZiAoaXNGdW5jdGlvbihwYXRoKSkge1xuICAgIGZ1bmMgPSBwYXRoO1xuICB9IGVsc2Uge1xuICAgIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gICAgY29udGV4dFBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcbiAgICBwYXRoID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBtYXAob2JqLCBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGZ1bmM7XG4gICAgaWYgKCFtZXRob2QpIHtcbiAgICAgIGlmIChjb250ZXh0UGF0aCAmJiBjb250ZXh0UGF0aC5sZW5ndGgpIHtcbiAgICAgICAgY29udGV4dCA9IGRlZXBHZXQoY29udGV4dCwgY29udGV4dFBhdGgpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgIG1ldGhvZCA9IGNvbnRleHRbcGF0aF07XG4gICAgfVxuICAgIHJldHVybiBtZXRob2QgPT0gbnVsbCA/IG1ldGhvZCA6IG1ldGhvZC5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCBtYXAgZnJvbSAnLi9tYXAuanMnO1xuaW1wb3J0IHByb3BlcnR5IGZyb20gJy4vcHJvcGVydHkuanMnO1xuXG4vLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBfLm1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwbHVjayhvYmosIGtleSkge1xuICByZXR1cm4gbWFwKG9iaiwgcHJvcGVydHkoa2V5KSk7XG59XG4iLCJpbXBvcnQgZmlsdGVyIGZyb20gJy4vZmlsdGVyLmpzJztcbmltcG9ydCBtYXRjaGVyIGZyb20gJy4vbWF0Y2hlci5qcyc7XG5cbi8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYF8uZmlsdGVyYDogc2VsZWN0aW5nIG9ubHlcbi8vIG9iamVjdHMgY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdoZXJlKG9iaiwgYXR0cnMpIHtcbiAgcmV0dXJuIGZpbHRlcihvYmosIG1hdGNoZXIoYXR0cnMpKTtcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcbmltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXgob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gIGlmIChpdGVyYXRlZSA9PSBudWxsIHx8ICh0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkpIHtcbiAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogdmFsdWVzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHYsIGluZGV4LCBsaXN0KSB7XG4gICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHYsIGluZGV4LCBsaXN0KTtcbiAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCAoY29tcHV0ZWQgPT09IC1JbmZpbml0eSAmJiByZXN1bHQgPT09IC1JbmZpbml0eSkpIHtcbiAgICAgICAgcmVzdWx0ID0gdjtcbiAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcbmltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW4ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCAodHlwZW9mIGl0ZXJhdGVlID09ICdudW1iZXInICYmIHR5cGVvZiBvYmpbMF0gIT0gJ29iamVjdCcgJiYgb2JqICE9IG51bGwpKSB7XG4gICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IHZhbHVlcyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgPCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2LCBpbmRleCwgbGlzdCkge1xuICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgKGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSkge1xuICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJy4vaXNTdHJpbmcuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBtYXAgZnJvbSAnLi9tYXAuanMnO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHZhbHVlcyBmcm9tICcuL3ZhbHVlcy5qcyc7XG5cbi8vIFNhZmVseSBjcmVhdGUgYSByZWFsLCBsaXZlIGFycmF5IGZyb20gYW55dGhpbmcgaXRlcmFibGUuXG52YXIgcmVTdHJTeW1ib2wgPSAvW15cXHVkODAwLVxcdWRmZmZdfFtcXHVkODAwLVxcdWRiZmZdW1xcdWRjMDAtXFx1ZGZmZl18W1xcdWQ4MDAtXFx1ZGZmZl0vZztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIGlmICghb2JqKSByZXR1cm4gW107XG4gIGlmIChpc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gIGlmIChpc1N0cmluZyhvYmopKSB7XG4gICAgLy8gS2VlcCBzdXJyb2dhdGUgcGFpciBjaGFyYWN0ZXJzIHRvZ2V0aGVyLlxuICAgIHJldHVybiBvYmoubWF0Y2gocmVTdHJTeW1ib2wpO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZShvYmopKSByZXR1cm4gbWFwKG9iaiwgaWRlbnRpdHkpO1xuICByZXR1cm4gdmFsdWVzKG9iaik7XG59XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IHZhbHVlcyBmcm9tICcuL3ZhbHVlcy5qcyc7XG5pbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgcmFuZG9tIGZyb20gJy4vcmFuZG9tLmpzJztcbmltcG9ydCB0b0FycmF5IGZyb20gJy4vdG9BcnJheS5qcyc7XG5cbi8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbi8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuXG4vLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2FtcGxlKG9iaiwgbiwgZ3VhcmQpIHtcbiAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gdmFsdWVzKG9iaik7XG4gICAgcmV0dXJuIG9ialtyYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcbiAgfVxuICB2YXIgc2FtcGxlID0gdG9BcnJheShvYmopO1xuICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKHNhbXBsZSk7XG4gIG4gPSBNYXRoLm1heChNYXRoLm1pbihuLCBsZW5ndGgpLCAwKTtcbiAgdmFyIGxhc3QgPSBsZW5ndGggLSAxO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbjsgaW5kZXgrKykge1xuICAgIHZhciByYW5kID0gcmFuZG9tKGluZGV4LCBsYXN0KTtcbiAgICB2YXIgdGVtcCA9IHNhbXBsZVtpbmRleF07XG4gICAgc2FtcGxlW2luZGV4XSA9IHNhbXBsZVtyYW5kXTtcbiAgICBzYW1wbGVbcmFuZF0gPSB0ZW1wO1xuICB9XG4gIHJldHVybiBzYW1wbGUuc2xpY2UoMCwgbik7XG59XG4iLCJpbXBvcnQgc2FtcGxlIGZyb20gJy4vc2FtcGxlLmpzJztcblxuLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaHVmZmxlKG9iaikge1xuICByZXR1cm4gc2FtcGxlKG9iaiwgSW5maW5pdHkpO1xufVxuIiwiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBwbHVjayBmcm9tICcuL3BsdWNrLmpzJztcbmltcG9ydCBtYXAgZnJvbSAnLi9tYXAuanMnO1xuXG4vLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0ZWUuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb3J0Qnkob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgaW5kZXggPSAwO1xuICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgcmV0dXJuIHBsdWNrKG1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGxpc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgaW5kZXg6IGluZGV4KyssXG4gICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGtleSwgbGlzdClcbiAgICB9O1xuICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICB9KSwgJ3ZhbHVlJyk7XG59XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGVhY2ggZnJvbSAnLi9lYWNoLmpzJztcblxuLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBmb3IgYWdncmVnYXRlIFwiZ3JvdXAgYnlcIiBvcGVyYXRpb25zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3JvdXAoYmVoYXZpb3IsIHBhcnRpdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSBwYXJ0aXRpb24gPyBbW10sIFtdXSA6IHt9O1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIHZhciBrZXkgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIG9iaik7XG4gICAgICBiZWhhdmlvcihyZXN1bHQsIHZhbHVlLCBrZXkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgZ3JvdXAgZnJvbSAnLi9fZ3JvdXAuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuXG4vLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4vLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbmV4cG9ydCBkZWZhdWx0IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICBpZiAoaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7IGVsc2UgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xufSk7XG4iLCJpbXBvcnQgZ3JvdXAgZnJvbSAnLi9fZ3JvdXAuanMnO1xuXG4vLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYF8uZ3JvdXBCeWAsIGJ1dCBmb3Jcbi8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbmV4cG9ydCBkZWZhdWx0IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICByZXN1bHRba2V5XSA9IHZhbHVlO1xufSk7XG4iLCJpbXBvcnQgZ3JvdXAgZnJvbSAnLi9fZ3JvdXAuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuXG4vLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3Ncbi8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuLy8gY3JpdGVyaW9uLlxuZXhwb3J0IGRlZmF1bHQgZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gIGlmIChoYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbn0pO1xuIiwiaW1wb3J0IGdyb3VwIGZyb20gJy4vX2dyb3VwLmpzJztcblxuLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBwYXNzIHRoZSBnaXZlblxuLy8gdHJ1dGggdGVzdCwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHBhc3MgdGhlIHRydXRoIHRlc3QuXG5leHBvcnQgZGVmYXVsdCBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBwYXNzKSB7XG4gIHJlc3VsdFtwYXNzID8gMCA6IDFdLnB1c2godmFsdWUpO1xufSwgdHJ1ZSk7XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYSBjb2xsZWN0aW9uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2l6ZShvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iaikgPyBvYmoubGVuZ3RoIDoga2V5cyhvYmopLmxlbmd0aDtcbn1cbiIsIi8vIEludGVybmFsIGBfLnBpY2tgIGhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgd2hldGhlciBga2V5YCBpcyBhbiBlbnVtZXJhYmxlXG4vLyBwcm9wZXJ0eSBuYW1lIG9mIGBvYmpgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2V5SW5PYmoodmFsdWUsIGtleSwgb2JqKSB7XG4gIHJldHVybiBrZXkgaW4gb2JqO1xufVxuIiwiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgb3B0aW1pemVDYiBmcm9tICcuL19vcHRpbWl6ZUNiLmpzJztcbmltcG9ydCBhbGxLZXlzIGZyb20gJy4vYWxsS2V5cy5qcyc7XG5pbXBvcnQga2V5SW5PYmogZnJvbSAnLi9fa2V5SW5PYmouanMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5cbi8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIGFsbG93ZWQgcHJvcGVydGllcy5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gIHZhciByZXN1bHQgPSB7fSwgaXRlcmF0ZWUgPSBrZXlzWzBdO1xuICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gIGlmIChpc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwga2V5c1sxXSk7XG4gICAga2V5cyA9IGFsbEtleXMob2JqKTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlZSA9IGtleUluT2JqO1xuICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgb2JqID0gT2JqZWN0KG9iaik7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBuZWdhdGUgZnJvbSAnLi9uZWdhdGUuanMnO1xuaW1wb3J0IG1hcCBmcm9tICcuL21hcC5qcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuL19mbGF0dGVuLmpzJztcbmltcG9ydCBjb250YWlucyBmcm9tICcuL2NvbnRhaW5zLmpzJztcbmltcG9ydCBwaWNrIGZyb20gJy4vcGljay5qcyc7XG5cbi8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBkaXNhbGxvd2VkIHByb3BlcnRpZXMuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICB2YXIgaXRlcmF0ZWUgPSBrZXlzWzBdLCBjb250ZXh0O1xuICBpZiAoaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICBpdGVyYXRlZSA9IG5lZ2F0ZShpdGVyYXRlZSk7XG4gICAgaWYgKGtleXMubGVuZ3RoID4gMSkgY29udGV4dCA9IGtleXNbMV07XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IG1hcChmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSksIFN0cmluZyk7XG4gICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXR1cm4gIWNvbnRhaW5zKGtleXMsIGtleSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbn0pO1xuIiwiaW1wb3J0IHsgc2xpY2UgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbi8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0aWFsKGFycmF5LCBuLCBndWFyZCkge1xuICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gKG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKSkpO1xufVxuIiwiaW1wb3J0IGluaXRpYWwgZnJvbSAnLi9pbml0aWFsLmpzJztcblxuLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOXG4vLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpcnN0KGFycmF5LCBuLCBndWFyZCkge1xuICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gbiA9PSBudWxsIHx8IGd1YXJkID8gdm9pZCAwIDogW107XG4gIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcbiAgcmV0dXJuIGluaXRpYWwoYXJyYXksIGFycmF5Lmxlbmd0aCAtIG4pO1xufVxuIiwiaW1wb3J0IHsgc2xpY2UgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBgYXJyYXlgLiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuLy8gdGhlIGBhcmd1bWVudHNgIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVybiB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGVcbi8vIGBhcnJheWAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXN0KGFycmF5LCBuLCBndWFyZCkge1xuICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xufVxuIiwiaW1wb3J0IHJlc3QgZnJvbSAnLi9yZXN0LmpzJztcblxuLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuLy8gdmFsdWVzIGluIHRoZSBhcnJheS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhc3QoYXJyYXksIG4sIGd1YXJkKSB7XG4gIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8IDEpIHJldHVybiBuID09IG51bGwgfHwgZ3VhcmQgPyB2b2lkIDAgOiBbXTtcbiAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xufVxuIiwiaW1wb3J0IGZpbHRlciBmcm9tICcuL2ZpbHRlci5qcyc7XG5cbi8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgcmV0dXJuIGZpbHRlcihhcnJheSwgQm9vbGVhbik7XG59XG4iLCJpbXBvcnQgX2ZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5cbi8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciB1cCB0byBgZGVwdGhgLlxuLy8gUGFzc2luZyBgdHJ1ZWAgb3IgYGZhbHNlYCBhcyBgZGVwdGhgIG1lYW5zIGAxYCBvciBgSW5maW5pdHlgLCByZXNwZWN0aXZlbHkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGF0dGVuKGFycmF5LCBkZXB0aCkge1xuICByZXR1cm4gX2ZsYXR0ZW4oYXJyYXksIGRlcHRoLCBmYWxzZSk7XG59XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5pbXBvcnQgZmlsdGVyIGZyb20gJy4vZmlsdGVyLmpzJztcbmltcG9ydCBjb250YWlucyBmcm9tICcuL2NvbnRhaW5zLmpzJztcblxuLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuLy8gT25seSB0aGUgZWxlbWVudHMgcHJlc2VudCBpbiBqdXN0IHRoZSBmaXJzdCBhcnJheSB3aWxsIHJlbWFpbi5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIHJlc3QpIHtcbiAgcmVzdCA9IGZsYXR0ZW4ocmVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gIHJldHVybiBmaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICByZXR1cm4gIWNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgZGlmZmVyZW5jZSBmcm9tICcuL2RpZmZlcmVuY2UuanMnO1xuXG4vLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIG90aGVyQXJyYXlzKSB7XG4gIHJldHVybiBkaWZmZXJlbmNlKGFycmF5LCBvdGhlckFycmF5cyk7XG59KTtcbiIsImltcG9ydCBpc0Jvb2xlYW4gZnJvbSAnLi9pc0Jvb2xlYW4uanMnO1xuaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCBjb250YWlucyBmcm9tICcuL2NvbnRhaW5zLmpzJztcblxuLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbi8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS5cbi8vIFRoZSBmYXN0ZXIgYWxnb3JpdGhtIHdpbGwgbm90IHdvcmsgd2l0aCBhbiBpdGVyYXRlZSBpZiB0aGUgaXRlcmF0ZWVcbi8vIGlzIG5vdCBhIG9uZS10by1vbmUgZnVuY3Rpb24sIHNvIHByb3ZpZGluZyBhbiBpdGVyYXRlZSB3aWxsIGRpc2FibGVcbi8vIHRoZSBmYXN0ZXIgYWxnb3JpdGhtLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pcShhcnJheSwgaXNTb3J0ZWQsIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gIGlmICghaXNCb29sZWFuKGlzU29ydGVkKSkge1xuICAgIGNvbnRleHQgPSBpdGVyYXRlZTtcbiAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgIGlzU29ydGVkID0gZmFsc2U7XG4gIH1cbiAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBzZWVuID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpXSxcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlLCBpLCBhcnJheSkgOiB2YWx1ZTtcbiAgICBpZiAoaXNTb3J0ZWQgJiYgIWl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIWkgfHwgc2VlbiAhPT0gY29tcHV0ZWQpIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICB9IGVsc2UgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIWNvbnRhaW5zKHNlZW4sIGNvbXB1dGVkKSkge1xuICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghY29udGFpbnMocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgdW5pcSBmcm9tICcuL3VuaXEuanMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5cbi8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5cykge1xuICByZXR1cm4gdW5pcShmbGF0dGVuKGFycmF5cywgdHJ1ZSwgdHJ1ZSkpO1xufSk7XG4iLCJpbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi9jb250YWlucy5qcyc7XG5cbi8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbi8vIHBhc3NlZC1pbiBhcnJheXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnRlcnNlY3Rpb24oYXJyYXkpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgIGlmIChjb250YWlucyhyZXN1bHQsIGl0ZW0pKSBjb250aW51ZTtcbiAgICB2YXIgajtcbiAgICBmb3IgKGogPSAxOyBqIDwgYXJnc0xlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoIWNvbnRhaW5zKGFyZ3VtZW50c1tqXSwgaXRlbSkpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBtYXggZnJvbSAnLi9tYXguanMnO1xuaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuaW1wb3J0IHBsdWNrIGZyb20gJy4vcGx1Y2suanMnO1xuXG4vLyBDb21wbGVtZW50IG9mIHppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuLy8gZWFjaCBhcnJheSdzIGVsZW1lbnRzIG9uIHNoYXJlZCBpbmRpY2VzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IChhcnJheSAmJiBtYXgoYXJyYXksIGdldExlbmd0aCkubGVuZ3RoKSB8fCAwO1xuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IHBsdWNrKGFycmF5LCBpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgdW56aXAgZnJvbSAnLi91bnppcC5qcyc7XG5cbi8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbi8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuZXhwb3J0IGRlZmF1bHQgcmVzdEFyZ3VtZW50cyh1bnppcCk7XG4iLCJpbXBvcnQgZ2V0TGVuZ3RoICBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuXG4vLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4vLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2Zcbi8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy4gUGFzc2luZyBieSBwYWlycyBpcyB0aGUgcmV2ZXJzZSBvZiBgXy5wYWlyc2AuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvYmplY3QobGlzdCwgdmFsdWVzKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChsaXN0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHZhbHVlcykge1xuICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbi8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgaWYgKHN0b3AgPT0gbnVsbCkge1xuICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuICBpZiAoIXN0ZXApIHtcbiAgICBzdGVwID0gc3RvcCA8IHN0YXJ0ID8gLTEgOiAxO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTtcblxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrLCBzdGFydCArPSBzdGVwKSB7XG4gICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwiaW1wb3J0IHsgc2xpY2UgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIENodW5rIGEgc2luZ2xlIGFycmF5IGludG8gbXVsdGlwbGUgYXJyYXlzLCBlYWNoIGNvbnRhaW5pbmcgYGNvdW50YCBvciBmZXdlclxuLy8gaXRlbXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaHVuayhhcnJheSwgY291bnQpIHtcbiAgaWYgKGNvdW50ID09IG51bGwgfHwgY291bnQgPCAxKSByZXR1cm4gW107XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0LnB1c2goc2xpY2UuY2FsbChhcnJheSwgaSwgaSArPSBjb3VudCkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaGFpblJlc3VsdChpbnN0YW5jZSwgb2JqKSB7XG4gIHJldHVybiBpbnN0YW5jZS5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbn1cbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICcuL2Z1bmN0aW9ucy5qcyc7XG5pbXBvcnQgeyBwdXNoIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGNoYWluUmVzdWx0IGZyb20gJy4vX2NoYWluUmVzdWx0LmpzJztcblxuLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gIGVhY2goZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgZnVuYyA9IF9bbmFtZV0gPSBvYmpbbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIGZ1bmMuYXBwbHkoXywgYXJncykpO1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gXztcbn1cbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuaW1wb3J0IHsgQXJyYXlQcm90byB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBjaGFpblJlc3VsdCBmcm9tICcuL19jaGFpblJlc3VsdC5qcyc7XG5cbi8vIEFkZCBhbGwgbXV0YXRvciBgQXJyYXlgIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIG9ialswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG9iaik7XG4gIH07XG59KTtcblxuLy8gQWRkIGFsbCBhY2Nlc3NvciBgQXJyYXlgIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbmVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgIGlmIChvYmogIT0gbnVsbCkgb2JqID0gbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgb2JqKTtcbiAgfTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBfO1xuIiwiLy8gRGVmYXVsdCBFeHBvcnRcbi8vID09PT09PT09PT09PT09XG4vLyBJbiB0aGlzIG1vZHVsZSwgd2UgbWl4IG91ciBidW5kbGVkIGV4cG9ydHMgaW50byB0aGUgYF9gIG9iamVjdCBhbmQgZXhwb3J0XG4vLyB0aGUgcmVzdWx0LiBUaGlzIGlzIGFuYWxvZ291cyB0byBzZXR0aW5nIGBtb2R1bGUuZXhwb3J0cyA9IF9gIGluIENvbW1vbkpTLlxuLy8gSGVuY2UsIHRoaXMgbW9kdWxlIGlzIGFsc28gdGhlIGVudHJ5IHBvaW50IG9mIG91ciBVTUQgYnVuZGxlIGFuZCB0aGUgcGFja2FnZVxuLy8gZW50cnkgcG9pbnQgZm9yIENvbW1vbkpTIGFuZCBBTUQgdXNlcnMuIEluIG90aGVyIHdvcmRzLCB0aGlzIGlzICh0aGUgc291cmNlXG4vLyBvZikgdGhlIG1vZHVsZSB5b3UgYXJlIGludGVyZmFjaW5nIHdpdGggd2hlbiB5b3UgZG8gYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4vL1xuLy8gYGBganNcbi8vIC8vIENvbW1vbkpTXG4vLyB2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbi8vXG4vLyAvLyBBTURcbi8vIGRlZmluZShbJ3VuZGVyc2NvcmUnXSwgZnVuY3Rpb24oXykgey4uLn0pO1xuLy9cbi8vIC8vIFVNRCBpbiB0aGUgYnJvd3NlclxuLy8gLy8gXyBpcyBhdmFpbGFibGUgYXMgYSBnbG9iYWwgdmFyaWFibGVcbi8vIGBgYFxuaW1wb3J0ICogYXMgYWxsRXhwb3J0cyBmcm9tICcuL2luZGV4LmpzJztcbmltcG9ydCB7IG1peGluIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5cbi8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbnZhciBfID0gbWl4aW4oYWxsRXhwb3J0cyk7XG4vLyBMZWdhY3kgTm9kZS5qcyBBUEkuXG5fLl8gPSBfO1xuLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIEFQSS5cbmV4cG9ydCBkZWZhdWx0IF87XG4iLCIvKipcbiAqXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDI0IFNwbHVuaywgSW5jLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExpY2Vuc2VSZWYtU3BsdW5rLTgtMjAyMVxuICovXG5cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnXG5cbmNsYXNzIEN1c3RvbUNvbXBvbmVudCB7XG4gIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGdsb2JhbENvbmZpZyAtIEdsb2JhbCBjb25maWd1cmF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgb2YgdGhlIGN1c3RvbSByb3cuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gU2VydmljZSBuYW1lLlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gdXRpbCAtIHRoZSB1dGlsaXR5IG9iamVjdFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZXRWYWx1ZSAtIHNldCB2YWx1ZSBvZiB0aGUgY3VzdG9tIGZpZWxkXG4gICAgICAgICAqL1xuICBjb25zdHJ1Y3RvciAoZ2xvYmFsQ29uZmlnLCBlbCwgZGF0YSwgc2V0VmFsdWUsIHV0aWwpIHtcbiAgICB0aGlzLmdsb2JhbENvbmZpZyA9IGdsb2JhbENvbmZpZ1xuICAgIHRoaXMuZWwgPSBlbFxuICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgICB0aGlzLnV0aWwgPSB1dGlsXG4gICAgdGhpcy5zZXRWYWx1ZSA9IHNldFZhbHVlXG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIGxldCB2YWx1ZSA9ICcnXG4gICAgaWYgKHRoaXMuZGF0YS52YWx1ZSkge1xuICAgICAgdmFsdWUgPSB0aGlzLmRhdGEudmFsdWVcbiAgICB9XG4gICAgY29uc3QgbW9kZWxKc29uID0ge31cbiAgICBtb2RlbEpzb24uY29udGVudCA9IHZhbHVlXG4gICAgbW9kZWxKc29uLmlkID0gJ2Zvcm0tYXBwJyArICctJyArICd0ZXh0YXJlYSdcbiAgICBtb2RlbEpzb24ubmFtZSA9ICd0ZXh0YXJlYSdcblxuICAgIGNvbnN0IGNvbnRlbnRIdG1sVGVtcGxhdGUgPSBgPGRpdiBjbGFzcz1cImZvcm0taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCIgPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInVuZWRpdGFibGUtaW5wdXQgXCIgZGF0YS1yb2xlPVwidW5lZGl0YWJsZS1pbnB1dFwiIHN0eWxlPVwiZGlzcGxheTpub25lXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiByZ2IoMCAwIDAgLyA4JSkgMHB4IDFweCAxcHggaW5zZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmdiKDYwLCA2OCwgNzcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogXCJTcGx1bmsgUGxhdGZvcm0gU2Fuc1wiLCBcIlByb3hpbWEgTm92YVwiLCBSb2JvdG8sIERyb2lkLCBcIkhlbHZldGljYSBOZXVlXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IGluaGVyaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogMzJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IGNhbGMoMTBweCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMTk1LCAyMDMsIDIxMik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYTpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiByZ2IoMCAxMTAgMTcwKSAwcHggMHB4IDFweCAzcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmdiKDYwLCA2OCwgNzcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZTogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBzZXBhcmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPVwiPCUtIGlkICU+XCIgbmFtZT1cIjwlLSBuYW1lICU+XCIgcm93cz1cIjVcIiBjb2xzPVwiNjBcIiBwbGFjZWhvbGRlcj1cIk1pZGRsZSBsYW5ndWFnZSB0ZW1wbGF0ZSBmb3IgRjUgQklHLUlQIGlDb250cm9sIEFQSSdzLiBFYWNoIHRlbXBsYXRlIHJlY29yZCBtdXN0IGJlIG9mIHRoZSBmb3JtOiA8QVBJIE5hbWU+LDxBUEkgQ2FsbD4sPGludGVydmFsIHZhbHVlPlwiPjwlLSBjb250ZW50ICU+PC90ZXh0YXJlYT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5gXG4gICAgY29uc3QgY29udGVudFRlbXBsYXRlID0gXy50ZW1wbGF0ZShjb250ZW50SHRtbFRlbXBsYXRlKVxuICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gY29udGVudFRlbXBsYXRlKG1vZGVsSnNvbilcblxuICAgIGNvbnN0IGVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcjJyArIG1vZGVsSnNvbi5pZClcblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnNldFZhbHVlKGVsLnZhbHVlKVxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUNvbXBvbmVudFxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIlZFUlNJT04iLCJyb290Iiwic2VsZiIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiQXJyYXlQcm90byIsIkFycmF5IiwiT2JqUHJvdG8iLCJTeW1ib2xQcm90byIsInB1c2giLCJzbGljZSIsInRvU3RyaW5nIiwic3VwcG9ydHNBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwic3VwcG9ydHNEYXRhVmlldyIsIkRhdGFWaWV3IiwibmF0aXZlSXNBcnJheSIsImlzQXJyYXkiLCJuYXRpdmVLZXlzIiwia2V5cyIsIm5hdGl2ZUNyZWF0ZSIsImNyZWF0ZSIsIm5hdGl2ZUlzVmlldyIsImlzVmlldyIsIl9pc05hTiIsImlzTmFOIiwiX2lzRmluaXRlIiwiaXNGaW5pdGUiLCJoYXNFbnVtQnVnIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJub25FbnVtZXJhYmxlUHJvcHMiLCJNQVhfQVJSQVlfSU5ERVgiLCJNYXRoIiwicG93IiwicmVzdEFyZ3VtZW50cyIsImZ1bmMiLCJzdGFydEluZGV4IiwibGVuZ3RoIiwibWF4IiwiYXJndW1lbnRzIiwicmVzdCIsImluZGV4IiwidGhpcyIsImFyZ3MiLCJhcHBseSIsImlzT2JqZWN0IiwidHlwZSIsImlzTnVsbCIsImlzVW5kZWZpbmVkIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50Iiwibm9kZVR5cGUiLCJ0YWdUZXN0ZXIiLCJuYW1lIiwidGFnIiwiaXNGdW5jdGlvbiIsIm5vZGVsaXN0IiwiZG9jdW1lbnQiLCJjaGlsZE5vZGVzIiwiSW50OEFycmF5IiwiaGFzU3RyaW5nVGFnQnVnIiwiaXNJRTExIiwiTWFwIiwiaXNEYXRhVmlldyIsImdldEludDgiLCJpc0FycmF5QnVmZmVyIiwiYnVmZmVyIiwiaGFzIiwiaXNBcmd1bWVudHMiLCJpc1N5bWJvbCIsInBhcnNlRmxvYXQiLCJpc051bWJlciIsImNvbnN0YW50IiwiY3JlYXRlU2l6ZVByb3BlcnR5Q2hlY2siLCJnZXRTaXplUHJvcGVydHkiLCJjb2xsZWN0aW9uIiwic2l6ZVByb3BlcnR5Iiwic2hhbGxvd1Byb3BlcnR5IiwidHlwZWRBcnJheVBhdHRlcm4iLCJ0ZXN0IiwiY29sbGVjdE5vbkVudW1Qcm9wcyIsImhhc2giLCJsIiwiaSIsImNvbnRhaW5zIiwiZW11bGF0ZWRTZXQiLCJub25FbnVtSWR4IiwiY29uc3RydWN0b3IiLCJwcm90byIsImlzRW1wdHkiLCJpc1N0cmluZyIsImlzTWF0Y2giLCJvYmplY3QiLCJhdHRycyIsIl9rZXlzIiwiXyIsIl93cmFwcGVkIiwidG9CdWZmZXJWaWV3IiwiYnVmZmVyU291cmNlIiwiVWludDhBcnJheSIsImJ5dGVPZmZzZXQiLCJ2YWx1ZU9mIiwidG9KU09OIiwiU3RyaW5nIiwidGFnRGF0YVZpZXciLCJlcSIsImEiLCJiIiwiYVN0YWNrIiwiYlN0YWNrIiwiZGVlcEVxIiwiY2xhc3NOYW1lIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsInBvcCIsImlzRXF1YWwiLCJhbGxLZXlzIiwiaWUxMWZpbmdlcnByaW50IiwibWV0aG9kcyIsIndlYWtNYXBNZXRob2RzIiwiZm9yRWFjaE5hbWUiLCJjb21tb25Jbml0IiwibWFwVGFpbCIsIm1hcE1ldGhvZHMiLCJjb25jYXQiLCJzZXRNZXRob2RzIiwidmFsdWVzIiwicGFpcnMiLCJpbnZlcnQiLCJyZXN1bHQiLCJmdW5jdGlvbnMiLCJuYW1lcyIsInNvcnQiLCJjcmVhdGVBc3NpZ25lciIsImtleXNGdW5jIiwiZGVmYXVsdHMiLCJzb3VyY2UiLCJiYXNlQ3JlYXRlIiwiQ3RvciIsInByb3BzIiwiZXh0ZW5kT3duIiwiY2xvbmUiLCJleHRlbmQiLCJ0YXAiLCJpbnRlcmNlcHRvciIsInRvUGF0aCIsInBhdGgiLCJkZWVwR2V0IiwiZGVmYXVsdFZhbHVlIiwiaWRlbnRpdHkiLCJtYXRjaGVyIiwicHJvcGVydHkiLCJvcHRpbWl6ZUNiIiwiY29udGV4dCIsImFyZ0NvdW50IiwiYWNjdW11bGF0b3IiLCJiYXNlSXRlcmF0ZWUiLCJpdGVyYXRlZSIsIkluZmluaXR5IiwiY2IiLCJtYXBPYmplY3QiLCJyZXN1bHRzIiwiY3VycmVudEtleSIsIm5vb3AiLCJwcm9wZXJ0eU9mIiwidGltZXMiLCJuIiwiYWNjdW0iLCJyYW5kb20iLCJtaW4iLCJmbG9vciIsIkRhdGUiLCJub3ciLCJnZXRUaW1lIiwiY3JlYXRlRXNjYXBlciIsIm1hcCIsImVzY2FwZXIiLCJtYXRjaCIsImpvaW4iLCJ0ZXN0UmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZVJlZ2V4cCIsInN0cmluZyIsInJlcGxhY2UiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsImVzY2FwZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiZXNjYXBlUmVnRXhwIiwiZXNjYXBlQ2hhciIsImJhcmVJZGVudGlmaWVyIiwidGVtcGxhdGUiLCJ0ZXh0Iiwic2V0dGluZ3MiLCJvbGRTZXR0aW5ncyIsIm9mZnNldCIsInJlbmRlciIsImFyZ3VtZW50IiwidmFyaWFibGUiLCJFcnJvciIsImUiLCJkYXRhIiwiZmFsbGJhY2siLCJpZENvdW50ZXIiLCJ1bmlxdWVJZCIsInByZWZpeCIsImlkIiwiY2hhaW4iLCJpbnN0YW5jZSIsIl9jaGFpbiIsImV4ZWN1dGVCb3VuZCIsInNvdXJjZUZ1bmMiLCJib3VuZEZ1bmMiLCJjYWxsaW5nQ29udGV4dCIsInBhcnRpYWwiLCJib3VuZEFyZ3MiLCJwbGFjZWhvbGRlciIsImJvdW5kIiwicG9zaXRpb24iLCJUeXBlRXJyb3IiLCJjYWxsQXJncyIsImZsYXR0ZW4iLCJpbnB1dCIsImRlcHRoIiwic3RyaWN0Iiwib3V0cHV0IiwiaWR4IiwiaiIsImxlbiIsImJpbmQiLCJtZW1vaXplIiwiaGFzaGVyIiwiY2FjaGUiLCJhZGRyZXNzIiwid2FpdCIsInNldFRpbWVvdXQiLCJkZWxheSIsInRocm90dGxlIiwib3B0aW9ucyIsInRpbWVvdXQiLCJwcmV2aW91cyIsImxhdGVyIiwibGVhZGluZyIsInRocm90dGxlZCIsIl9ub3ciLCJyZW1haW5pbmciLCJjbGVhclRpbWVvdXQiLCJ0cmFpbGluZyIsImNhbmNlbCIsImRlYm91bmNlIiwiaW1tZWRpYXRlIiwicGFzc2VkIiwiZGVib3VuY2VkIiwiX2FyZ3MiLCJ3cmFwIiwid3JhcHBlciIsIm5lZ2F0ZSIsInByZWRpY2F0ZSIsImNvbXBvc2UiLCJzdGFydCIsImFmdGVyIiwiYmVmb3JlIiwibWVtbyIsImZpbmRLZXkiLCJjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciIsImRpciIsImFycmF5Iiwic29ydGVkSW5kZXgiLCJsb3ciLCJoaWdoIiwibWlkIiwiY3JlYXRlSW5kZXhGaW5kZXIiLCJwcmVkaWNhdGVGaW5kIiwiaXRlbSIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJmaW5kIiwiZmluZFdoZXJlIiwiZWFjaCIsImNyZWF0ZVJlZHVjZSIsImluaXRpYWwiLCJyZWR1Y2VyIiwiZmlsdGVyIiwibGlzdCIsInJlamVjdCIsImV2ZXJ5Iiwic29tZSIsImZyb21JbmRleCIsImd1YXJkIiwiaW5kZXhPZiIsImNvbnRleHRQYXRoIiwibWV0aG9kIiwicGx1Y2siLCJ3aGVyZSIsImNvbXB1dGVkIiwibGFzdENvbXB1dGVkIiwidiIsInJlU3RyU3ltYm9sIiwidG9BcnJheSIsInNhbXBsZSIsImxhc3QiLCJyYW5kIiwidGVtcCIsInNodWZmbGUiLCJzb3J0QnkiLCJjcml0ZXJpYSIsImxlZnQiLCJyaWdodCIsImdyb3VwIiwiYmVoYXZpb3IiLCJwYXJ0aXRpb24iLCJwYXNzIiwic2l6ZSIsImtleUluT2JqIiwicGljayIsImZpcnN0IiwiY29tcGFjdCIsIkJvb2xlYW4iLCJvdGhlckFycmF5cyIsImRpZmZlcmVuY2UiLCJ1bmlxIiwiaXNTb3J0ZWQiLCJzZWVuIiwiYXJyYXlzIiwiaW50ZXJzZWN0aW9uIiwiYXJnc0xlbmd0aCIsInVuemlwIiwicmFuZ2UiLCJzdG9wIiwic3RlcCIsImNlaWwiLCJjaHVuayIsImNvdW50IiwiY2hhaW5SZXN1bHQiLCJtaXhpbiIsImdsb2JhbENvbmZpZyIsImVsIiwic2V0VmFsdWUiLCJ1dGlsIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwibW9kZWxKc29uIiwiY29udGVudCIsImNvbnRlbnRUZW1wbGF0ZSIsImlubmVySFRNTCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJfdGhpcyJdLCJzb3VyY2VSb290IjoiIn0=