##
## SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##

[cp_log]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

TRANSFORMS-set_source_checkpoint = checkpoint_default_source, checkpoint_firewall_subproduct_source, checkpoint_audit_source, checkpoint_email_source, checkpoint_endpoint_source, checkpoint_firewall_source, checkpoint_ids_source, checkpoint_ids_malware_source, checkpoint_sessions_source, checkpoint_web_source, checkpoint_network_source
REPORT-kv_cp_log_format = kv_cp_log_format, extract_event_src

FIELDALIAS-event_action = action AS event_action

EVAL-dest_interface = coalesce(client_inbound_interface, server_inbound_interface, case(ifdir == "inbound", ifname, true(), dest_interface))
EVAL-src_interface = coalesce(client_outbound_interface, server_outbound_interface, case(ifdir == "outbound", ifname, true(), src_interface))
EVAL-http_referrer = coalesce(referrer, http_referrer)
EVAL-dest_zone = coalesce(outzone, dest_zone)
EVAL-severity = case(severity IN("0","Informational"), "informational", severity IN("1","Low"), "low", severity IN("2","Medium"), "medium", severity IN("3","High"), "high", severity IN("4","Critical"), "critical")
EVAL-severity_id = case(severity IN("0","Informational"), "0", severity IN("1","Low"), "1", severity IN("2","Medium"), "2", severity IN("3","High"), "3", severity IN("4","Critical"), "4")
EVAL-src_zone = coalesce(inzone,src_zone)
EVAL-recipient = coalesce(to,recipient)
EVAL-sender = coalesce(from,sender)
EVAL-subject = coalesce(email_subject,subject)

LOOKUP-transport_for_checkpoint = checkpoint_transport_protocols_lookup transport_id AS proto OUTPUTNEW protocol, transport
LOOKUP-checkpoint_service_app = checkpoint_service_app service OUTPUTNEW app

[cp_log:syslog]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

TRANSFORMS-set_source_checkpoint = checkpoint_default_source, checkpoint_firewall_subproduct_source, checkpoint_audit_source, checkpoint_email_source, checkpoint_endpoint_source, checkpoint_firewall_source, checkpoint_ids_source, checkpoint_ids_malware_source, checkpoint_sessions_source, checkpoint_web_source, checkpoint_network_source
REPORT-kv_cp_syslog_log_format = kv_cp_syslog_log_format, extract_event_src

FIELDALIAS-event_action = action AS event_action

EVAL-dest_interface = coalesce(client_inbound_interface, server_inbound_interface, case(ifdir == "inbound", ifname, true(), dest_interface))
EVAL-src_interface = coalesce(client_outbound_interface, server_outbound_interface, case(ifdir == "outbound", ifname, true(), src_interface))
EVAL-http_referrer = coalesce(referrer,http_referrer)
EVAL-dest_zone = coalesce(outzone,dest_zone)
EVAL-severity = case(severity IN("0","Informational"), "informational", severity IN("1","Low"), "low", severity IN("2","Medium"), "medium", severity IN("3","High"), "high", severity IN("4","Critical"), "critical")
EVAL-severity_id = case(severity IN("0","Informational"), "0", severity IN("1","Low"), "1", severity IN("2","Medium"), "2", severity IN("3","High"), "3", severity IN("4","Critical"), "4")
EVAL-src_zone = coalesce(inzone,src_zone)
EVAL-recipient = coalesce(to,recipient)
EVAL-sender = coalesce(from,sender)
EVAL-subject = coalesce(email_subject,subject)

LOOKUP-transport_for_checkpoint = checkpoint_transport_protocols_lookup transport_id AS proto OUTPUTNEW protocol, transport
LOOKUP-checkpoint_service_app = checkpoint_service_app service OUTPUTNEW app

[source::checkpoint:audit]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

FIELDALIAS-event_rule = rule AS event_rule
FIELDALIAS-dvc_ip = origin AS dvc_ip
FIELDALIAS-direction = ifdir AS direction
FIELDALIAS-result_id = operation_number AS result_id

REPORT-kv_extract_authentication_method = extract_authentication_method, extract_interface_info
EVAL-action = case(event_type=="Logout" OR operation=="Log Out", "logoff", subject IN("Administrator Login") OR action IN("Log In","Failed Log In"), case(audit_status == "Failure" OR status == "Failure", "failure", true(), "success"), operation IN ("Create Object", "Create Layer", "Create Rule"), "created", operation == "Modify Object", "modified", operation == "Delete Object", "deleted", (isnotnull(fieldschanges) OR event_name == "Policy installation" OR subject == "Policy Installation" OR package_action IN ("Install", "Download")), "modified", product IN("Scheduled system update", "Web-UI") AND action == "Accept", "modified", product IN ("SmartDashboard", "SmartUpdate") AND operation == "File Retrieved", "read", product == "SmartDashboard" AND operation IN("Initialize User Registration Key","Initialize SIC Certificate"), "created", product == "SmartDashboard" AND operation IN("Update User Certificate Description","Disable User Registration Key"), "modified", action IN("Accept", "Allow", "Detect"), "allowed", action IN("Drop", "Prevent", "Reject"), "blocked")
EVAL-app = case(subject IN("Administrator Login","Administrator Logout") OR event_name="Check Point administrator login at irregular hours" OR product IN ("System Monitor"), product, action IN("Log In","Failed Log In"), client_name, product IN("SmartEvent Client","Security Gateway/Management") AND isnotnull(failure_impact), product, match(sys_message,"Your network may be at risk"), product, true(), app)
EVAL-authentication_method = coalesce(auth_method, authentication_method)
EVAL-body = coalesce(reason,failure_impact,sys_message,fw_message,update_status,status,description,subscription_stat_desc,result,event_name,event_type,body)
EVAL-bytes_in = coalesce(received_bytes, if(bytes != client_inbound_bytes + client_outbound_bytes, server_inbound_bytes, client_inbound_bytes))
EVAL-bytes_out = coalesce(sent_bytes, if(bytes != client_inbound_bytes + client_outbound_bytes, server_outbound_bytes, client_outbound_bytes))
EVAL-category = coalesce(protection_type, category)
EVAL-change_type = case(event_type=="Logout" OR operation=="Log Out", "AAA", update_status="updated" and isnotnull(db_ver), "filesystem", product IN("Scheduled system update"), operation, event_type == "Policy Update" OR event_name == "Policy installation" OR package_action IN ("Install", "Download"), "filesystem", subject IN("Object Manipulation","Policy Installation","File Operation", "IPS Update"), "filesystem", event_type IN("Status Changed"), event_type, true(), coalesce(subject,change_type))
EVAL-command = coalesce(operation, package_action, command)
EVAL-description = case(product IN ("System Monitor") AND isnotnull(sensor_alert_message), sensor_alert_message, true(), description)
EVAL-dest = coalesce(dst, dest, dest_ip, ip_address, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), host, ifdir == "inbound" OR event_type=="Logout" OR operation IN("Log Out","Log In") OR isnotnull(audit_status) OR isnotnull(fieldschanges) OR operation == "Delete Object" OR subject=="Object Manipulation" OR product IN ("System Monitor") OR (product IN("SmartDashboard","SmartUpdate") AND isnotnull(subject)) OR (update_status="updated" AND isnotnull(db_ver)), origin, ifdir == "outbound",client_ip))
EVAL-dest_port = coalesce(dest_port, service)
EVAL-dest_ip = coalesce(dst, dest, dest_ip, ip_address, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), ifdir == "inbound" OR event_type=="Logout" OR operation IN("Log Out","Log In") OR isnotnull(audit_status) OR isnotnull(fieldschanges) OR operation == "Delete Object" OR subject=="Object Manipulation" OR (product IN("SmartDashboard","SmartUpdate") AND isnotnull(subject)) OR (update_status="updated" AND isnotnull(db_ver)), origin, ifdir == "outbound",client_ip))
EVAL-dvc = coalesce(origin,dvc)
EVAL-file_path = coalesce(file_path, resource)
EVAL-id = coalesce(loguid,id)
EVAL-ids_type= case((isnotnull(malware_action) OR isnotnull(protection_name)) AND isnull(file_name), case(isnotnull(ifname) OR isnotnull(proto) OR isnotnull(smartdefense_profile), "network", isnotnull(client_name),"host"))
EVAL-object = coalesce(object_name, objectname, case(match(additional_info,"[Ll]icense"),"license", event_type=="Logout" OR operation=="Log Out", coalesce(administrator,user)), cp_component_name, session_name, object)
EVAL-object_attrs = case(reason == "Session timeout" OR (product == "WEB_API" AND isnull(objectname)), "session-".session_uid, isnotnull(cp_component_version), "cp_component_version-".cp_component_version, true(), coalesce(fieldschanges, object_attrs))
EVAL-object_id = coalesce(object_id, object_name, objectname, case(event_type=="Logout" OR operation=="Log Out", coalesce(administrator,user), isnotnull(session_description) OR operation == "Delete Object", "session_uid-".session_uid))
EVAL-object_category = coalesce(objecttype, case(objectname =="NTP", "server" ,subject == "Object Manipulation", "file", event_name == "Policy installation", "policy", event_type=="Logout" OR operation=="Log Out", "user", isnotnull(cp_component_name), "cp_component", session_name == "APPI Update", "application", session_name == "IPS", "filesystem"), object_category)
EVAL-protocol_version = case(isnotnull(src) AND isnotnull(proto),if(match(src,":"),"ipv6","ipv4"))
EVAL-packets_in = if(packets != client_inbound_packets + client_outbound_packets, server_inbound_packets, client_inbound_packets)
EVAL-packets_out = if(packets != client_inbound_packets + client_outbound_packets, server_outbound_packets, client_outbound_packets)
EVAL-reason = case(subject IN("Administrator Login","Administrator Logout"), subject, true(), reason)
EVAL-result = coalesce(fieldschanges, operation_results, description, additional_info, case(event_type == "Logout", event_type, true(), operation), result)
EVAL-rule = coalesce(rule_name, app_rule_name, policy_name, rule)
EVAL-rule_id = coalesce(rule_uid, app_rule_id, rule_id)
EVAL-session_id = coalesce(hll_key, session_uid, session_id)
EVAL-signature = coalesce(protection_name, sensor_alert_title, signature)
EVAL-signature_id = coalesce(protection_id, signature_id)
EVAL-src = coalesce(src, src_ip, client_ip, case(ifdir == "outbound", origin))
EVAL-src_port = coalesce(s_port, src_port)
EVAL-src_ip = coalesce(src, src_ip, client_ip, case(ifdir == "outbound", origin))
EVAL-src_user = replace(coalesce(src_user, src_user_name, administrator), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-src_user_name = replace(coalesce(src_user_name, src_user, administrator), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-status = coalesce(lower(audit_status),case(isnotnull(fieldschanges),"success",isnotnull(operation) AND isnull(failure_impact), "success", update_status == "updated" OR operation_results == "Succeeded", "success", operation_results IN ("Failed", "failed"), "failure", event_type IN("Policy Update", "Status Changed") AND isnull(failure_impact), "success", event_name IN("Policy installation") AND isnull(failure_impact), "success", match(op_type,"Repair"), "success", event_type=="Logout" AND isnull(status), "success", true(), lower(status)))
EVAL-transport = coalesce(case(proto == "6", "tcp", proto == "17", "udp", proto == "1", "icmp"), transport)
EVAL-type = case(isnotnull(alert) OR event_name == "Check Point administrator login at irregular hours" OR match(sys_message,"The \S+ interface is not protected by the anti-spoofing feature. Your network may be at risk"), "alert", true(), case(severity IN ("Critical","High","3","4"), "alert", severity IN("Informational","Low","Medium","0","1","2"), "event"))
EVAL-user = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-user_name = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-user_type = case(administrator IN("System","Scheduled system update"), "System",isnotnull(administrator), "Admin")
EVAL-vendor_product = coalesce(product, vendor_product)

[source::checkpoint:ids]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

EVAL-action = case(action IN("Accept", "Allow", "Detect"), "allowed", action IN("Drop", "Prevent"), "blocked", true(), action)
EVAL-app = case(update_status IN("Blade activated", "Blade deactivated", "failed"), product, true(), app)
EVAL-body = coalesce(reason,failure_impact,sys_message,fw_message,update_status,status,description,subscription_stat_desc,result,event_name,event_type,body)
EVAL-category = coalesce(protection_type, category)
EVAL-dest = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), host, ifdir == "inbound" OR isnotnull(fieldschanges) OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-dest_ip = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), ifdir == "inbound" OR isnotnull(fieldschanges) OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-dest_port = coalesce(dest_port, service)
EVAL-dvc = coalesce(origin, dvc)
EVAL-id = coalesce(loguid,id)
EVAL-ids_type= case((isnotnull(malware_action) OR isnotnull(protection_name)) AND isnull(file_name), case(isnotnull(ifname) OR isnotnull(proto) OR product == "IPS" OR isnotnull(smartdefense_profile), "network", isnotnull(client_name), "host"))
EVAL-rule_id = coalesce(rule_uid, app_rule_id, rule_id)
EVAL-signature = coalesce(protection_name, malware_action, errors, signature)
EVAL-signature_id = coalesce(protection_id,signature_id)
EVAL-src = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_ip = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_port = coalesce(s_port, src_port)
EVAL-transport = coalesce(case(proto == "6", "tcp", proto == "17", "udp", proto == "1", "icmp"), transport)
EVAL-type = case(update_status IN("Blade activated","Blade deactivated"), "alert", severity IN ("Critical","High","3","4"), "alert", severity IN("Informational","Low","Medium","0","1","2"), "event")
EVAL-vendor_product = coalesce(product, vendor_product)


[source::checkpoint:web]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

FIELDALIAS-event_rule = rule AS event_rule
FIELDALIAS-packets_in = client_inbound_packets AS packets_in
FIELDALIAS-packets_out = client_outbound_packets AS packets_out
FIELDALIAS-direction = ifdir AS direction
FIELDALIAS-dvc_ip = origin AS dvc_ip

EVAL-action = case(isnotnull(db_ver) AND update_status == "updated", "modified", isnotnull(proto) OR isnotnull(conn_direction) OR protection_type == "URL Filtering", case(event_action IN ("Allow", "Detect"), "allowed", event_action IN ("Block","Drop","Reject"), "blocked"), event_action == "Accept", "success", event_action == "Drop", "modified")
EVAL-app = coalesce(protocol, case(update_status IN("Blade activated","Blade deactivated","failed"), product, true(), app))
EVAL-body = coalesce(reason,failure_impact,sys_message,fw_message,description,update_status,status,subscription_stat_desc,result,event_name,event_type,body)
EVAL-bytes = coalesce(bytes, case(isnotnull(received_bytes) AND isnotnull(sent_bytes),received_bytes + sent_bytes, isnotnull(client_inbound_bytes) AND isnotnull(client_outbound_bytes), client_inbound_bytes+client_outbound_bytes))
EVAL-bytes_in = coalesce(received_bytes, if(bytes != client_inbound_bytes + client_outbound_bytes, server_inbound_bytes, coalesce(client_inbound_bytes,bytes_in)))
EVAL-bytes_out = coalesce(sent_bytes, if(bytes != client_inbound_bytes + client_outbound_bytes, server_outbound_bytes, coalesce(client_outbound_bytes, bytes_out)))
EVAL-category = coalesce(category, protection_type)
EVAL-change_type = case(match(description,"^Gateway was updated"), "filesystem", true(), change_type)
EVAL-command = coalesce(update_status, command)
EVAL-dest = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), host, ifdir == "inbound" OR isnotnull(fieldschanges) OR operation == "Delete Object" OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-dest_ip = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), ifdir == "inbound" OR operation == "Delete Object" OR isnotnull(fieldschanges) OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-dest_port = coalesce(dest_port, service)
EVAL-dvc = coalesce(origin, dvc)
EVAL-file_path = coalesce(file_path, resource)
EVAL-id = coalesce(loguid,id)
EVAL-ids_type = case(protection_type == "URL Filtering", if(isnotnull(client_name),"host","network"))
EVAL-object = coalesce(object_name, case(match(additional_info,"[Ll]icense"),"license"), session_name, product, object)
EVAL-object_attrs = case(isnotnull(db_ver), "db_ver-"+replace(description, "^Gateway was updated with database version: (\d+)\.","\1"), true(), object_attrs)
EVAL-object_category = coalesce(objecttype, object_category, case(isnotnull(db_ver), "database", isnotnull(appi_name), "application", subject == "Object Manipulation", "file"))
EVAL-packets = coalesce(packets, case(isnotnull(packets_in) AND isnotnull(packets_out), packets_in + packets_out))
EVAL-packets_in = if(packets != client_inbound_packets + client_outbound_packets, server_inbound_packets, client_inbound_packets)
EVAL-packets_out = if(packets != client_inbound_packets + client_outbound_packets, server_outbound_packets, client_outbound_packets)
EVAL-protocol = case(proto IN ("4", "6", "17"), "ip", true(), protocol)
EVAL-protocol_version= case(isnotnull(nat_rulenum),"ipv4",isnotnull(src),if(match(src,":"),"ipv6","ipv4"),isnotnull(dst),if(match(dst,":"),"ipv6","ipv4"))
EVAL-result = coalesce(fieldschanges, new_status, update_status, description, additional_info, result)
EVAL-rule = coalesce(rule_name, app_rule_name, policy_name, rule)
EVAL-rule_id = coalesce(rule_uid, app_rule_id, rule_id)
EVAL-session_id = coalesce(hll_key,session_id)
EVAL-signature = coalesce(signature, protection_name)
EVAL-src = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_ip = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_port = coalesce(s_port, src_port)
EVAL-src_user = replace(coalesce(src_user, src_user_name, administrator), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-src_user_name = replace(coalesce(src_user_name, src_user, administrator), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-status = coalesce(lower(audit_status),case(isnotnull(fieldschanges),"success",isnotnull(operation) AND isnull(failure_impact), "success", update_status == "updated", "success", event_type IN("Policy Update", "Status Changed") AND isnull(failure_impact), "success",event_name IN("Policy installation") AND isnull(failure_impact), "success", match(op_type,"Repair"), "success", true(), lower(status)))
EVAL-transport = coalesce(case(proto == "6", "tcp", proto == "17", "udp", proto == "1", "icmp"), transport)
EVAL-type = case(update_status IN("Blade activated","Blade deactivated"), "alert", true(), case(severity IN ("Critical","High","3","4"), "alert", severity IN("Informational","Low","Medium","0","1","2"), "event"))
EVAL-user = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-user_name = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-vendor_product = coalesce(product, vendor_product)

[source::checkpoint:firewall]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

FIELDALIAS-event_rule = rule AS event_rule
FIELDALIAS-direction = ifdir AS direction
FIELDALIAS-dvc_ip = origin AS dvc_ip
FIELDALIAS-tcp_flag = tcp_flags AS tcp_flag

EVAL-action = case(internal_ca == "VPN certificate created", "created", product == "DLP", case(match(reject_category,"User \S+ has failed to log into the portal"),"failure"),product == "Application Control" AND update_status == "updated", "modified", product == "Compliance" AND event_type="Status Changed", "modified", event_action IN("Accept", "Allow", "Detect", "Inform User", "Ask User", "Decrypt","Encrypt") AND isnull(alert), "allowed", event_action IN("Drop", "Prevent", "Reject", "Redirect") AND isnull(alert), "blocked")
EVAL-app = case(isnotnull(alert), product, update_status IN("Blade activated","Blade deactivated","failed"), product, product == "DLP" AND (info == "Bypassing DLP due to resources shortage." OR match(reject_category, "User \S+ has failed to log into the portal") OR event_action == "Detect"), "DLP", event_name == "IP sweep from external network", product, product IN("Firewall","VPN-1 & FireWall-1","URL Filtering"), coalesce(service_id, if(isnotnull(alert) OR isnotnull(failure_impact), product, null())), product == "HTTPS Inspection" AND isnotnull(failure_impact), product, product == "Network Security", product, product == "Compliance" AND event_type="Compliance Check Not Met", product, true(), app)
EVAL-body = coalesce(reason,failure_impact,sys_message,fw_message,description,update_status,status,subscription_stat_desc,result,event_name,event_type,case(product == "DLP" AND info == "Bypassing DLP due to resources shortage.", info),body)
EVAL-bytes = coalesce(bytes, case(isnotnull(received_bytes) AND isnotnull(sent_bytes),received_bytes + sent_bytes))
EVAL-bytes_in = coalesce(received_bytes, if(bytes != client_inbound_bytes + client_outbound_bytes, server_inbound_bytes, client_inbound_bytes))
EVAL-bytes_out = coalesce(sent_bytes, if(bytes != client_inbound_bytes + client_outbound_bytes, server_outbound_bytes, client_outbound_bytes))
EVAL-change_type = case(internal_ca == "VPN certificate created" OR match(description,"^Gateway was updated with") OR event_type=="Status Changed", "filesystem", true(), change_type)
EVAL-command = case(product IN("Application Control") AND update_status == "updated", "update", true(), command)
EVAL-date = coalesce(time, date, local_time)
EVAL-description = coalesce(dlp_violation_description, description)
EVAL-dest = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "IP sweep from external network" OR isnotnull(alert) OR isnotnull(failure_impact) OR event_name == "Check Point administrator login at irregular hours", host, ifdir == "inbound" OR operation == "Delete Object" OR isnotnull(fieldschanges) OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)) OR match(reject_category,"User \S+ has failed to log into the portal"), origin))
EVAL-dest_ip = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "IP sweep from external network" OR isnotnull(alert) OR isnotnull(failure_impact) OR event_name == "Check Point administrator login at irregular hours", if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), ifdir == "inbound" OR operation == "Delete Object" OR isnotnull(fieldschanges) OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)) OR match(reject_category,"User \S+ has failed to log into the portal"), origin))
EVAL-dest_port = coalesce(dest_port, service)
EVAL-dest_translated_ip = coalesce(xlatedst, dest_translated_ip)
EVAL-dest_translated_port = coalesce(xlatedport, dest_translated_port)
EVAL-dvc = coalesce(origin, dvc)
EVAL-id = coalesce(loguid,id)
EVAL-icmp_code = case(service_id == "echo-request", 0, true(), icmp_code)
EVAL-icmp_type = case(service_id == "echo-request", 8, true(), icmp_type)
EVAL-object = coalesce(object_name, objectname, case(event_type == "Status Changed", new_status, match(additional_info,"[Ll]icense"),"license", product == "Application Control", product, internal_ca == "VPN certificate created", "VPN Certificate", true(), coalesce(session_name,object)))
EVAL-object_id = case(internal_ca == "VPN certificate created", "Cert_serial_no-".serial_num, true(), object_id)
EVAL-object_attrs = case(isnotnull(db_ver), "database version", event_type=="Status Changed", "new_status-".new_status, true(), object_attrs)
EVAL-object_category = coalesce(objecttype, object_category, case(isnotnull(appi_name), "application", isnotnull(db_ver), "database", event_type == "Status Changed", "Status", subject == "Object Manipulation", "file", internal_ca == "VPN certificate created", "Certificate"))
EVAL-protocol = case(proto IN ("4", "6", "17"), "ip", true(), protocol)
EVAL-protocol_version= case(isnotnull(nat_rulenum),"ipv4",isnotnull(src),if(match(src,":"),"ipv6","ipv4"),isnotnull(dst),if(match(dst,":"),"ipv6","ipv4"))
EVAL-packets_in = if(packets != client_inbound_packets + client_outbound_packets, server_inbound_packets, client_inbound_packets)
EVAL-packets_out = if(packets != client_inbound_packets + client_outbound_packets, server_outbound_packets, client_outbound_packets)
EVAL-result = coalesce(fieldschanges, update_status, case(isnotnull(new_status), "modified", event_type == "Status Changed", "modified", internal_ca == "VPN certificate created", "VPN certificate created"), description, result)
EVAL-rule = coalesce(rule_name, app_rule_name, policy_name, rule)
EVAL-rule_id = coalesce(rule_uid, app_rule_id, rule_id)
EVAL-ids_type= case((isnotnull(malware_action) OR isnotnull(protection_name)) AND isnull(file_name), case(isnotnull(ifname) OR isnotnull(proto) OR isnotnull(smartdefense_profile), "network", isnotnull(client_name),"host"))
EVAL-session_id = coalesce(hll_key,session_id)
EVAL-signature = case(product == "Compliance" AND event_type == "Compliance Check Not Met", event_type, product == "DLP" AND event_action == "Detect", dlp_violation_description, true(), signature)
EVAL-signature_id = coalesce(protection_id,signature_id)
EVAL-src = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_ip = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_port = coalesce(s_port, src_port)
EVAL-src_translated_ip = coalesce(xlatesrc, src_translated_ip)
EVAL-src_translated_port = coalesce(xlatesport, src_translated_port)
EVAL-src_user = replace(coalesce(src_user, src_user_name, administrator), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-src_user_name = replace(coalesce(src_user_name, src_user, administrator), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-status = coalesce(lower(audit_status),case(isnotnull(fieldschanges),"success",isnotnull(operation) AND isnull(failure_impact), "success", update_status == "updated", "success", event_type IN("Policy Update", "Status Changed") AND isnull(failure_impact), "success",event_name IN("Policy installation") AND isnull(failure_impact), "success", match(op_type,"Repair"), "success", internal_ca == "VPN certificate created", "success", true(), lower(status)))
EVAL-transport = coalesce(case(proto == "6", "tcp", proto == "17", "udp", proto == "1", "icmp"), transport)
EVAL-type = case(update_status IN("Blade activated","Blade deactivated"), "alert", product == "DLP" AND info == "Bypassing DLP due to resources shortage.", "alert", isnotnull(alert), "alert", severity IN ("Critical","High","3","4"), "alert", severity IN("Informational","Low","Medium","0","1","2"), "event")
EVAL-user = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-user_name = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-vendor_product = coalesce(product, vendor_product)


[source::checkpoint:sessions]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

FIELDALIAS-event_status = status AS event_status
FIELDALIAS-id = loguid AS id
FIELDALIAS-authentication_method = auth_method AS authentication_method
FIELDALIAS-dest_nt_domain = domain_name AS dest_nt_domain

REPORT-obtain_src_for_identity_awareness = extract_src_for_identity_awareness

EVAL-action = case(product == "Mobile App",case(status == "Installed", "modified", status == "Removed", "deleted"), auth_status == "Successful Login", "success")
EVAL-app = case(isnotnull(alert), product, isnotnull(auth_status), client_name, true(), app)
EVAL-body = case(isnotnull(alert), error_description, true(), body)
EVAL-description = coalesce(description, case(isnotnull(alert), information, true(), error_description))
EVAL-dest = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), host, isnotnull(db_ver) AND update_status == "updated", origin, client_name=="Active Directory Query", src,ifdir == "inbound" OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-dest_ip = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null),isnotnull(db_ver) AND update_status == "updated", origin, ifdir == "inbound" OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-src = coalesce(if(client_name == "Active Directory Query", origin, src), src_ip, case(ifdir == "outbound", origin))
EVAL-src_ip = coalesce(if(client_name == "Active Directory Query", origin, src), src_ip, case(client_name == "Active Directory Query" OR ifdir == "outbound", origin))
EVAL-dvc = coalesce(origin, dvc)
EVAL-vendor_product = coalesce(product, vendor_product)
EVAL-command = case(product == "Mobile App", status, true(), command)
EVAL-change_type = case(update_status="updated" and isnotnull(db_ver), "filesystem", product == "Mobile App" AND status IN("Installed","Removed"), "filesystem", event_type == "Policy Update" OR event_name == "Policy installation", "filesystem", subject IN("Object Manipulation","Policy Installation","File Operation"), "filesystem", event_type IN("Status Changed"), event_type, true(), change_type)
EVAL-object = case(product == "Mobile App" AND status IN("Installed","Removed"), coalesce(appi_name,protection_type), match(additional_info,"[Ll]icense"), "license", true(), coalesce(session_name,object))
EVAL-object_id = case(product == "Mobile App" AND status IN("Installed","Removed"), app_sig_id, true(), object_id)
EVAL-object_category = case(product == "Mobile App" AND status IN("Installed","Removed"), "file", true(), object_category)
EVAL-type = case(isnotnull(alert), "alert", true(), type)
EVAL-user = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-user_name = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-result = coalesce(result,case(product == "Mobile App", event_status))
EVAL-src_user = replace(coalesce(src_user, src_user_name, administrator), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-src_user_name = replace(coalesce(src_user_name, src_user, administrator), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-status = case(product == "Mobile App" AND status IN("Installed","Removed"), "success", true(), lower(status))


[source::checkpoint:email]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

FIELDALIAS-dest_from_dst = dst AS dest
FIELDALIAS-message_id_from_loguid = loguid AS message_id
FIELDALIAS-orig_dest_from_dst = dst AS orig_dest
FIELDALIAS-src_user = from AS src_user

EVAL-action = case(event_action IN ("Detect", "Accept", "Bypass") OR email_status == "Bounced", "delivered", event_action IN ("Reject") OR email_status == "Dropped", "blocked", isnotnull(email_status), email_status, true(), event_action)
EVAL-bytes_out = coalesce(client_outbound_bytes,bytes_out)
EVAL-delay = coalesce(email_delay,delay)
EVAL-dvc = coalesce(origin, dvc)
EVAL-filter_action = coalesce(email_status,filter_action)
EVAL-internal_message_id = coalesce(email_message_id,email_session_id,email_queue_id,internal_message_id)
EVAL-message_info = coalesce(email_headers,spam_category,email_spam_category,failure_reason,message_info)
EVAL-orig_recipient = coalesce(to,orig_recipient)
EVAL-orig_src = coalesce(orig,src,orig_src)
EVAL-packets_in = coalesce(client_inbound_packets,packets_in)
EVAL-packets_out = coalesce(client_outbound_packets,packets_out)
EVAL-protocol = if(service == "25", "smtp", protocol)
EVAL-recipient_count = if(isnull(email_recipients_num), mvcount(split(to,"@"))-1, email_recipients_num)
EVAL-recipient_domain = replace(to, "(?:.*?)@(.*$)", "\1")
EVAL-return_addr = coalesce(from,return_addr)
EVAL-size = coalesce(message_size,size)
EVAL-src_user_domain = replace(from, "(?:.*?)@(.*$)", "\1")
EVAL-vendor_product = coalesce(product, vendor_product)


[source::checkpoint:endpoint]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

REPORT-kv_extract_endpoint_info = extract_endpoint_workgroup,extract_endpoint_sid,extract_endpoint_type,extract_endpoint_sam
REPORT-kv_extract_authentication_method = extract_authentication_method

FIELDALIAS-os_from_os_name = os_name AS os
FIELDALIAS-result_id = operation_number AS result_id
FIELDALIAS-serial_from_media_class_id = media_class_id AS serial
FIELDALIAS-version_as_event_version = version AS event_version

EVAL-action = case(operation == "Log Out" OR subject == "Administrator Logout", "logoff", operation == "Modify Object", "modified", product IN("MEPP","Media Encryption & Port Protection") AND file_operation == "Write", "modified", product == "Endpoint Security Console" AND operation == "Create Object", "created", product == "Endpoint Security Console" AND operation == "Delete Object", "deleted",product == "Endpoint Compliance", case(action == "Prevent", "stopped", event_type IN("Policy Update", "Status Changed"), "modified"), product =="Endpoint Security Console", case(isnotnull(fieldschanges), "modified", operation == "Force Log Out", "logoff", action == "Accept", "success", action == "Drop", "modified"), match(op_type,"Repair"), "modified", true(), action)
EVAL-app = case(subject IN("Administrator Login","Administrator Logout"), product, product == "Endpoint Compliance", host_type, true(), app)
EVAL-body = coalesce(reason,failure_impact,sys_message,fw_message,update_status,status,description,subscription_stat_desc,result,event_name,event_type,body)
EVAL-change_type = case(operation IN ("Log Out", "Force Log Out") OR subject == "Administrator Logout", "AAA", update_status="updated" and isnotnull(db_ver), "filesystem", isnotnull(file_operation), "filesystem", event_type == "Policy Update" OR event_name == "Policy installation", "filesystem", subject IN("Object Manipulation","Policy Installation","File Operation"), "filesystem", event_type IN("Status Changed"), event_type, product == "Core", event_type, true(), change_type)
EVAL-command = case(product IN("MEPP","Media Encryption & Port Protection") AND isnotnull(file_operation), file_operation, true(),coalesce(command, operation))
EVAL-date = coalesce(time, date, local_time)
EVAL-description = coalesce(description,case(subject == "Endpoint Activity", additional_info, event_type == "Compliance Check Not Met", event_type), media_description)
EVAL-dest = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), host, isnotnull(db_ver) AND update_status == "updated", origin, ifdir == "inbound" OR subject IN("Administrator Login","Administrator Logout") OR action IN("Log In","Log Out") OR isnotnull(fieldschanges) OR operation == "Delete Object" OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)), origin, ifdir == "outbound", client_ip))
EVAL-dest_ip = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), isnotnull(db_ver) AND update_status == "updated", origin,ifdir == "inbound" OR subject IN("Administrator Login","Administrator Logout") OR action IN("Log In","Log Out") OR isnotnull(fieldschanges) OR operation == "Delete Object" OR subject=="Object Manipulation", origin, ifdir == "outbound", client_ip))
EVAL-dest_port = coalesce(dest_port, service)
EVAL-dest_translated_ip = coalesce(xlatedst, dest_translated_ip)
EVAL-dest_translated_port = coalesce(xlatedport, dest_translated_port)
EVAL-dvc = coalesce(origin, dvc)
EVAL-enabled = if(connectivity_state == "Connected", "enabled", enabled)
EVAL-id = coalesce(loguid,id)
EVAL-object = coalesce(object_name, objectname, case(subject IN("Administrator Login","Administrator Logout") OR action IN("Log In","Log Out"), coalesce(administrator,user), match(additional_info,"[Ll]icense"), "license", event_type == "Status Changed", rule_name, isnotnull(file_operation), file_name, operation == "Install Policy", "policy", product == "Endpoint Security Console", securitypolicy, product == "Endpoint Compliance", policy_name, true(), coalesce(session_name,object)))
EVAL-object_attrs = coalesce(fieldschanges, case(event_type == "Status Changed", new_status), object_attrs)
EVAL-object_category = coalesce(objecttype, object_category,case(subject IN("Administrator Login","Administrator Logout") OR action IN("Log In","Log Out"), "user", isnotnull(file_operation), "file", isnotnull(policy_name) OR operation == "Install Policy" OR event_type == "Status Changed", "policy", subject == "Object Manipulation", "file"))
EVAL-object_id = case(product == "Endpoint Compliance", policy_guid, subject IN("Administrator Login","Administrator Logout") OR action IN("Log In","Log Out"), coalesce(administrator,user), product == "endpoint" AND objecttype == "PolicyUpdateTime", "PolicyUid-".replace(fieldschanges,"PolicyUid:\sChanged\sfrom\s\S+\sto\s'([^']*)'", "\1"),product == "Endpoint Security Console", coalesce(securitypolicy, objectname), true(), object_id)
EVAL-object_path = case(product IN("MEPP","Media Encryption & Port Protection"), destination_path, true(), object_path)
EVAL-reason = case(subject IN("Administrator Login","Administrator Logout"), subject, true(), reason)
EVAL-result = coalesce(fieldschanges, description, case(operation IN ("Log Out", "Force Log Out"), operation, isnotnull(new_status), "modified", isnotnull(file_operation), action, product != "Endpoint Security Console", additional_info, true(), result))
EVAL-src = coalesce(src, src_ip, client_ip, case(ifdir == "outbound", origin))
EVAL-src_ip = coalesce(src, src_ip, client_ip,case(ifdir == "outbound", origin))
EVAL-src_port = coalesce(s_port, src_port)
EVAL-src_translated_ip = coalesce(xlatesrc, src_translated_ip)
EVAL-src_translated_port = coalesce(xlatesport, src_translated_port)
EVAL-src_user = replace(coalesce(src_user,src_user_name,administrator), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-src_user_name = replace(coalesce(src_user_name,src_user,administrator), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-status = coalesce(lower(audit_status),case(event_type == "File Operation", if(action == "Block", "failure", "success"), isnotnull(fieldschanges),"success",isnotnull(operation) AND isnull(failure_impact), "success", update_status == "updated", "success", event_type IN("Policy Update", "Status Changed") AND isnull(failure_impact), "success",event_name IN("Policy installation") AND isnull(failure_impact), "success", match(op_type,"Repair"), "success", connectivity_state == "Connected", "connected", true(), lower(status)))
EVAL-type = case(isnotnull(alert), "alert", update_status IN("Blade activated","Blade deactivated"), "alert", true(), case(severity IN ("Critical","High","3","4"), "alert", severity IN("Informational","Low","Medium","0","1","2"), "event"))
EVAL-user = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-user_name = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-user_type = if(isnotnull(administrator), "Admin", user_type)
EVAL-vendor_product = coalesce(product, vendor_product)
EVAL-version = if(product IN ("Media Encryption & Port Protection") AND isnotnull(media_description), null(), version)

[source::checkpoint:ids_malware]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

REPORT-transforms_file_name_and_file_path = transforms_file_name_and_file_path
REPORT-remediated_files_list = remediated_files_list
REPORT-url_domain_extract = url_domain_from_resource

FIELDALIAS-dvc_ip = origin AS dvc_ip
FIELDALIAS-direction = ifdir AS direction
FIELDALIAS-bytes_in_from_received_bytes = received_bytes AS bytes_in
FIELDALIAS-bytes_out_from_sent_bytes = sent_bytes AS bytes_out
FIELDALIAS-http_method_from_method = method AS http_method
FIELDALIAS-http_user_agent_from_user_agent = user_agent AS http_user_agent

EVAL-action = case(reason == "Valid_TE_License", "started", product == "Zero Phishing" AND isnull(protection_name), action, product == "Anti-Malware" AND action_details == "Started", "allowed", product == "Anti-Malware" AND action_details == "Canceled", "blocked", product == "Anti-Malware" AND action_details == "User canceled", "allowed", action IN("Accept", "Detect", "Allow"), "allowed", action IN("Drop", "Prevent", "Redirect", "Block"), "blocked", action == "Key Install", "started", true(), null)
EVAL-app = case(isnotnull(subscription_stat), product, update_status IN("Blade activated","Blade deactivated","failed") OR isnotnull(failure_impact), product,product IN ("OS Exploits","Zero Phishing"), product, product IN("Anti-Malware") AND event_type IN("Scan Start","Update","Scan Stop"), product, product == "Threat Emulation" AND isnull(protection_type) AND isnull(proto), product, true(), app)
EVAL-body = coalesce(reason,failure_impact,sys_message,fw_message,update_status,status,description,subscription_stat_desc,result,event_name,event_type,body)
EVAL-bytes = bytes_in + bytes_out
EVAL-category = coalesce(protection_type, category)
EVAL-change_type = case(reason == "Valid_TE_License", "filesystem", true(), change_type)
EVAL-date = coalesce(time, date, local_time)
EVAL-description = coalesce(case(product == "Threat Extraction" AND isnotnull(failure_impact), failure_impact, product = "Anti-Malware" AND action_details == "Server Not Available", action_details), description, subscription_stat_desc)
EVAL-dest = case(isnotnull(file_name) OR isnotnull(remediated_files) OR detected_by == "Endpoint Anti-Malware", src, true(), coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR isnotnull(failure_impact) OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert), host,product="Anti-Bot" AND isnotnull(subscription_stat), host,isnotnull(db_ver) AND update_status == "updated", origin, ifdir == "inbound" OR isnotnull(fieldschanges) OR operation == "Delete Object"  OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)), origin)))
EVAL-dest_ip = case(isnotnull(file_name) OR isnotnull(remediated_files) OR detected_by == "Endpoint Anti-Malware", src, true(), coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR isnotnull(failure_impact) OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), product="Anti-Bot" AND isnotnull(subscription_stat), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), isnotnull(db_ver) AND update_status == "updated", origin, ifdir == "inbound" OR isnotnull(fieldschanges) OR operation == "Delete Object" OR subject=="Object Manipulation" OR (update_status="updated" AND isnotnull(db_ver)), origin)))
EVAL-dest_port = coalesce(dest_port, service)
EVAL-dest_translated_ip = coalesce(xlatedst, dest_translated_ip)
EVAL-dest_translated_port = coalesce(xlatedport, dest_translated_port)
EVAL-dvc = coalesce(origin, dvc)
EVAL-file_hash = coalesce(file_hash,file_md5,file_sha1)
EVAL-file_name = coalesce(extracted_file_name, file_name, remediated_files)
EVAL-file_path = case(isnotnull(extracted_file_path), extracted_file_path, match(resource, coalesce(extracted_file_name, file_name)), resource, isnotnull(scanned_drives) AND NOT match(scanned_drives, "not available"), scanned_drives, true(), null())
EVAL-http_user_agent_length = len(user_agent)
EVAL-id = coalesce(loguid,id)
EVAL-ids_type= case((isnotnull(malware_action) OR isnotnull(protection_name)) AND isnull(file_name), case(isnotnull(ifname) OR isnotnull(proto) OR isnotnull(smartdefense_profile), "network", isnotnull(client_name),"host"))
EVAL-object = coalesce(object_name, case(match(additional_info,"[Ll]icense"),"license", reason == "Valid_TE_License", product), session_name, object)
EVAL-object_attrs = case(reason == "Valid_TE_License" AND description == "Threat Emulation is enabled due to valid license.", "status-enabled", true(), object_attrs)
EVAL-object_category = case(reason == "Valid_TE_License", "Blade", true(), object_category)
EVAL-protocol = case(proto IN ("4", "6", "17"), "ip", true(), protocol)
EVAL-protocol_version = case(isnotnull(src) AND isnotnull(proto),if(match(src,":"),"ipv6","ipv4"))
EVAL-result = coalesce(fieldschanges, new_status, update_status, description, additional_info)
EVAL-rule = coalesce(rule_name, app_rule_name, policy_name, rule)
EVAL-signature = case(product == "Anti-Malware" AND action_details == "Server Not Available", action_details, product IN ("Anti-Malware") AND event_type IN ("Scan Start", "Scan Stop", "Update"), event_type, product == "Threat Emulation" AND event_type == "TE Info Event", event_type, product == "Threat Extraction" AND isnotnull(failure_impact), failure_impact, true(), coalesce(protection_name,attack_info,malware_action,errors,signature))
EVAL-signature_id = coalesce(protection_id,signature_id)
EVAL-src = case(isnotnull(file_name) OR isnotnull(remediated_files) OR detected_by == "Endpoint Anti-Malware", coalesce(dst, origin),true(),coalesce(src, src_ip, case(ifdir == "outbound" OR (product=="Threat Extraction" AND isnotnull(failure_impact)), origin)))
EVAL-src_ip = case(isnotnull(file_name) OR isnotnull(remediated_files) OR detected_by == "Endpoint Anti-Malware", dst,true(),coalesce(src, src_ip, case(ifdir == "outbound", origin)))
EVAL-src_port = coalesce(s_port, src_port)
EVAL-src_translated_ip = coalesce(xlatesrc, src_translated_ip)
EVAL-src_translated_port = coalesce(xlatesport, src_translated_port)
EVAL-src_user = replace(coalesce(src_user, src_user_name, administrator), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-src_user_name = replace(coalesce(src_user_name, src_user, administrator), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-status = case(reason == "Valid_TE_License", "success", true(), status)
EVAL-transport = coalesce(case(proto == "6", "tcp", proto == "17", "udp", proto == "1", "icmp"), transport)
EVAL-type = case(isnotnull(alert), "alert", update_status IN("Blade activated","Blade deactivated"), "alert", true(), case(severity IN ("Critical","High","3","4"), "alert", severity IN("Informational","Low","Medium","0","1","2"), "event"))
EVAL-url = if(match(resource,"^http"), resource, url)
EVAL-url_domain = if(match(resource, "^http"), url_domain, null())
EVAL-url_length = if(match(resource, "^http"), len(resource), url_length)
EVAL-user = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-user_name = replace(coalesce(user_name, src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-vendor_product = coalesce(product, vendor_product)

[source::checkpoint:network]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE

FIELDALIAS-body = status AS body
FIELDALIAS-authentication_method_from_auth_method = auth_method AS authentication_method
EVAL-action = case(event_action == "Log In" AND status == "Success", "success", event_action == "Log Out", "logoff", true(), action)
EVAL-app = if(product IN ("Device","iOS Profiles", "Mobile Access"), product, app)
EVAL-change_type = case(product == "Mobile Access" AND event_action == "Log Out", "AAA")
EVAL-command = coalesce(operation, event_type, command)
EVAL-dest = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), host, isnotnull(db_ver) AND update_status == "updated", origin,ifdir == "inbound" OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-dest_ip = coalesce(dst, dest, dest_ip, case(update_status IN("Blade activated", "Blade deactivated", "failed") OR event_name == "Check Point administrator login at irregular hours" OR isnotnull(alert) OR isnotnull(failure_impact), if(match(host,"(?:\d+\.\d+\.\d+\.\d+)"),host,null), isnotnull(db_ver) AND update_status == "updated", origin, ifdir == "inbound" OR (update_status="updated" AND isnotnull(db_ver)), origin))
EVAL-dvc = coalesce(origin, dvc)
EVAL-id = coalesce(loguid,id)
EVAL-object = case(product == "Mobile Access" AND event_action == "Log Out", coalesce(administrator, user))
EVAL-object_id = case(product == "Mobile Access" AND event_action == "Log Out", coalesce(administrator, user))
EVAL-object_category = if(product == "Mobile Access" AND event_action == "Log Out", "user", null())
EVAL-result = coalesce(operation, event_type, result)
EVAL-src = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_ip = coalesce(src, src_ip, case(ifdir == "outbound", origin))
EVAL-src_user = replace(coalesce(src_user, src_user_name, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-src_user_name = replace(coalesce(src_user_name, src_user, administrator, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-status = case(event_type == "Logout" AND isnull(reject_id), "success", true(), status)
EVAL-type = case(isnotnull(alert), "alert", true(), case(severity IN ("Critical","High","3","4"), "alert", severity IN("Informational","Low","Medium","0","1","2"), "event"))
EVAL-user = replace(coalesce(user_name,src_user_name, user), "(.*?)\s?\(([^\)]*)\)$", "\2")
EVAL-user_name = replace(coalesce(user_name,src_user_name, user), "(.*?)\s?\(([^\)]*)\)$", "\1")
EVAL-vendor_product = coalesce(product, vendor_product)

[source::checkpoint:cp_default]
SHOULD_LINEMERGE = false
EVENT_BREAKER_ENABLE = true
KV_MODE = NONE
